# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-22 14:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/api/lab/omni.isaac.lab.utils.rst:2
msgid "omni.isaac.lab.utils"
msgstr ""

#: of omni.isaac.lab.utils:1
msgid ""
"Sub-package containing utilities for common operations and helper "
"functions."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:7
msgid "Submodules"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`io <omni.isaac.lab.utils.io>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.io:1
msgid "Submodules for files IO operations."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`array <omni.isaac.lab.utils.array>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.array:1
msgid "Sub-module containing utilities for working with different array backends."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`assets <omni.isaac.lab.utils.assets>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.assets:1
msgid ""
"Sub-module that defines the host-server where assets and resources are "
"stored."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`buffers <omni.isaac.lab.utils.buffers>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.buffers:1
msgid "Sub-module containing different buffers."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`dict <omni.isaac.lab.utils.dict>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.dict:1
msgid "Sub-module for utilities for working with dictionaries."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`interpolation <omni.isaac.lab.utils.interpolation>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.interpolation:1
msgid "Submodule for different interpolation methods."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`math <omni.isaac.lab.utils.math>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.math:1
msgid "Sub-module containing utilities for various math operations."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`modifiers <omni.isaac.lab.utils.modifiers>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.modifiers:1
msgid "Sub-module containing different modifiers implementations."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`noise <omni.isaac.lab.utils.noise>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.noise:1
msgid "Sub-module containing different noise models implementations."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`string <omni.isaac.lab.utils.string>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.string:1
msgid ""
"Sub-module containing utilities for transforming strings and regular "
"expressions."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`timer <omni.isaac.lab.utils.timer>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.timer:1
msgid ""
"Sub-module for a timer class that can be used for performance "
"measurements."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1
msgid ":py:obj:`warp <omni.isaac.lab.utils.warp>`\\"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:22:<autosummary>:1 of
#: omni.isaac.lab.utils.warp:1
msgid "Sub-module containing operations based on warp."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:24
msgid "Functions"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:27:<autosummary>:1
msgid ""
":py:obj:`configclass <omni.isaac.lab.utils.configclass>`\\ \\(cls\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:27:<autosummary>:1 of
#: omni.isaac.lab.utils.configclass.configclass:1
#: omni.isaac.lab.utils.configclass.configclass:1:<autosummary>:1
msgid ""
"Wrapper around `dataclass` functionality to add extra checks and "
"utilities."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:30
msgid "Configuration class"
msgstr ""

#: of omni.isaac.lab.utils.configclass:1
msgid ""
"Sub-module that provides a wrapper around the Python 3.7 onwards "
"``dataclasses`` module."
msgstr ""

#: of omni.isaac.lab.utils.array:1 omni.isaac.lab.utils.assets:1
#: omni.isaac.lab.utils.configclass:1 omni.isaac.lab.utils.dict:1
#: omni.isaac.lab.utils.io:1 omni.isaac.lab.utils.math:1
#: omni.isaac.lab.utils.modifiers:1 omni.isaac.lab.utils.noise:1
#: omni.isaac.lab.utils.string:1 omni.isaac.lab.utils.warp:1
msgid "**Functions:**"
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:1:<autosummary>:1
msgid ""
":py:obj:`configclass <omni.isaac.lab.utils.configclass.configclass>`\\ "
"\\(cls\\, \\*\\*kwargs\\)"
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:3
msgid ""
"As of Python 3.7, the standard dataclasses have two main issues which "
"makes them non-generic for configuration use-cases. These include:"
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:6
msgid "Requiring a type annotation for all its members."
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:7
msgid ""
"Requiring explicit usage of :meth:`field(default_factory=...)` to "
"reinitialize mutable variables."
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:9
msgid ""
"This function provides a decorator that wraps around Python's "
"`dataclass`_ utility to deal with the above two issues. It also provides "
"additional helper functions for dictionary <-> class conversion and "
"easily copying class instances."
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:13
#: omni.isaac.lab.utils.noise:6
msgid "Usage:"
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch
#: omni.isaac.lab.utils.assets.check_file_path
#: omni.isaac.lab.utils.assets.read_file
#: omni.isaac.lab.utils.assets.retrieve_file_path
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.append
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.reset
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.reset
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag
#: omni.isaac.lab.utils.configclass.configclass
#: omni.isaac.lab.utils.dict.class_to_dict
#: omni.isaac.lab.utils.dict.convert_dict_to_backend
#: omni.isaac.lab.utils.dict.dict_to_md5_hash
#: omni.isaac.lab.utils.dict.replace_slices_with_strings
#: omni.isaac.lab.utils.dict.replace_strings_with_slices
#: omni.isaac.lab.utils.dict.update_class_from_dict
#: omni.isaac.lab.utils.dict.update_dict
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.compute
#: omni.isaac.lab.utils.io.pkl.dump_pickle
#: omni.isaac.lab.utils.io.pkl.load_pickle
#: omni.isaac.lab.utils.io.yaml.dump_yaml
#: omni.isaac.lab.utils.io.yaml.load_yaml
#: omni.isaac.lab.utils.math.apply_delta_pose
#: omni.isaac.lab.utils.math.axis_angle_from_quat
#: omni.isaac.lab.utils.math.combine_frame_transforms
#: omni.isaac.lab.utils.math.compute_pose_error
#: omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention
#: omni.isaac.lab.utils.math.convert_quat omni.isaac.lab.utils.math.copysign
#: omni.isaac.lab.utils.math.create_rotation_matrix_from_view
#: omni.isaac.lab.utils.math.default_orientation
#: omni.isaac.lab.utils.math.euler_xyz_from_quat
#: omni.isaac.lab.utils.math.is_identity_pose
#: omni.isaac.lab.utils.math.matrix_from_euler
#: omni.isaac.lab.utils.math.matrix_from_quat
#: omni.isaac.lab.utils.math.normalize
#: omni.isaac.lab.utils.math.orthogonalize_perspective_depth
#: omni.isaac.lab.utils.math.project_points
#: omni.isaac.lab.utils.math.quat_apply
#: omni.isaac.lab.utils.math.quat_apply_yaw
#: omni.isaac.lab.utils.math.quat_box_minus
#: omni.isaac.lab.utils.math.quat_conjugate
#: omni.isaac.lab.utils.math.quat_error_magnitude
#: omni.isaac.lab.utils.math.quat_from_angle_axis
#: omni.isaac.lab.utils.math.quat_from_euler_xyz
#: omni.isaac.lab.utils.math.quat_from_matrix
#: omni.isaac.lab.utils.math.quat_inv omni.isaac.lab.utils.math.quat_mul
#: omni.isaac.lab.utils.math.quat_rotate
#: omni.isaac.lab.utils.math.quat_rotate_inverse
#: omni.isaac.lab.utils.math.quat_unique
#: omni.isaac.lab.utils.math.random_orientation
#: omni.isaac.lab.utils.math.random_yaw_orientation
#: omni.isaac.lab.utils.math.sample_cylinder
#: omni.isaac.lab.utils.math.sample_gaussian
#: omni.isaac.lab.utils.math.sample_log_uniform
#: omni.isaac.lab.utils.math.sample_triangle
#: omni.isaac.lab.utils.math.sample_uniform omni.isaac.lab.utils.math.saturate
#: omni.isaac.lab.utils.math.scale_transform
#: omni.isaac.lab.utils.math.skew_symmetric_matrix
#: omni.isaac.lab.utils.math.subtract_frame_transforms
#: omni.isaac.lab.utils.math.transform_points
#: omni.isaac.lab.utils.math.unproject_depth
#: omni.isaac.lab.utils.math.unscale_transform
#: omni.isaac.lab.utils.math.wrap_to_pi omni.isaac.lab.utils.math.yaw_quat
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.__call__
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.__call__
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset
#: omni.isaac.lab.utils.modifiers.modifier.bias
#: omni.isaac.lab.utils.modifiers.modifier.clip
#: omni.isaac.lab.utils.modifiers.modifier.scale
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.__call__
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel.apply
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.apply
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset
#: omni.isaac.lab.utils.noise.noise_model.constant_noise
#: omni.isaac.lab.utils.noise.noise_model.gaussian_noise
#: omni.isaac.lab.utils.noise.noise_model.uniform_noise
#: omni.isaac.lab.utils.string.callable_to_string
#: omni.isaac.lab.utils.string.is_lambda_expression
#: omni.isaac.lab.utils.string.resolve_matching_names
#: omni.isaac.lab.utils.string.resolve_matching_names_values
#: omni.isaac.lab.utils.string.string_to_callable
#: omni.isaac.lab.utils.string.string_to_slice
#: omni.isaac.lab.utils.string.to_camel_case
#: omni.isaac.lab.utils.string.to_snake_case
#: omni.isaac.lab.utils.timer.Timer.__init__
#: omni.isaac.lab.utils.timer.Timer.get_timer_info
#: omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh
#: omni.isaac.lab.utils.warp.ops.raycast_mesh
msgid "Parameters"
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:46
msgid "The class to wrap around."
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:47
msgid "Additional arguments to pass to :func:`dataclass`."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch
#: omni.isaac.lab.utils.assets.check_file_path
#: omni.isaac.lab.utils.assets.read_file
#: omni.isaac.lab.utils.assets.retrieve_file_path
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute
#: omni.isaac.lab.utils.configclass.configclass
#: omni.isaac.lab.utils.dict.class_to_dict
#: omni.isaac.lab.utils.dict.convert_dict_to_backend
#: omni.isaac.lab.utils.dict.dict_to_md5_hash
#: omni.isaac.lab.utils.dict.replace_slices_with_strings
#: omni.isaac.lab.utils.dict.replace_strings_with_slices
#: omni.isaac.lab.utils.dict.update_dict
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.compute
#: omni.isaac.lab.utils.io.pkl.load_pickle
#: omni.isaac.lab.utils.io.yaml.load_yaml
#: omni.isaac.lab.utils.math.apply_delta_pose
#: omni.isaac.lab.utils.math.axis_angle_from_quat
#: omni.isaac.lab.utils.math.combine_frame_transforms
#: omni.isaac.lab.utils.math.compute_pose_error
#: omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention
#: omni.isaac.lab.utils.math.convert_quat omni.isaac.lab.utils.math.copysign
#: omni.isaac.lab.utils.math.create_rotation_matrix_from_view
#: omni.isaac.lab.utils.math.default_orientation
#: omni.isaac.lab.utils.math.euler_xyz_from_quat
#: omni.isaac.lab.utils.math.is_identity_pose
#: omni.isaac.lab.utils.math.matrix_from_euler
#: omni.isaac.lab.utils.math.matrix_from_quat
#: omni.isaac.lab.utils.math.normalize
#: omni.isaac.lab.utils.math.orthogonalize_perspective_depth
#: omni.isaac.lab.utils.math.project_points
#: omni.isaac.lab.utils.math.quat_apply
#: omni.isaac.lab.utils.math.quat_apply_yaw
#: omni.isaac.lab.utils.math.quat_box_minus
#: omni.isaac.lab.utils.math.quat_conjugate
#: omni.isaac.lab.utils.math.quat_error_magnitude
#: omni.isaac.lab.utils.math.quat_from_angle_axis
#: omni.isaac.lab.utils.math.quat_from_euler_xyz
#: omni.isaac.lab.utils.math.quat_from_matrix
#: omni.isaac.lab.utils.math.quat_inv omni.isaac.lab.utils.math.quat_mul
#: omni.isaac.lab.utils.math.quat_rotate
#: omni.isaac.lab.utils.math.quat_rotate_inverse
#: omni.isaac.lab.utils.math.quat_unique
#: omni.isaac.lab.utils.math.random_orientation
#: omni.isaac.lab.utils.math.random_yaw_orientation
#: omni.isaac.lab.utils.math.sample_cylinder
#: omni.isaac.lab.utils.math.sample_gaussian
#: omni.isaac.lab.utils.math.sample_log_uniform
#: omni.isaac.lab.utils.math.sample_triangle
#: omni.isaac.lab.utils.math.sample_uniform omni.isaac.lab.utils.math.saturate
#: omni.isaac.lab.utils.math.scale_transform
#: omni.isaac.lab.utils.math.skew_symmetric_matrix
#: omni.isaac.lab.utils.math.subtract_frame_transforms
#: omni.isaac.lab.utils.math.transform_points
#: omni.isaac.lab.utils.math.unproject_depth
#: omni.isaac.lab.utils.math.unscale_transform
#: omni.isaac.lab.utils.math.wrap_to_pi omni.isaac.lab.utils.math.yaw_quat
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.__call__
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.__call__
#: omni.isaac.lab.utils.modifiers.modifier.bias
#: omni.isaac.lab.utils.modifiers.modifier.clip
#: omni.isaac.lab.utils.modifiers.modifier.scale
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.__call__
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel.apply
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.apply
#: omni.isaac.lab.utils.noise.noise_model.constant_noise
#: omni.isaac.lab.utils.noise.noise_model.gaussian_noise
#: omni.isaac.lab.utils.noise.noise_model.uniform_noise
#: omni.isaac.lab.utils.string.callable_to_string
#: omni.isaac.lab.utils.string.is_lambda_expression
#: omni.isaac.lab.utils.string.resolve_matching_names
#: omni.isaac.lab.utils.string.resolve_matching_names_values
#: omni.isaac.lab.utils.string.string_to_callable
#: omni.isaac.lab.utils.string.string_to_slice
#: omni.isaac.lab.utils.string.to_camel_case
#: omni.isaac.lab.utils.string.to_snake_case
#: omni.isaac.lab.utils.timer.Timer.get_timer_info
#: omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh
#: omni.isaac.lab.utils.warp.ops.raycast_mesh
msgid "Returns"
msgstr ""

#: of omni.isaac.lab.utils.configclass.configclass:49
msgid "The wrapped class."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:37
msgid "IO operations"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
msgid ""
":py:obj:`dump_pickle <omni.isaac.lab.utils.io.dump_pickle>`\\ "
"\\(filename\\, data\\)"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1
#: omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
msgid "Saves data into a pickle file safely."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
msgid ""
":py:obj:`load_pickle <omni.isaac.lab.utils.io.load_pickle>`\\ "
"\\(filename\\)"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
#: omni.isaac.lab.utils.io.pkl.load_pickle:1
#: omni.isaac.lab.utils.io.yaml.load_yaml:1
msgid "Loads an input PKL file safely."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
msgid ""
":py:obj:`dump_yaml <omni.isaac.lab.utils.io.dump_yaml>`\\ \\(filename\\, "
"data\\[\\, sort\\_keys\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
#: omni.isaac.lab.utils.io.yaml.dump_yaml:1
msgid "Saves data into a YAML file safely."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:1:<autosummary>:1
msgid ":py:obj:`load_yaml <omni.isaac.lab.utils.io.load_yaml>`\\ \\(filename\\)"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:3
#: omni.isaac.lab.utils.io.yaml.dump_yaml:3
msgid "The function creates any missing directory along the file's path."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:5
#: omni.isaac.lab.utils.io.yaml.dump_yaml:5
msgid "The path to save the file at."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.dump_pickle:6
msgid "The data to save."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.load_pickle:3
#: omni.isaac.lab.utils.io.yaml.load_yaml:3
msgid "The path to pickled file."
msgstr ""

#: of omni.isaac.lab.utils.assets.read_file
#: omni.isaac.lab.utils.assets.retrieve_file_path
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.append
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag
#: omni.isaac.lab.utils.dict.class_to_dict
#: omni.isaac.lab.utils.dict.convert_dict_to_backend
#: omni.isaac.lab.utils.dict.update_class_from_dict
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__
#: omni.isaac.lab.utils.io.pkl.load_pickle
#: omni.isaac.lab.utils.io.yaml.load_yaml
#: omni.isaac.lab.utils.math.compute_pose_error
#: omni.isaac.lab.utils.math.convert_quat
#: omni.isaac.lab.utils.math.orthogonalize_perspective_depth
#: omni.isaac.lab.utils.math.quat_mul
#: omni.isaac.lab.utils.math.skew_symmetric_matrix
#: omni.isaac.lab.utils.math.transform_points
#: omni.isaac.lab.utils.math.unproject_depth
#: omni.isaac.lab.utils.string.callable_to_string
#: omni.isaac.lab.utils.string.resolve_matching_names
#: omni.isaac.lab.utils.string.resolve_matching_names_values
#: omni.isaac.lab.utils.string.string_to_callable
#: omni.isaac.lab.utils.string.to_camel_case
#: omni.isaac.lab.utils.timer.Timer.get_timer_info
msgid "Raises"
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.load_pickle:5
#: omni.isaac.lab.utils.io.yaml.load_yaml:5
msgid "When the specified file does not exist."
msgstr ""

#: of omni.isaac.lab.utils.io.pkl.load_pickle:7
#: omni.isaac.lab.utils.io.yaml.load_yaml:7
msgid "The data read from the input file."
msgstr ""

#: of omni.isaac.lab.utils.io.yaml.dump_yaml:6
msgid "The data to save either a dictionary or class object."
msgstr ""

#: of omni.isaac.lab.utils.io.yaml.dump_yaml:7
msgid "Whether to sort the keys in the output file. Defaults to False."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:45
msgid "Array operations"
msgstr ""

#: of omni.isaac.lab.utils.array:1 omni.isaac.lab.utils.assets:1
msgid "**Data:**"
msgstr ""

#: of omni.isaac.lab.utils.array:1:<autosummary>:1
msgid ":py:obj:`TENSOR_TYPES <omni.isaac.lab.utils.array.TENSOR_TYPES>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.array.TENSOR_TYPES:1
#: omni.isaac.lab.utils.array:1:<autosummary>:1
msgid "A dictionary containing the types for each backend."
msgstr ""

#: of omni.isaac.lab.utils.array:1:<autosummary>:1
msgid ""
":py:obj:`TENSOR_TYPE_CONVERSIONS "
"<omni.isaac.lab.utils.array.TENSOR_TYPE_CONVERSIONS>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.array.TENSOR_TYPE_CONVERSIONS:1
#: omni.isaac.lab.utils.array:1:<autosummary>:1
msgid "A nested dictionary containing the conversion functions for each backend."
msgstr ""

#: of typing.Union:1:<autosummary>:1
msgid ""
":py:obj:`convert_to_torch "
"<omni.isaac.lab.utils.array.convert_to_torch>`\\ \\(array\\[\\, dtype\\, "
"device\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:1
#: typing.Union:1:<autosummary>:1
msgid "Converts a given array into a torch tensor."
msgstr ""

#: ../../docstring of typing.Union:1
msgid "Type definition for a tensor data."
msgstr ""

#: ../../docstring of typing.Union:3
msgid "Union of numpy, torch, and warp arrays."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.array.TENSOR_TYPES:3
msgid ""
"The keys are the name of the backend (\"numpy\", \"torch\", \"warp\") and"
" the values are the corresponding type (``np.ndarray``, ``torch.Tensor``,"
" ``wp.array``)."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.array.TENSOR_TYPE_CONVERSIONS:3
msgid ""
"The keys of the outer dictionary are the name of target backend "
"(\"numpy\", \"torch\", \"warp\"). The keys of the inner dictionary are "
"the source backend (``np.ndarray``, ``torch.Tensor``, ``wp.array``)."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:3
msgid ""
"The function tries to convert the array to a torch tensor. If the array "
"is a numpy/warp arrays, or python list/tuples, it is converted to a torch"
" tensor. If the array is already a torch tensor, it is returned directly."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:7
msgid ""
"If ``device`` is None, then the function deduces the current device of "
"the data. For numpy arrays, this defaults to \"cpu\", for torch tensors "
"it is \"cpu\" or \"cuda\", and for warp arrays it is \"cuda\"."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:12
msgid ""
"Since PyTorch does not support unsigned integer types, unsigned integer "
"arrays are converted to signed integer arrays. This is done by casting "
"the array to the corresponding signed integer type."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:15
msgid ""
"The input array. It can be a numpy array, warp array, python list/tuple, "
"or torch tensor."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:16
msgid "Target data-type for the tensor."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:17
msgid "The target device for the tensor. Defaults to None."
msgstr ""

#: of omni.isaac.lab.utils.array.convert_to_torch:19
msgid "The converted array as torch tensor."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:52
msgid "Asset operations"
msgstr ""

#: of omni.isaac.lab.utils.assets:3
msgid ""
"By default, we use the Isaac Sim Nucleus Server for hosting assets and "
"resources. This makes distribution of the assets easier and makes the "
"repository smaller in size code-wise."
msgstr ""

#: of omni.isaac.lab.utils.assets:6
msgid "For more information, please check information on `Omniverse Nucleus`_."
msgstr ""

#: of omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid ""
":py:obj:`NUCLEUS_ASSET_ROOT_DIR "
"<omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1
#: omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid "Path to the root directory on the Nucleus Server."
msgstr ""

#: of omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid ""
":py:obj:`NVIDIA_NUCLEUS_DIR "
"<omni.isaac.lab.utils.assets.NVIDIA_NUCLEUS_DIR>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.assets.NVIDIA_NUCLEUS_DIR:1
#: omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid "Path to the root directory on the NVIDIA Nucleus Server."
msgstr ""

#: of omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid ""
":py:obj:`ISAAC_NUCLEUS_DIR "
"<omni.isaac.lab.utils.assets.ISAAC_NUCLEUS_DIR>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.assets.ISAAC_NUCLEUS_DIR:1
#: omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid "Path to the ``Isaac`` directory on the NVIDIA Nucleus Server."
msgstr ""

#: of omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid ""
":py:obj:`ISAACLAB_NUCLEUS_DIR "
"<omni.isaac.lab.utils.assets.ISAACLAB_NUCLEUS_DIR>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.assets.ISAACLAB_NUCLEUS_DIR:1
#: omni.isaac.lab.utils.assets:1:<autosummary>:1
msgid "Path to the ``Isaac/IsaacLab`` directory on the NVIDIA Nucleus Server."
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
msgid ""
":py:obj:`check_file_path <omni.isaac.lab.utils.assets.check_file_path>`\\"
" \\(path\\)"
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
#: omni.isaac.lab.utils.assets.check_file_path:1
msgid "Checks if a file exists on the Nucleus Server or locally."
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
msgid ""
":py:obj:`retrieve_file_path "
"<omni.isaac.lab.utils.assets.retrieve_file_path>`\\ \\(path\\[\\, "
"download\\_dir\\, ...\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
#: omni.isaac.lab.utils.assets.retrieve_file_path:1
msgid "Retrieves the path to a file on the Nucleus Server or locally."
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
msgid ":py:obj:`read_file <omni.isaac.lab.utils.assets.read_file>`\\ \\(path\\)"
msgstr ""

#: of omni.isaac.lab.utils.assets.NUCLEUS_ASSET_ROOT_DIR:1:<autosummary>:1
#: omni.isaac.lab.utils.assets.read_file:1
msgid "Reads a file from the Nucleus Server or locally."
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:3
#: omni.isaac.lab.utils.assets.read_file:3
#: omni.isaac.lab.utils.assets.retrieve_file_path:7
msgid "The path to the file."
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:5
msgid ""
"The status of the file. Possible values are listed below.  * :obj:`0` if "
"the file does not exist * :obj:`1` if the file exists locally * :obj:`2` "
"if the file exists on the Nucleus Server"
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:5
msgid "The status of the file. Possible values are listed below."
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:7
msgid ":obj:`0` if the file does not exist"
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:8
msgid ":obj:`1` if the file exists locally"
msgstr ""

#: of omni.isaac.lab.utils.assets.check_file_path:9
msgid ":obj:`2` if the file exists on the Nucleus Server"
msgstr ""

#: of omni.isaac.lab.utils.assets.retrieve_file_path:3
msgid ""
"If the file exists locally, then the absolute path to the file is "
"returned. If the file exists on the Nucleus Server, then the file is "
"downloaded to the local machine and the absolute path to the file is "
"returned."
msgstr ""

#: of omni.isaac.lab.utils.assets.retrieve_file_path:8
msgid ""
"The directory where the file should be downloaded. Defaults to None, in "
"which case the file is downloaded to the system's temporary directory."
msgstr ""

#: of omni.isaac.lab.utils.assets.retrieve_file_path:10
msgid ""
"Whether to force download the file from the Nucleus Server. This will "
"overwrite the local file if it exists. Defaults to True."
msgstr ""

#: of omni.isaac.lab.utils.assets.retrieve_file_path:13
msgid "The path to the file on the local machine."
msgstr ""

#: of omni.isaac.lab.utils.assets.read_file:5
#: omni.isaac.lab.utils.assets.retrieve_file_path:15
msgid "When the file not found locally or on Nucleus Server."
msgstr ""

#: of omni.isaac.lab.utils.assets.retrieve_file_path:16
msgid ""
"When the file cannot be copied from the Nucleus Server to the local "
"machine. This     can happen when the file already exists locally and "
":attr:`force_download` is set to False."
msgstr ""

#: of omni.isaac.lab.utils.assets.read_file:7
msgid "The content of the file."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:59
msgid "Buffer operations"
msgstr ""

#: of omni.isaac.lab.utils.buffers:1 omni.isaac.lab.utils.interpolation:1
#: omni.isaac.lab.utils.modifiers:1 omni.isaac.lab.utils.noise:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1
#: omni.isaac.lab.utils.timer:1
msgid "**Classes:**"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ":py:obj:`CircularBuffer <omni.isaac.lab.utils.buffers.CircularBuffer>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid "Circular buffer for storing a history of batched tensor data."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ":py:obj:`DelayBuffer <omni.isaac.lab.utils.buffers.DelayBuffer>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1
msgid "Delay buffer that allows retrieving stored data with delays."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ""
":py:obj:`TimestampedBuffer "
"<omni.isaac.lab.utils.buffers.TimestampedBuffer>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1
msgid "A buffer class containing data and its timestamp."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:3
msgid ""
"This class implements a circular buffer for storing a history of batched "
"tensor data. The buffer is initialized with a maximum length and a batch "
"size. The data is stored in a circular fashion, and the data can be "
"retrieved in a LIFO (Last-In-First-Out) fashion. The buffer is designed "
"to be used in multi-environment settings, where each environment has its "
"own data."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:8
msgid ""
"The shape of the appended data is expected to be (batch_size, ...), where"
" the first dimension is the batch dimension. Correspondingly, the shape "
"of the ring buffer is (max_len, batch_size, ...)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:1
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:1
#: omni.isaac.lab.utils.modifiers.modifier.Integrator:1
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1
#: omni.isaac.lab.utils.timer.Timer:1
msgid "**Methods:**"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<omni.isaac.lab.utils.buffers.CircularBuffer.__init__>`\\ \\(max\\_len\\,"
" batch\\_size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid "Initialize the circular buffer."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.buffers.CircularBuffer.reset>`\\ "
"\\(\\[batch\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.reset:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid "Reset the circular buffer at the specified batch indices."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid ""
":py:obj:`append <omni.isaac.lab.utils.buffers.CircularBuffer.append>`\\ "
"\\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.append:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1:<autosummary>:1
msgid "Append the data to the circular buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.DigitalFilterCfg:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.IntegratorCfg:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.ConstantNoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.GaussianNoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.UniformNoiseCfg:1
#: omni.isaac.lab.utils.timer.Timer:1
msgid "**Attributes:**"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`batch_size "
"<omni.isaac.lab.utils.buffers.CircularBuffer.batch_size>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.CircularBuffer.batch_size:1
#: omni.isaac.lab.utils.buffers.DelayBuffer.batch_size:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid "The batch size of the ring buffer."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid ":py:obj:`device <omni.isaac.lab.utils.buffers.CircularBuffer.device>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.CircularBuffer.device:1
#: omni.isaac.lab.utils.buffers.DelayBuffer.device:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:5
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:7
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:11
msgid "The device used for processing."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`max_length "
"<omni.isaac.lab.utils.buffers.CircularBuffer.max_length>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.CircularBuffer.max_length:1
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid "The maximum length of the ring buffer."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`current_length "
"<omni.isaac.lab.utils.buffers.CircularBuffer.current_length>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:1:<autosummary>:1
msgid "The current length of the buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:3
msgid "The maximum length of the circular buffer. The minimum allowed value is 1."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:4
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:6
msgid "The batch dimension of the data."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.__init__:7
msgid "If the buffer size is less than one."
msgstr ""

#: of omni.isaac.lab.utils.buffers.CircularBuffer.current_length:1
msgid "The current length of the buffer. Shape is (batch_size,)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.CircularBuffer.current_length:3
msgid ""
"Since the buffer is circular, the current length is the minimum of the "
"number of pushes and the maximum length."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.reset:3
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.reset:3
msgid ""
"Elements to reset in the batch dimension. Default is None, which resets "
"all the batch indices."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.append:3
msgid ""
"The data to append to the circular buffer. The first dimension should be "
"the batch dimension. Shape is (batch_size, ...)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.circular_buffer.CircularBuffer.append:6
msgid "If the input data has a different batch size than the buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:3
msgid ""
"This class uses a batched circular buffer to store input data. Different "
"to a standard circular buffer, which uses the LIFO (last-in-first-out) "
"principle to retrieve the data, the delay buffer class allows retrieving "
"data based on the lag set by the user. For instance, if the delay set "
"inside the buffer is 1, then the second last entry from the stream is "
"retrieved. If it is 2, then the third last entry and so on."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:9
msgid ""
"The class supports storing a batched tensor data. This means that the "
"shape of the appended data is expected to be (batch_size, ...), where the"
" first dimension is the batch dimension. Correspondingly, the delay can "
"be set separately for each batch index. If the requested delay is larger "
"than the current length of the underlying buffer, the most recent entry "
"is returned."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:15
msgid ""
"By default, the delay buffer has no delay, meaning that the data is "
"returned as is."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid ""
":py:obj:`__init__ <omni.isaac.lab.utils.buffers.DelayBuffer.__init__>`\\ "
"\\(history\\_length\\, batch\\_size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid "Initialize the delay buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid ""
":py:obj:`set_time_lag "
"<omni.isaac.lab.utils.buffers.DelayBuffer.set_time_lag>`\\ "
"\\(time\\_lag\\[\\, batch\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid "Sets the time lag for the delay buffer across the provided batch indices."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.buffers.DelayBuffer.reset>`\\ "
"\\(\\[batch\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.reset:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid "Reset the data in the delay buffer at the specified batch indices."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid ""
":py:obj:`compute <omni.isaac.lab.utils.buffers.DelayBuffer.compute>`\\ "
"\\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer:1:<autosummary>:1
msgid ""
"Append the input data to the buffer and returns a stale version of the "
"data based on time lag delay."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`batch_size "
"<omni.isaac.lab.utils.buffers.DelayBuffer.batch_size>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ":py:obj:`device <omni.isaac.lab.utils.buffers.DelayBuffer.device>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`history_length "
"<omni.isaac.lab.utils.buffers.DelayBuffer.history_length>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.history_length:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid "The history length of the delay buffer."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`min_time_lag "
"<omni.isaac.lab.utils.buffers.DelayBuffer.min_time_lag>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.min_time_lag:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid "Minimum amount of time steps that can be delayed."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ""
":py:obj:`max_time_lag "
"<omni.isaac.lab.utils.buffers.DelayBuffer.max_time_lag>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.max_time_lag:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid "Maximum amount of time steps that can be delayed."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid ":py:obj:`time_lags <omni.isaac.lab.utils.buffers.DelayBuffer.time_lags>`\\"
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.time_lags:1
#: omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:1:<autosummary>:1
msgid "The time lag across each batch index."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.__init__:3
msgid ""
"The history of the buffer, i.e., the number of time steps in the past "
"that the data will be buffered. It is recommended to set this value equal"
" to the maximum time-step lag that is expected. The minimum acceptable "
"value is zero, which means only the latest data is stored."
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.history_length:3
msgid ""
"If zero, only the latest data is stored. If one, the latest and the "
"previous data are stored, and so on."
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.min_time_lag:3
msgid "This value cannot be negative or larger than :attr:`max_time_lag`."
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.max_time_lag:3
msgid "This value cannot be greater than :attr:`history_length`."
msgstr ""

#: of omni.isaac.lab.utils.buffers.DelayBuffer.time_lags:3
msgid ""
"The shape of the tensor is (batch_size, ). The value at each index "
"represents the delay for that index. This value is used to retrieve the "
"data from the buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:3
msgid ""
"The desired delay for the buffer.  * If an integer is provided, the same "
"delay is set for the provided batch indices. * If a tensor is provided, "
"the delay is set for each batch index separately. The shape of the tensor"
"   should be (len(batch_ids),)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:3
msgid "The desired delay for the buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:5
msgid ""
"If an integer is provided, the same delay is set for the provided batch "
"indices."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:6
msgid ""
"If a tensor is provided, the delay is set for each batch index "
"separately. The shape of the tensor should be (len(batch_ids),)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:8
msgid ""
"The batch indices for which the time lag is set. Default is None, which "
"sets the time lag for all batch indices."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:11
msgid "If the type of the :attr:`time_lag` is not int or integer tensor."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.set_time_lag:12
msgid ""
"If the minimum time lag is negative or the maximum time lag is larger "
"than the history length."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute:3
msgid ""
"If the requested delay is larger than the number of buffered data points "
"since the last reset, the function returns the latest data. For instance,"
" if the delay is set to 2 and only one data point is stored in the "
"buffer, the function will return the latest data. If the delay is set to "
"2 and three data points are stored, the function will return the first "
"data point."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute:8
msgid "The input data. Shape is (batch_size, ...)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.delay_buffer.DelayBuffer.compute:10
msgid ""
"The delayed version of the data from the stored buffer. Shape is "
"(batch_size, ...)."
msgstr ""

#: of omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:3
msgid ""
"This class is a simple data container that stores a tensor and its "
"timestamp. The timestamp is used to track the last update of the buffer. "
"The timestamp is set to -1.0 by default, indicating that the buffer has "
"not been updated yet. The timestamp should be updated whenever the data "
"in the buffer is updated. This way the buffer can be used to check "
"whether the data is outdated and needs to be refreshed."
msgstr ""

#: of omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:8
msgid ""
"The buffer is useful for creating lazy buffers that only update the data "
"when it is outdated. This can be useful when the data is expensive to "
"compute or retrieve. For example usage, refer to the data classes in the "
":mod:`omni.isaac.lab.assets` module."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1:<autosummary>:1
msgid ":py:obj:`data <omni.isaac.lab.utils.buffers.TimestampedBuffer.data>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1:<autosummary>:1
msgid "The data stored in the buffer."
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1:<autosummary>:1
msgid ""
":py:obj:`timestamp "
"<omni.isaac.lab.utils.buffers.TimestampedBuffer.timestamp>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.buffers.timestamped_buffer.TimestampedBuffer:1:<autosummary>:1
msgid "Timestamp at the last update of the buffer."
msgstr ""

#: of omni.isaac.lab.utils.buffers.TimestampedBuffer.data:1:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<omni.isaac.lab.utils.buffers.TimestampedBuffer.__init__>`\\ "
"\\(\\[data\\, timestamp\\]\\)"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.buffers.TimestampedBuffer.data:1
msgid ""
"The data stored in the buffer. Default is None, indicating that the "
"buffer is empty."
msgstr ""

#: ../../docstring of
#: omni.isaac.lab.utils.buffers.TimestampedBuffer.timestamp:1
msgid ""
"Timestamp at the last update of the buffer. Default is -1.0, indicating "
"that the buffer has not been updated."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:68
msgid "Dictionary operations"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`class_to_dict <omni.isaac.lab.utils.dict.class_to_dict>`\\ "
"\\(obj\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1
#: omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid "Convert an object into dictionary recursively."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`update_class_from_dict "
"<omni.isaac.lab.utils.dict.update_class_from_dict>`\\ \\(obj\\, "
"data\\[\\, \\_ns\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.update_class_from_dict:1
msgid "Reads a dictionary and sets object variables recursively."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`dict_to_md5_hash <omni.isaac.lab.utils.dict.dict_to_md5_hash>`\\"
" \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.dict_to_md5_hash:1
msgid "Convert a dictionary into a hashable key using MD5 hash."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`convert_dict_to_backend "
"<omni.isaac.lab.utils.dict.convert_dict_to_backend>`\\ \\(data\\[\\, "
"backend\\, ...\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.convert_dict_to_backend:1
msgid "Convert all arrays or tensors in a dictionary to a given backend."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`update_dict <omni.isaac.lab.utils.dict.update_dict>`\\ "
"\\(orig\\_dict\\, new\\_dict\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.update_dict:1
msgid "Updates existing dictionary with values from a new dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`replace_slices_with_strings "
"<omni.isaac.lab.utils.dict.replace_slices_with_strings>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.replace_slices_with_strings:1
msgid "Replace slice objects with their string representations in a dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`replace_strings_with_slices "
"<omni.isaac.lab.utils.dict.replace_strings_with_slices>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.replace_strings_with_slices:1
msgid ""
"Replace string representations of slices with slice objects in a "
"dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
msgid ""
":py:obj:`print_dict <omni.isaac.lab.utils.dict.print_dict>`\\ "
"\\(val\\[\\, nesting\\, start\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:1:<autosummary>:1
#: omni.isaac.lab.utils.dict.print_dict:1
msgid "Outputs a nested dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:3
msgid "Ignores all names starting with \"__\" (i.e. built-in methods)."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:5
msgid "An instance of a class to convert."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:7
msgid "When input argument is not an object."
msgstr ""

#: of omni.isaac.lab.utils.dict.class_to_dict:9
msgid "Converted dictionary mapping."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:3
msgid "This function performs in-place update of the class member attributes."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:5
msgid "An instance of a class to update."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:6
msgid "Input dictionary to update from."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:7
msgid ""
"Namespace of the current object. This is useful for nested configuration "
"classes or dictionaries. Defaults to \"\"."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:10
msgid "When input is not a dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:11
msgid "When dictionary has a value that does not match default config type."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_class_from_dict:12
msgid "When dictionary has a key that does not exist in the default config type."
msgstr ""

#: of omni.isaac.lab.utils.dict.dict_to_md5_hash:3
msgid "Input dictionary or configuration object to convert."
msgstr ""

#: of omni.isaac.lab.utils.dict.dict_to_md5_hash:5
msgid "A string object of double length containing only hexadecimal digits."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:3
msgid ""
"This function iterates over the dictionary, converts all arrays or "
"tensors with the given types to the desired backend, and stores them in a"
" new dictionary. It also works with nested dictionaries."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:6
msgid "Currently supported backends are \"numpy\", \"torch\", and \"warp\"."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:10
msgid ""
"This function only converts arrays or tensors. Other types of data are "
"left unchanged. Mutable types (e.g. lists) are referenced by the new "
"dictionary, so they are not copied."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:13
msgid "An input dict containing array or tensor data as values."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:14
msgid ""
"The backend (\"numpy\", \"torch\", \"warp\") to which arrays in this dict"
" should be converted. Defaults to \"numpy\"."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:16
msgid ""
"A list containing the types of arrays that should be converted to the "
"desired backend. Defaults to (\"numpy\", \"torch\", \"warp\")."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:19
msgid ""
"If the specified ``backend`` or ``array_types`` are unknown, i.e. not in "
"the list of supported     backends (\"numpy\", \"torch\", \"warp\")."
msgstr ""

#: of omni.isaac.lab.utils.dict.convert_dict_to_backend:21
msgid "The updated dict with the data converted to the desired backend."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_dict:3
msgid ""
"This function mimics the dict.update() function. However, it works for "
"nested dictionaries as well."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_dict:6
msgid "The original dictionary to insert items to."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_dict:7
msgid "The new dictionary to insert items from."
msgstr ""

#: of omni.isaac.lab.utils.dict.update_dict:9
msgid "The updated dictionary."
msgstr ""

#: of omni.isaac.lab.utils.dict.replace_slices_with_strings:3
#: omni.isaac.lab.utils.dict.replace_strings_with_slices:3
msgid "The dictionary to process."
msgstr ""

#: of omni.isaac.lab.utils.dict.replace_slices_with_strings:5
msgid ""
"The dictionary with slice objects replaced by their string "
"representations."
msgstr ""

#: of omni.isaac.lab.utils.dict.replace_strings_with_slices:5
msgid ""
"The dictionary with string representations of slices replaced by slice "
"objects."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:75
msgid "Interpolation operations"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:1:<autosummary>:1
msgid ""
":py:obj:`LinearInterpolation "
"<omni.isaac.lab.utils.interpolation.LinearInterpolation>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:1:<autosummary>:1
msgid ""
"Linearly interpolates a sampled scalar function for arbitrary query "
"points."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:3
msgid ""
"This class implements a linear interpolation for a scalar function. The "
"function maps from real values, x, to real values, y. It expects a set of"
" samples from the function's domain, x, and the corresponding values, y. "
"The class allows querying the function's values at any arbitrary point."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation:7
msgid ""
"The interpolation is done by finding the two closest points in x to the "
"query point and then linearly interpolating between the corresponding y "
"values. For the query points that are outside the input points, the class"
" does a zero-order-hold extrapolation based on the boundary values. This "
"means that the class returns the value of the closest point in x."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:1:<autosummary>:1
msgid ""
":py:obj:`__init__ "
"<omni.isaac.lab.utils.interpolation.LinearInterpolation.__init__>`\\ "
"\\(x\\, y\\, device\\)"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:1:<autosummary>:1
msgid "Initializes the linear interpolation."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:1:<autosummary>:1
msgid ""
":py:obj:`compute "
"<omni.isaac.lab.utils.interpolation.LinearInterpolation.compute>`\\ "
"\\(q\\)"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:1:<autosummary>:1
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.compute:1
msgid "Calculates a linearly interpolated values for the query points."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:3
msgid ""
"The scalar function maps from real values, x, to real values, y. The "
"input to the class is a set of samples from the function's domain, x, and"
" the corresponding values, y."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:6
msgid "The input tensor x should be sorted in ascending order."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:8
msgid ""
"An vector of samples from the function's domain. The values should be "
"sorted in ascending order. Shape is (num_samples,)"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:10
msgid "The function's values associated to the input x. Shape is (num_samples,)"
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:13
msgid "If the input tensors are empty or have different sizes."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.__init__:14
msgid "If the input tensor x is not sorted in ascending order."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.compute:3
msgid "The query points. It can have any arbitrary shape."
msgstr ""

#: of
#: omni.isaac.lab.utils.interpolation.linear_interpolation.LinearInterpolation.compute:5
msgid ""
"The interpolated values at query points. It has the same shape as the "
"input tensor."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:84
msgid "Math operations"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`scale_transform <omni.isaac.lab.utils.math.scale_transform>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Normalizes a given input tensor to a range of [-1, 1]."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`unscale_transform "
"<omni.isaac.lab.utils.math.unscale_transform>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.unscale_transform:1
msgid ""
"De-normalizes a given input tensor from range of [-1, 1] to (lower, "
"upper)."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`saturate <omni.isaac.lab.utils.math.saturate>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.saturate:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Clamps a given input tensor to (lower, upper)."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`normalize <omni.isaac.lab.utils.math.normalize>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.normalize:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Normalizes a given input tensor to unit length."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`wrap_to_pi <omni.isaac.lab.utils.math.wrap_to_pi>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.wrap_to_pi:1
msgid "Wraps input angles (in radians) to the range :math:`[-\\pi, \\pi]`."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`copysign <omni.isaac.lab.utils.math.copysign>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.copysign:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Create a new floating-point tensor with the magnitude of input and the "
"sign of other, element-wise."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`matrix_from_quat <omni.isaac.lab.utils.math.matrix_from_quat>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_quat:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as quaternions to rotation matrices."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`convert_quat <omni.isaac.lab.utils.math.convert_quat>`\\ "
"\\(quat\\[\\, to\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Converts quaternion from one convention to another."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_conjugate <omni.isaac.lab.utils.math.quat_conjugate>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_conjugate:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Computes the conjugate of a quaternion."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_inv <omni.isaac.lab.utils.math.quat_inv>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_inv:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Compute the inverse of a quaternion."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`quat_from_euler_xyz "
"<omni.isaac.lab.utils.math.quat_from_euler_xyz>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_euler_xyz:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as Euler angles in radians to Quaternions."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_from_matrix <omni.isaac.lab.utils.math.quat_from_matrix>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_matrix:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as rotation matrices to quaternions."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`matrix_from_euler "
"<omni.isaac.lab.utils.math.matrix_from_euler>`\\ \\(euler\\_angles\\, "
"convention\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_euler:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as Euler angles in radians to rotation matrices."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`euler_xyz_from_quat "
"<omni.isaac.lab.utils.math.euler_xyz_from_quat>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.euler_xyz_from_quat:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as quaternions to Euler angles in radians."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_unique <omni.isaac.lab.utils.math.quat_unique>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_unique:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Convert a unit quaternion to a standard form where the real part is non-"
"negative."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_mul <omni.isaac.lab.utils.math.quat_mul>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_mul:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Multiply two quaternions together."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_box_minus <omni.isaac.lab.utils.math.quat_box_minus>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_box_minus:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "The box-minus operator (quaternion difference) between two quaternions."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`yaw_quat <omni.isaac.lab.utils.math.yaw_quat>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.yaw_quat:1
msgid "Extract the yaw component of a quaternion."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_apply <omni.isaac.lab.utils.math.quat_apply>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Apply a quaternion rotation to a vector."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_apply_yaw <omni.isaac.lab.utils.math.quat_apply_yaw>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply_yaw:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Rotate a vector only around the yaw-direction."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`quat_rotate <omni.isaac.lab.utils.math.quat_rotate>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_rotate:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Rotate a vector by a quaternion along the last dimension of q and v."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`quat_rotate_inverse "
"<omni.isaac.lab.utils.math.quat_rotate_inverse>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_rotate_inverse:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Rotate a vector by the inverse of a quaternion along the last dimension "
"of q and v."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`quat_from_angle_axis "
"<omni.isaac.lab.utils.math.quat_from_angle_axis>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_angle_axis:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as angle-axis to quaternions."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`axis_angle_from_quat "
"<omni.isaac.lab.utils.math.axis_angle_from_quat>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Convert rotations given as quaternions to axis/angle."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`quat_error_magnitude "
"<omni.isaac.lab.utils.math.quat_error_magnitude>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_error_magnitude:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Computes the rotation difference between two quaternions."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`skew_symmetric_matrix "
"<omni.isaac.lab.utils.math.skew_symmetric_matrix>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.skew_symmetric_matrix:1
msgid "Computes the skew-symmetric matrix of a vector."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`is_identity_pose <omni.isaac.lab.utils.math.is_identity_pose>`\\"
" \\(pos\\, rot\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.is_identity_pose:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Checks if input poses are identity transforms."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`combine_frame_transforms "
"<omni.isaac.lab.utils.math.combine_frame_transforms>`\\ \\(t01\\, "
"q01\\[\\, t12\\, q12\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Combine transformations between two reference frames into a stationary "
"frame."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`subtract_frame_transforms "
"<omni.isaac.lab.utils.math.subtract_frame_transforms>`\\ \\(t01\\, "
"q01\\[\\, t02\\, q02\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.subtract_frame_transforms:1
msgid ""
"Subtract transformations between two reference frames into a stationary "
"frame."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`compute_pose_error "
"<omni.isaac.lab.utils.math.compute_pose_error>`\\ \\(t01\\, q01\\, t02\\,"
" q02\\[\\, ...\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Compute the position and orientation error between source and target "
"frames."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`apply_delta_pose <omni.isaac.lab.utils.math.apply_delta_pose>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Applies delta pose transformation on source pose."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`transform_points <omni.isaac.lab.utils.math.transform_points>`\\"
" \\(points\\[\\, pos\\, quat\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.transform_points:1
msgid "Transform input points in a given frame to a target frame."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`orthogonalize_perspective_depth "
"<omni.isaac.lab.utils.math.orthogonalize_perspective_depth>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Converts perspective depth image to orthogonal depth image."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`unproject_depth <omni.isaac.lab.utils.math.unproject_depth>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
#: omni.isaac.lab.utils.math.unproject_depth:1
msgid "Un-project depth image into a pointcloud."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ":py:obj:`project_points <omni.isaac.lab.utils.math.project_points>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Projects 3D points into 2D image plane."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`default_orientation "
"<omni.isaac.lab.utils.math.default_orientation>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.default_orientation:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Returns identity rotation transform."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`random_orientation "
"<omni.isaac.lab.utils.math.random_orientation>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.random_orientation:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Returns sampled rotation in 3D as quaternion."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`random_yaw_orientation "
"<omni.isaac.lab.utils.math.random_yaw_orientation>`\\"
msgstr ""

#: of omni.isaac.lab.utils.math.random_yaw_orientation:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Returns sampled rotation around z-axis."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`sample_triangle <omni.isaac.lab.utils.math.sample_triangle>`\\ "
"\\(lower\\, upper\\, size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_triangle:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Randomly samples tensor from a triangular distribution."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`sample_uniform <omni.isaac.lab.utils.math.sample_uniform>`\\ "
"\\(lower\\, upper\\, size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_uniform:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Sample uniformly within a range."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`sample_log_uniform "
"<omni.isaac.lab.utils.math.sample_log_uniform>`\\ \\(lower\\, upper\\, "
"size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Sample using log-uniform distribution within a range."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`sample_gaussian <omni.isaac.lab.utils.math.sample_gaussian>`\\ "
"\\(mean\\, std\\, size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_gaussian:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Sample using gaussian distribution."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`sample_cylinder <omni.isaac.lab.utils.math.sample_cylinder>`\\ "
"\\(radius\\, h\\_range\\, size\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Sample 3D points uniformly on a cylinder's surface."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`convert_camera_frame_orientation_convention "
"<omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention>`\\"
" \\(...\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
"Converts a quaternion representing a rotation from one convention to "
"another."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid ""
":py:obj:`create_rotation_matrix_from_view "
"<omni.isaac.lab.utils.math.create_rotation_matrix_from_view>`\\ "
"\\(eyes\\, targets\\)"
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:1
#: omni.isaac.lab.utils.math.scale_transform:1:<autosummary>:1
msgid "Compute the rotation matrix from world to view coordinates."
msgstr ""

#: of omni.isaac.lab.utils.math.saturate:3
#: omni.isaac.lab.utils.math.scale_transform:4
#: omni.isaac.lab.utils.math.unscale_transform:4
msgid "It uses pytorch broadcasting functionality to deal with batched input."
msgstr ""

#: of omni.isaac.lab.utils.math.normalize:3
#: omni.isaac.lab.utils.math.saturate:5
#: omni.isaac.lab.utils.math.scale_transform:6
#: omni.isaac.lab.utils.math.unscale_transform:6
msgid "Input tensor of shape (N, dims)."
msgstr ""

#: of omni.isaac.lab.utils.math.saturate:6
#: omni.isaac.lab.utils.math.scale_transform:7
#: omni.isaac.lab.utils.math.unscale_transform:7
msgid "The minimum value of the tensor. Shape is (N, dims) or (dims,)."
msgstr ""

#: of omni.isaac.lab.utils.math.saturate:7
#: omni.isaac.lab.utils.math.scale_transform:8
#: omni.isaac.lab.utils.math.unscale_transform:8
msgid "The maximum value of the tensor. Shape is (N, dims) or (dims,)."
msgstr ""

#: of omni.isaac.lab.utils.math.scale_transform:10
msgid "Normalized transform of the tensor. Shape is (N, dims)."
msgstr ""

#: of omni.isaac.lab.utils.math.unscale_transform:10
msgid "De-normalized transform of the tensor. Shape is (N, dims)."
msgstr ""

#: of omni.isaac.lab.utils.math.saturate:9
msgid "Clamped transform of the tensor. Shape is (N, dims)."
msgstr ""

#: of omni.isaac.lab.utils.math.normalize:4
msgid "A small value to avoid division by zero. Defaults to 1e-9."
msgstr ""

#: of omni.isaac.lab.utils.math.normalize:6
msgid "Normalized tensor of shape (N, dims)."
msgstr ""

#: of omni.isaac.lab.utils.math.wrap_to_pi:3
msgid ""
"This function wraps angles in radians to the range :math:`[-\\pi, \\pi]`,"
" such that :math:`\\pi` maps to :math:`\\pi`, and :math:`-\\pi` maps to "
":math:`-\\pi`. In general, odd positive multiples of :math:`\\pi` are "
"mapped to :math:`\\pi`, and odd negative multiples of :math:`\\pi` are "
"mapped to :math:`-\\pi`."
msgstr ""

#: of omni.isaac.lab.utils.math.wrap_to_pi:8
msgid ""
"The function behaves similar to MATLAB's `wrapToPi "
"<https://www.mathworks.com/help/map/ref/wraptopi.html>`_ function."
msgstr ""

#: of omni.isaac.lab.utils.math.wrap_to_pi:11
msgid "Input angles of any shape."
msgstr ""

#: of omni.isaac.lab.utils.math.wrap_to_pi:13
msgid "Angles in the range :math:`[-\\pi, \\pi]`."
msgstr ""

#: of omni.isaac.lab.utils.math.copysign:3
msgid ""
"The implementation follows from `torch.copysign`. The function allows a "
"scalar magnitude."
msgstr ""

#: of omni.isaac.lab.utils.math.copysign:5
msgid "The magnitude scalar."
msgstr ""

#: of omni.isaac.lab.utils.math.copysign:6
msgid "The tensor containing values whose signbits are applied to magnitude."
msgstr ""

#: of omni.isaac.lab.utils.math.copysign:8
msgid "The output tensor."
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:3
#: omni.isaac.lab.utils.math.matrix_from_quat:3
#: omni.isaac.lab.utils.math.quat_conjugate:3
#: omni.isaac.lab.utils.math.quat_unique:6
msgid "The quaternion orientation in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_quat:5
msgid "Rotation matrices. The shape is (..., 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:9
#: omni.isaac.lab.utils.math.euler_xyz_from_quat:9
#: omni.isaac.lab.utils.math.matrix_from_euler:10
#: omni.isaac.lab.utils.math.matrix_from_quat:7
#: omni.isaac.lab.utils.math.quat_from_matrix:7
#: omni.isaac.lab.utils.math.random_orientation:8
msgid "Reference:"
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_quat:8
msgid "https://github.com/facebookresearch/pytorch3d/blob/main/pytorch3d/transforms/rotation_conversions.py#L41-L70"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:3
msgid ""
"The convention to convert TO is specified as an optional argument. If to "
"== 'xyzw', then the input is in 'wxyz' format, and vice-versa."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:6
msgid "The quaternion of shape (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:7
msgid "Convention to convert quaternion to.. Defaults to \"xyzw\"."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:9
msgid "The converted quaternion in specified convention."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:11
msgid "Invalid input argument `to`, i.e. not \"xyzw\" or \"wxyz\"."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_quat:12
msgid "Invalid shape of input `quat`, i.e. not (..., 4,)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_conjugate:5
msgid "The conjugate quaternion in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.euler_xyz_from_quat:5
#: omni.isaac.lab.utils.math.quat_inv:3
msgid "The quaternion orientation in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_inv:5
msgid "The inverse quaternion in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.euler_xyz_from_quat:3
#: omni.isaac.lab.utils.math.quat_from_euler_xyz:3
msgid "The euler angles are assumed in XYZ convention."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_euler_xyz:5
msgid "Rotation around x-axis (in radians). Shape is (N,)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_euler_xyz:6
msgid "Rotation around y-axis (in radians). Shape is (N,)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_euler_xyz:7
msgid "Rotation around z-axis (in radians). Shape is (N,)."
msgstr ""

#: of omni.isaac.lab.utils.math.is_identity_pose:7
#: omni.isaac.lab.utils.math.quat_from_angle_axis:6
#: omni.isaac.lab.utils.math.quat_from_euler_xyz:9
msgid "The quaternion in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_matrix:3
msgid "The rotation matrices. Shape is (..., 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply:3
#: omni.isaac.lab.utils.math.quat_from_matrix:5
#: omni.isaac.lab.utils.math.quat_rotate:3
#: omni.isaac.lab.utils.math.quat_rotate_inverse:3
msgid "The quaternion in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_matrix:8
msgid "https://github.com/facebookresearch/pytorch3d/blob/main/pytorch3d/transforms/rotation_conversions.py#L102-L161"
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_euler:3
msgid "Euler angles in radians. Shape is (..., 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_euler:4
msgid ""
"Convention string of three uppercase letters from {\"X\", \"Y\", and "
"\"Z\"}. For example, \"XYZ\" means that the rotations should be applied "
"first about x, then y, then z."
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_euler:8
msgid "Rotation matrices. Shape is (..., 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.matrix_from_euler:11
msgid "https://github.com/facebookresearch/pytorch3d/blob/main/pytorch3d/transforms/rotation_conversions.py#L194-L220"
msgstr ""

#: of omni.isaac.lab.utils.math.euler_xyz_from_quat:7
msgid "A tuple containing roll-pitch-yaw. Each element is a tensor of shape (N,)."
msgstr ""

#: of omni.isaac.lab.utils.math.euler_xyz_from_quat:10
msgid "https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_unique:3
msgid ""
"Quaternion representations have a singularity since ``q`` and ``-q`` "
"represent the same rotation. This function ensures the real part of the "
"quaternion is non-negative."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_unique:8
msgid "Standardized quaternions. Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_error_magnitude:3
#: omni.isaac.lab.utils.math.quat_mul:3
msgid "The first quaternion in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_error_magnitude:4
#: omni.isaac.lab.utils.math.quat_mul:4
msgid "The second quaternion in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_mul:6
msgid "The product of the two quaternions in (w, x, y, z). Shape is (..., 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_mul:8
msgid "Input shapes of ``q1`` and ``q2`` are not matching."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_box_minus:3
msgid "The first quaternion in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_box_minus:4
msgid "The second quaternion in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_box_minus:6
msgid "The difference between the two quaternions. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.yaw_quat:3
msgid "The orientation in (w, x, y, z). Shape is (..., 4)"
msgstr ""

#: of omni.isaac.lab.utils.math.yaw_quat:5
msgid "A quaternion with only yaw component."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply:4
#: omni.isaac.lab.utils.math.quat_rotate:4
#: omni.isaac.lab.utils.math.quat_rotate_inverse:4
msgid "The vector in (x, y, z). Shape is (..., 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply:6
#: omni.isaac.lab.utils.math.quat_rotate:6
#: omni.isaac.lab.utils.math.quat_rotate_inverse:6
msgid "The rotated vector in (x, y, z). Shape is (..., 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply_yaw:3
msgid "The orientation in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply_yaw:4
msgid "The vector in (x, y, z). Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_apply_yaw:6
msgid "The rotated vector in (x, y, z). Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_angle_axis:3
msgid ""
"The angle turned anti-clockwise in radians around the vector's direction."
" Shape is (N,)."
msgstr ""

#: of omni.isaac.lab.utils.math.quat_from_angle_axis:4
msgid "The axis of rotation. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:4
msgid "The tolerance for Taylor approximation. Defaults to 1.0e-6."
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:6
msgid ""
"Rotations given as a vector in axis angle form. Shape is (..., 3). The "
"vector's magnitude is the angle turned anti-clockwise in radians around "
"the vector's direction."
msgstr ""

#: of omni.isaac.lab.utils.math.axis_angle_from_quat:10
msgid "https://github.com/facebookresearch/pytorch3d/blob/main/pytorch3d/transforms/rotation_conversions.py#L526-L554"
msgstr ""

#: of omni.isaac.lab.utils.math.quat_error_magnitude:6
msgid "Angular error between input quaternions in radians."
msgstr ""

#: of omni.isaac.lab.utils.math.skew_symmetric_matrix:3
msgid "The input vector. Shape is (3,) or (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.skew_symmetric_matrix:5
msgid "The skew-symmetric matrix. Shape is (1, 3, 3) or (N, 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.skew_symmetric_matrix:7
msgid "If input tensor is not of shape (..., 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.is_identity_pose:3
msgid ""
"The function checks if the input position and orientation are close to "
"zero and identity respectively using L2-norm. It does NOT check the error"
" in the orientation."
msgstr ""

#: of omni.isaac.lab.utils.math.is_identity_pose:6
msgid "The cartesian position. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.is_identity_pose:9
msgid ""
"True if all the input poses result in identity transform. Otherwise, "
"False."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:3
msgid ""
"It performs the following transformation operation: :math:`T_{02} = "
"T_{01} \\times T_{12}`, where :math:`T_{AB}` is the homogeneous "
"transformation matrix from frame A to B."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:6
#: omni.isaac.lab.utils.math.subtract_frame_transforms:6
msgid "Position of frame 1 w.r.t. frame 0. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:7
#: omni.isaac.lab.utils.math.subtract_frame_transforms:7
msgid ""
"Quaternion orientation of frame 1 w.r.t. frame 0 in (w, x, y, z). Shape "
"is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:8
msgid ""
"Position of frame 2 w.r.t. frame 1. Shape is (N, 3). Defaults to None, in"
" which case the position is assumed to be zero."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:10
msgid ""
"Quaternion orientation of frame 2 w.r.t. frame 1 in (w, x, y, z). Shape "
"is (N, 4). Defaults to None, in which case the orientation is assumed to "
"be identity."
msgstr ""

#: of omni.isaac.lab.utils.math.combine_frame_transforms:13
msgid ""
"A tuple containing the position and orientation of frame 2 w.r.t. frame "
"0. Shape of the tensors are (N, 3) and (N, 4) respectively."
msgstr ""

#: of omni.isaac.lab.utils.math.subtract_frame_transforms:3
msgid ""
"It performs the following transformation operation: :math:`T_{12} = "
"T_{01}^{-1} \\times T_{02}`, where :math:`T_{AB}` is the homogeneous "
"transformation matrix from frame A to B."
msgstr ""

#: of omni.isaac.lab.utils.math.subtract_frame_transforms:8
msgid ""
"Position of frame 2 w.r.t. frame 0. Shape is (N, 3). Defaults to None, in"
" which case the position is assumed to be zero."
msgstr ""

#: of omni.isaac.lab.utils.math.subtract_frame_transforms:10
msgid ""
"Quaternion orientation of frame 2 w.r.t. frame 0 in (w, x, y, z). Shape "
"is (N, 4). Defaults to None, in which case the orientation is assumed to "
"be identity."
msgstr ""

#: of omni.isaac.lab.utils.math.subtract_frame_transforms:13
msgid ""
"A tuple containing the position and orientation of frame 2 w.r.t. frame "
"1. Shape of the tensors are (N, 3) and (N, 4) respectively."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:7
#: omni.isaac.lab.utils.math.compute_pose_error:3
msgid "Position of source frame. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:4
msgid "Quaternion orientation of source frame in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:5
msgid "Position of target frame. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:6
msgid "Quaternion orientation of target frame in (w, x, y, z). Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:7
msgid ""
"The rotation error type to return: \"quat\", \"axis_angle\". Defaults to "
"\"axis_angle\"."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:10
msgid ""
"A tuple containing position and orientation error. Shape of position "
"error is (N, 3). Shape of orientation error depends on the value of "
":attr:`rot_error_type`:  - If :attr:`rot_error_type` is \"quat\", the "
"orientation error is returned   as a quaternion. Shape is (N, 4). - If "
":attr:`rot_error_type` is \"axis_angle\", the orientation error is   "
"returned as an axis-angle vector. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:10
msgid ""
"A tuple containing position and orientation error. Shape of position "
"error is (N, 3). Shape of orientation error depends on the value of "
":attr:`rot_error_type`:"
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:13
msgid ""
"If :attr:`rot_error_type` is \"quat\", the orientation error is returned "
"as a quaternion. Shape is (N, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:15
msgid ""
"If :attr:`rot_error_type` is \"axis_angle\", the orientation error is "
"returned as an axis-angle vector. Shape is (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.compute_pose_error:18
msgid "Invalid rotation error type."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:3
msgid ""
"The first three elements of `delta_pose` are interpreted as cartesian "
"position displacement. The remaining three elements of `delta_pose` are "
"interpreted as orientation displacement in the angle-axis format."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:8
msgid "Quaternion orientation of source frame in (w, x, y, z). Shape is (N, 4).."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:9
msgid "Position and orientation displacements. Shape is (N, 6)."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:10
msgid ""
"The tolerance to consider orientation displacement as zero. Defaults to "
"1.0e-6."
msgstr ""

#: of omni.isaac.lab.utils.math.apply_delta_pose:12
msgid ""
"A tuple containing the displaced position and orientation frames. Shape "
"of the tensors are (N, 3) and (N, 4) respectively."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:3
msgid ""
"This function transform points from a source frame to a target frame. The"
" transformation is defined by the position :math:`t` and orientation "
":math:`R` of the target frame in the source frame."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:6
msgid ""
"p_{target} = R_{target} \\times p_{source} + t_{target}\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:9
msgid ""
"If the input `points` is a batch of points, the inputs `pos` and `quat` "
"must be either a batch of positions and quaternions or a single position "
"and quaternion. If the inputs `pos` and `quat` are a single position and "
"quaternion, the same transformation is applied to all points in the "
"batch."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:13
msgid ""
"If either the inputs :attr:`pos` and :attr:`quat` are None, the "
"corresponding transformation is not applied."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:15
msgid "Points to transform. Shape is (N, P, 3) or (P, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:16
msgid ""
"Position of the target frame. Shape is (N, 3) or (3,). Defaults to None, "
"in which case the position is assumed to be zero."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:18
msgid ""
"Quaternion orientation of the target frame in (w, x, y, z). Shape is (N, "
"4) or (4,). Defaults to None, in which case the orientation is assumed to"
" be identity."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:21
msgid "Transformed points in the target frame. Shape is (N, P, 3) or (P, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:23
msgid "If the inputs `points` is not of shape (N, P, 3) or (P, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:24
msgid "If the inputs `pos` is not of shape (N, 3) or (3,)."
msgstr ""

#: of omni.isaac.lab.utils.math.transform_points:25
msgid "If the inputs `quat` is not of shape (N, 4) or (4,)."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:3
msgid ""
"Perspective depth images contain distances measured from the camera's "
"optical center. Meanwhile, orthogonal depth images provide the distance "
"from the camera's image plane. This method uses the camera geometry to "
"convert perspective depth to orthogonal depth image."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:7
msgid "The function assumes that the width and height are both greater than 1."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:9
msgid ""
"The perspective depth images. Shape is (H, W) or or (H, W, 1) or (N, H, "
"W) or (N, H, W, 1)."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:10
#: omni.isaac.lab.utils.math.unproject_depth:20
msgid ""
"The camera's calibration matrix. If a single matrix is provided, the same"
" calibration matrix is used across all the depth images in the batch. "
"Shape is (3, 3) or (N, 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:14
msgid ""
"The orthogonal depth images. Shape matches the input shape of depth "
"images."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:16
#: omni.isaac.lab.utils.math.unproject_depth:30
msgid ""
"When depth is not of shape (H, W) or (H, W, 1) or (N, H, W) or (N, H, W, "
"1)."
msgstr ""

#: of omni.isaac.lab.utils.math.orthogonalize_perspective_depth:17
#: omni.isaac.lab.utils.math.unproject_depth:31
msgid "When intrinsics is not of shape (3, 3) or (N, 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:3
msgid ""
"This function converts orthogonal or perspective depth images into points"
" given the calibration matrix of the camera. It uses the following "
"transformation based on camera geometry:"
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:6
msgid ""
"p_{3D} = K^{-1} \\times [u, v, 1]^T \\times d\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:9
msgid ""
"where :math:`p_{3D}` is the 3D point, :math:`d` is the depth value "
"(measured from the image plane), :math:`u` and :math:`v` are the pixel "
"coordinates and :math:`K` is the intrinsic matrix."
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:12
msgid ""
"The function assumes that the width and height are both greater than 1. "
"This makes the function deal with many possible shapes of depth images "
"and intrinsics matrices."
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:16
msgid ""
"If :attr:`is_ortho` is False, the input depth images are transformed to "
"orthogonal depth images by using the "
":meth:`orthogonalize_perspective_depth` method."
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:19
msgid ""
"The depth measurement. Shape is (H, W) or or (H, W, 1) or (N, H, W) or "
"(N, H, W, 1)."
msgstr ""

#: of omni.isaac.lab.utils.math.unproject_depth:23
msgid ""
"Whether the input depth image is orthogonal or perspective depth image. "
"If True, the input depth image is considered as the *orthogonal* type, "
"where the measurements are from the camera's image plane. If False, the "
"depth image is considered as the *perspective* type, where the "
"measurements are from the camera's optical center. Defaults to True."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:20
#: omni.isaac.lab.utils.math.unproject_depth:28
msgid "The 3D coordinates of points. Shape is (P, 3) or (N, P, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:3
msgid ""
"This project 3D points into a 2D image plane. The transformation is "
"defined by the intrinsic matrix of the camera."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:6
msgid ""
"\\begin{align}\n"
"    p &= K \\times p_{3D}  = \\\\\n"
"    p_{2D} &= \\begin{pmatrix} u \\\\ v \\\\  d \\end{pmatrix}\n"
"            = \\begin{pmatrix} p[0] / p[2] \\\\  p[1] / p[2] \\\\ Z "
"\\end{pmatrix}\n"
"\\end{align}"
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:14
msgid ""
"where :math:`p_{2D} = (u, v, d)` is the projected 3D point, :math:`p_{3D}"
" = (X, Y, Z)` is the 3D point and :math:`K \\in \\mathbb{R}^{3 \\times "
"3}` is the intrinsic matrix."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:17
msgid ""
"If `points` is a batch of 3D points and `intrinsics` is a single "
"intrinsic matrix, the same calibration matrix is applied to all points in"
" the batch."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:21
msgid "Camera's calibration matrix. Shape is (3, 3) or (N, 3, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.project_points:23
msgid "Projected 3D coordinates of points. Shape is (P, 3) or (N, P, 3)."
msgstr ""

#: of omni.isaac.lab.utils.math.default_orientation:3
#: omni.isaac.lab.utils.math.random_orientation:3
#: omni.isaac.lab.utils.math.random_yaw_orientation:3
msgid "The number of rotations to sample."
msgstr ""

#: of omni.isaac.lab.utils.math.default_orientation:4
#: omni.isaac.lab.utils.math.random_orientation:4
#: omni.isaac.lab.utils.math.random_yaw_orientation:4
#: omni.isaac.lab.utils.math.sample_cylinder:12
#: omni.isaac.lab.utils.math.sample_gaussian:6
#: omni.isaac.lab.utils.math.sample_log_uniform:14
#: omni.isaac.lab.utils.math.sample_triangle:6
#: omni.isaac.lab.utils.math.sample_uniform:6
msgid "Device to create tensor on."
msgstr ""

#: of omni.isaac.lab.utils.math.default_orientation:6
msgid "Identity quaternion in (w, x, y, z). Shape is (num, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.random_orientation:6
#: omni.isaac.lab.utils.math.random_yaw_orientation:6
msgid "Sampled quaternion in (w, x, y, z). Shape is (num, 4)."
msgstr ""

#: of omni.isaac.lab.utils.math.random_orientation:9
msgid "https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.random.html"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_triangle:3
msgid "The lower range of the sampled tensor."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_triangle:4
msgid "The upper range of the sampled tensor."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:11
#: omni.isaac.lab.utils.math.sample_gaussian:5
#: omni.isaac.lab.utils.math.sample_log_uniform:13
#: omni.isaac.lab.utils.math.sample_triangle:5
#: omni.isaac.lab.utils.math.sample_uniform:5
msgid "The shape of the tensor."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:16
#: omni.isaac.lab.utils.math.sample_triangle:8
#: omni.isaac.lab.utils.math.sample_uniform:8
msgid "Sampled tensor. Shape is based on :attr:`size`."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:11
#: omni.isaac.lab.utils.math.sample_uniform:3
msgid "Lower bound of uniform range."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:12
#: omni.isaac.lab.utils.math.sample_uniform:4
msgid "Upper bound of uniform range."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:3
msgid ""
"The log-uniform distribution is defined as a uniform distribution in the "
"log-space. It is useful for sampling values that span several orders of "
"magnitude. The sampled values are uniformly distributed in the log-space "
"and then exponentiated to get the final values."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_log_uniform:7
msgid "x = \\exp(\\text{uniform}(\\log(\\text{lower}), \\log(\\text{upper})))"
msgstr ""

#: of omni.isaac.lab.utils.math.sample_gaussian:3
msgid "Mean of the gaussian."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_gaussian:4
msgid "Std of the gaussian."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_gaussian:8
msgid "Sampled tensor."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:3
msgid ""
"The cylinder is centered at the origin and aligned with the z-axis. The "
"height of the cylinder is sampled uniformly from the range "
":obj:`h_range`, while the radius is fixed to :obj:`radius`."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:6
msgid ""
"The sampled points are returned as a tensor of shape :obj:`(*size, 3)`, "
"i.e. the last dimension contains the x, y, and z coordinates of the "
"sampled points."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:9
msgid "The radius of the cylinder."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:10
msgid "The minimum and maximum height of the cylinder."
msgstr ""

#: of omni.isaac.lab.utils.math.sample_cylinder:14
msgid "Sampled tensor. Shape is :obj:`(*size, 3)`."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:3
msgid ""
"In USD, the camera follows the ``\"opengl\"`` convention. Thus, it is "
"always in **Y up** convention. This means that the camera is looking down"
" the -Z axis with the +Y axis pointing up , and +X axis pointing right. "
"However, in ROS, the camera is looking down the +Z axis with the +Y axis "
"pointing down, and +X axis pointing right. Thus, the camera needs to be "
"rotated by :math:`180^{\\circ}` around the X axis to follow the ROS "
"convention."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:8
msgid ""
"T_{ROS} = \\begin{bmatrix} 1 & 0 & 0 & 0 \\\\ 0 & -1 & 0 & 0 \\\\ 0 & 0 &"
" -1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} T_{USD}"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:12
msgid ""
"On the other hand, the typical world coordinate system is with +X "
"pointing forward, +Y pointing left, and +Z pointing up. The camera can "
"also be set in this convention by rotating the camera by "
":math:`90^{\\circ}` around the X axis and :math:`-90^{\\circ}` around the"
" Y axis."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:16
msgid ""
"T_{WORLD} = \\begin{bmatrix} 0 & 0 & -1 & 0 \\\\ -1 & 0 & 0 & 0 \\\\ 0 & "
"1 & 0 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} T_{USD}"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:20
msgid ""
"Thus, based on their application, cameras follow different conventions "
"for their orientation. This function converts a quaternion from one "
"convention to another."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:23
msgid "Possible conventions are:"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:25
msgid ""
":obj:`\"opengl\"` - forward axis: -Z - up axis +Y - Offset is applied in "
"the OpenGL (Usd.Camera) convention"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:26
msgid ""
":obj:`\"ros\"`    - forward axis: +Z - up axis -Y - Offset is applied in "
"the ROS convention"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:27
msgid ""
":obj:`\"world\"`  - forward axis: +X - up axis +Z - Offset is applied in "
"the World Frame convention"
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:29
msgid ""
"Quaternion of form `(w, x, y, z)` with shape (..., 4) in source "
"convention."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:30
msgid "Convention to convert from. Defaults to \"opengl\"."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:31
msgid "Convention to convert to. Defaults to \"ros\"."
msgstr ""

#: of omni.isaac.lab.utils.math.convert_camera_frame_orientation_convention:33
msgid "Quaternion of form `(w, x, y, z)` with shape (..., 4) in target convention"
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:3
msgid ""
"This function takes a vector ''eyes'' which specifies the location of the"
" camera in world coordinates and the vector ''targets'' which indicate "
"the position of the object. The output is a rotation matrix representing "
"the transformation from world coordinates -> view coordinates."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:9
msgid ""
"The inputs eyes and targets can each be a - 3 element tuple/list - torch "
"tensor of shape (1, 3) - torch tensor of shape (N, 3)"
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:14
msgid "Position of the camera in world coordinates."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:15
msgid "Position of the object in world coordinates."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:16
msgid "The up axis of the camera. Defaults to \"Z\"."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:17
msgid "The device to create torch tensors on. Defaults to \"cpu\"."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:19
msgid ""
"The vectors are broadcast against each other so they all have shape (N, "
"3)."
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:21
msgid "(N, 3, 3) batched rotation matrices"
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view
#: omni.isaac.lab.utils.string.string_to_callable
msgid "Return type"
msgstr ""

#: of omni.isaac.lab.utils.math.create_rotation_matrix_from_view:24
msgid ""
"Reference: Based on PyTorch3D "
"(https://github.com/facebookresearch/pytorch3d/blob/eaf0709d6af0025fe94d1ee7cec454bc3054826a/pytorch3d/renderer/cameras.py#L1635-L1685)"
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:92
msgid "Modifier operations"
msgstr ""

#: of omni.isaac.lab.utils.modifiers:3
msgid ""
"Modifiers are used to apply stateful or stateless modifications to tensor"
" data. They take in a tensor and a configuration and return a tensor with"
" the modification applied. This way users can define custom operations to"
" apply to a tensor. For instance, a modifier can be used to normalize the"
" input data or to apply a rolling average."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:8
msgid ""
"They are primarily used to apply custom operations in the "
":class:`~omni.isaac.lab.managers.ObservationManager` as an alternative to"
" the built-in noise, clip and scale post-processing operations. For more "
"details, see the :class:`~omni.isaac.lab.managers.ObservationTermCfg` "
"class."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:12
msgid "Usage with a function modifier:"
msgstr ""

#: of omni.isaac.lab.utils.modifiers:29
msgid "Usage with a class modifier:"
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ":py:obj:`ModifierCfg <omni.isaac.lab.utils.modifiers.ModifierCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid "Configuration parameters modifiers"
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ":py:obj:`ModifierBase <omni.isaac.lab.utils.modifiers.ModifierBase>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid "Base class for modifiers implemented as classes."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ":py:obj:`DigitalFilter <omni.isaac.lab.utils.modifiers.DigitalFilter>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid "Modifier used to apply digital filtering to the input data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ""
":py:obj:`DigitalFilterCfg "
"<omni.isaac.lab.utils.modifiers.DigitalFilterCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.DigitalFilterCfg:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid "Configuration parameters for a digital filter modifier."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ":py:obj:`Integrator <omni.isaac.lab.utils.modifiers.Integrator>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ""
"Modifier that applies a numerical forward integration based on a middle "
"Reimann sum."
msgstr ""

#: of omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid ":py:obj:`IntegratorCfg <omni.isaac.lab.utils.modifiers.IntegratorCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.IntegratorCfg:1
#: omni.isaac.lab.utils.modifiers:1:<autosummary>:1
msgid "Configuration parameters for an integrator modifier."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid ":py:obj:`bias <omni.isaac.lab.utils.modifiers.bias>`\\ \\(data\\, value\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.bias:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid "Adds a uniform bias to the data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid ""
":py:obj:`clip <omni.isaac.lab.utils.modifiers.clip>`\\ \\(data\\, "
"bounds\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.clip:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid "Clips the data to a minimum and maximum value."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid ""
":py:obj:`scale <omni.isaac.lab.utils.modifiers.scale>`\\ \\(data\\, "
"multiplier\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.scale:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg:1:<autosummary>:1
msgid "Scales input data by a multiplier."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.ModifierCfg.params:1:<autosummary>:1
msgid ":py:obj:`params <omni.isaac.lab.utils.modifiers.ModifierCfg.params>`\\"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.ModifierCfg.params:1:<autosummary>:1
msgid ""
"The parameters to be passed to the function or callable class as keyword "
"arguments."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.params:1
#: omni.isaac.lab.utils.modifiers.IntegratorCfg.params:1
#: omni.isaac.lab.utils.modifiers.ModifierCfg.params:1
msgid ""
"The parameters to be passed to the function or callable class as keyword "
"arguments. Defaults to an empty dictionary."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:1
msgid "Bases: :py:class:`~abc.ABC`"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:3
msgid ""
"Modifiers implementations can be functions or classes. If a modifier is a"
" class, it should inherit from this class and implement the required "
"methods."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:6
msgid ""
"A class implementation of a modifier can be used to store state "
"information between calls. This is useful for modifiers that require "
"stateful operations, such as rolling averages or delays or decaying "
"filters."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase:10
msgid "Example pseudo-code to create and use the class:"
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.modifiers.ModifierBase.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:1
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:1:<autosummary>:1
msgid "Resets the Modifier."
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:1:<autosummary>:1
msgid ""
":py:obj:`__call__ "
"<omni.isaac.lab.utils.modifiers.ModifierBase.__call__>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.__call__:1
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:1:<autosummary>:1
msgid "Abstract method for defining the modification function."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:3
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:3
#: omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.reset:3
msgid ""
"The environment ids. Defaults to None, in which case all environments are"
" considered."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.__call__:3
msgid ""
"The data to be modified. Shape should match the data_dim passed during "
"initialization."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase.__call__:5
msgid "Modified data. Shape is the same as the input data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:1
#: omni.isaac.lab.utils.modifiers.modifier.Integrator:1
msgid ""
"Bases: "
":py:class:`~omni.isaac.lab.utils.modifiers.modifier_base.ModifierBase`"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:3
msgid ""
"`Digital filters <https://en.wikipedia.org/wiki/Digital_filter>`_ are "
"used to process discrete-time signals to extract useful parts of the "
"signal, such as smoothing, noise reduction, or frequency separation."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:6
msgid ""
"The filter can be implemented as a linear difference equation in the time"
" domain. This equation can be used to calculate the output at each time-"
"step based on the current and previous inputs and outputs."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:9
msgid ""
"y_{i} = X B - Y A = \\sum_{j=0}^{N} b_j x_{i-j} - \\sum_{j=1}^{M} a_j "
"y_{i-j}\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:12
msgid ""
"where :math:`y_{i}` is the current output of the filter. The array "
":math:`Y` contains previous outputs from the filter "
":math:`\\{y_{i-j}\\}_{j=1}^M` for :math:`M` previous time-steps. The "
"array :math:`X` contains current :math:`x_{i}` and previous inputs to the"
" filter :math:`\\{x_{i-j}\\}_{j=1}^N` for :math:`N` previous time-steps "
"respectively. The filter coefficients :math:`A` and :math:`B` are used to"
" design the filter. They are column vectors of length :math:`M` and "
":math:`N + 1` respectively."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:19
msgid ""
"Different types of filters can be implemented by choosing different "
"values for :math:`A` and :math:`B`. We provide some examples below."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:23
msgid "Examples"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:24
msgid "**Unit Delay Filter**"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:26
msgid ""
"A filter that delays the input signal by a single time-step simply "
"outputs the previous input value."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:28
msgid ""
"y_{i} = x_{i-1}\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:30
msgid ""
"This can be implemented as a digital filter with the coefficients "
":math:`A = [0.0]` and :math:`B = [0.0, 1.0]`."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:32
msgid "**Moving Average Filter**"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:34
msgid ""
"A moving average filter is used to smooth out noise in a signal. It is "
"similar to a low-pass filter but has a finite impulse response (FIR) and "
"is non-recursive."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:37
msgid ""
"The filter calculates the average of the input signal over a window of "
"time-steps. The linear difference equation for a moving average filter "
"is:"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:40
msgid ""
"y_{i} = \\frac{1}{N} \\sum_{j=0}^{N} x_{i-j}\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:42
msgid ""
"This can be implemented as a digital filter with the coefficients "
":math:`A = [0.0]` and :math:`B = [1/N, 1/N, \\cdots, 1/N]`."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:45
msgid "**First-order recursive low-pass filter**"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:47
msgid ""
"A recursive low-pass filter is used to smooth out high-frequency noise in"
" a signal. It is a first-order infinite impulse response (IIR) filter "
"which means it has a recursive component (previous output) in the linear "
"difference equation."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:51
msgid "A first-order low-pass IIR filter has the difference equation:"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:53
msgid ""
"y_{i} = \\alpha y_{i-1} + (1-\\alpha)x_{i}\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:55
msgid ""
"where :math:`\\alpha` is a smoothing parameter between 0 and 1. "
"Typically, the value of :math:`\\alpha` is chosen based on the desired "
"cut-off frequency of the filter."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter:58
msgid ""
"This filter can be implemented as a digital filter with the coefficients "
":math:`A = [\\alpha]` and :math:`B = [1 - \\alpha]`."
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.modifiers.DigitalFilter.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:1
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:1:<autosummary>:1
msgid "Resets digital filter history."
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:1:<autosummary>:1
msgid ""
":py:obj:`__call__ "
"<omni.isaac.lab.utils.modifiers.DigitalFilter.__call__>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.__call__:1
#: omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.reset:1:<autosummary>:1
msgid ""
"Applies digital filter modification with a rolling history window inputs "
"and outputs."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.__call__:3
msgid "The data to apply filter to."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.DigitalFilter.__call__:5
msgid "Filtered data. Shape is the same as data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.DigitalFilterCfg:1
#: omni.isaac.lab.utils.modifiers.modifier_cfg.IntegratorCfg:1
msgid ""
"Bases: "
":py:class:`~omni.isaac.lab.utils.modifiers.modifier_cfg.ModifierCfg`"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.DigitalFilterCfg:3
msgid "For more information, please check the :class:`DigitalFilter` class."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:1:<autosummary>:1
msgid ":py:obj:`A <omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:1
#: omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:1:<autosummary>:1
msgid "The coefficients corresponding the the filter's response to past outputs."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:1:<autosummary>:1
msgid ":py:obj:`B <omni.isaac.lab.utils.modifiers.DigitalFilterCfg.B>`\\"
msgstr ""

#: ../../docstring of
#: omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:1:<autosummary>:1
#: omni.isaac.lab.utils.modifiers.DigitalFilterCfg.B:1
msgid ""
"The coefficients corresponding the the filter's response to current and "
"past inputs."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:3
msgid ""
"These correspond to the weights of the past outputs of the filter. The "
"first element is the coefficient for the output at the previous time "
"step, the second element is the coefficient for the output at two time "
"steps ago, and so on."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.A:7
msgid "It is the denominator coefficients of the transfer function of the filter."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.B:3
msgid ""
"These correspond to the weights of the current and past inputs of the "
"filter. The first element is the coefficient for the current input, the "
"second element is the coefficient for the input at the previous time "
"step, and so on."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.DigitalFilterCfg.B:7
msgid "It is the numerator coefficients of the transfer function of the filter."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:3
msgid ""
"An integrator is used to calculate the integral of a signal over time. "
"The integral of a signal is the area under the curve of the signal. The "
"integral can be approximated using numerical methods such as the `Riemann"
" sum <https://en.wikipedia.org/wiki/Riemann_sum>`_."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:7
msgid ""
"The middle Riemann sum is a method to approximate the integral of a "
"function by dividing the area under the curve into rectangles. The height"
" of each rectangle is the value of the function at the midpoint of the "
"interval. The area of each rectangle is the width of the interval "
"multiplied by the height of the rectangle."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:12
msgid ""
"This integral method is useful for signals that are sampled at regular "
"intervals. The integral can be written as:"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:15
msgid ""
"\\int_{t_0}^{t_n} f(t) dt & \\approx \\int_{t_0}^{t_{n-1}} f(t) dt + "
"\\frac{f(t_{n-1}) + f(t_n)}{2} \\Delta t\n"
"\n"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator:18
msgid ""
"where :math:`f(t)` is the signal to integrate, :math:`t_i` is the time at"
" the i-th sample, and :math:`\\Delta t` is the time step between samples."
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.modifiers.Integrator.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:1
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:1:<autosummary>:1
msgid "Resets integrator state to zero."
msgstr ""

#: of
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:1:<autosummary>:1
msgid ""
":py:obj:`__call__ <omni.isaac.lab.utils.modifiers.Integrator.__call__>`\\"
" \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator.__call__:1
#: omni.isaac.lab.utils.modifiers.modifier.Integrator.reset:1:<autosummary>:1
msgid "Applies integral modification to input data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator.__call__:3
msgid "The data to integrate."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.Integrator.__call__:5
msgid "Integral of input signal. Shape is the same as data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier_cfg.IntegratorCfg:3
msgid "For more information, please check the :class:`Integrator` class."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.IntegratorCfg.params:1:<autosummary>:1
msgid ":py:obj:`dt <omni.isaac.lab.utils.modifiers.IntegratorCfg.dt>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.modifiers.IntegratorCfg.dt:1
#: omni.isaac.lab.utils.modifiers.IntegratorCfg.params:1:<autosummary>:1
msgid "The time step of the integrator."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.bias:3
msgid "The data to add bias to."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.bias:4
msgid "Value of bias to add to data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.bias:6
msgid "Biased data. Shape is the same as data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.clip:3
msgid "The data to apply the clip to."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.clip:4
msgid ""
"A tuple containing the minimum and maximum values to clip data to. If the"
" value is None, that bound is not applied."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.clip:7
msgid "Clipped data. Shape is the same as data."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.scale:3
msgid "The data to apply the scale to."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.scale:4
msgid "Value to scale input by."
msgstr ""

#: of omni.isaac.lab.utils.modifiers.modifier.scale:6
msgid "Scaled data. Shape is the same as data."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:103
msgid "Noise operations"
msgstr ""

#: of omni.isaac.lab.utils.noise:3
msgid ""
"The noise models are implemented as functions that take in a tensor and a"
" configuration and return a tensor with the noise applied. These "
"functions are then used in the :class:`NoiseCfg` configuration class."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`NoiseCfg <omni.isaac.lab.utils.noise.NoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Base configuration for a noise term."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`ConstantNoiseCfg <omni.isaac.lab.utils.noise.ConstantNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.ConstantNoiseCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Configuration for an additive constant noise term."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`GaussianNoiseCfg <omni.isaac.lab.utils.noise.GaussianNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.GaussianNoiseCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Configuration for an additive gaussian noise term."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`NoiseModelCfg <omni.isaac.lab.utils.noise.NoiseModelCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Configuration for a noise model."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
":py:obj:`NoiseModelWithAdditiveBiasCfg "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Configuration for an additive gaussian noise with bias model."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`UniformNoiseCfg <omni.isaac.lab.utils.noise.UniformNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.UniformNoiseCfg:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Configuration for a additive uniform noise term."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ":py:obj:`NoiseModel <omni.isaac.lab.utils.noise.NoiseModel>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Base class for noise models."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
":py:obj:`NoiseModelWithAdditiveBias "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBias>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1
#: omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "Noise model with an additive bias."
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
":py:obj:`ConstantBiasNoiseCfg "
"<omni.isaac.lab.utils.noise.ConstantBiasNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
"alias of "
":py:class:`~omni.isaac.lab.utils.noise.noise_cfg.ConstantNoiseCfg`"
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
":py:obj:`AdditiveUniformNoiseCfg "
"<omni.isaac.lab.utils.noise.AdditiveUniformNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid "alias of :py:class:`~omni.isaac.lab.utils.noise.noise_cfg.UniformNoiseCfg`"
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
":py:obj:`AdditiveGaussianNoiseCfg "
"<omni.isaac.lab.utils.noise.AdditiveGaussianNoiseCfg>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise:1:<autosummary>:1
msgid ""
"alias of "
":py:class:`~omni.isaac.lab.utils.noise.noise_cfg.GaussianNoiseCfg`"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
msgid ""
":py:obj:`constant_noise <omni.isaac.lab.utils.noise.constant_noise>`\\ "
"\\(data\\, cfg\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.constant_noise:1
msgid "Applies a constant noise bias to a given data set."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
msgid ""
":py:obj:`gaussian_noise <omni.isaac.lab.utils.noise.gaussian_noise>`\\ "
"\\(data\\, cfg\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.gaussian_noise:1
msgid "Applies a gaussian noise to a given data set."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
msgid ""
":py:obj:`uniform_noise <omni.isaac.lab.utils.noise.uniform_noise>`\\ "
"\\(data\\, cfg\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.uniform_noise:1
msgid "Applies a uniform noise to a given data set."
msgstr ""

#: of omni.isaac.lab.utils.noise.NoiseCfg.operation:1:<autosummary>:1
msgid ":py:obj:`operation <omni.isaac.lab.utils.noise.NoiseCfg.operation>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.NoiseCfg.operation:1:<autosummary>:1
msgid "The operation to apply the noise on the data."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.ConstantNoiseCfg.operation:1
#: omni.isaac.lab.utils.noise.GaussianNoiseCfg.operation:1
#: omni.isaac.lab.utils.noise.NoiseCfg.operation:1
#: omni.isaac.lab.utils.noise.UniformNoiseCfg.operation:1
msgid "The operation to apply the noise on the data. Defaults to \"add\"."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.ConstantNoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.GaussianNoiseCfg:1
#: omni.isaac.lab.utils.noise.noise_cfg.UniformNoiseCfg:1
msgid "Bases: :py:class:`~omni.isaac.lab.utils.noise.noise_cfg.NoiseCfg`"
msgstr ""

#: of omni.isaac.lab.utils.noise.ConstantNoiseCfg.bias:1:<autosummary>:1
msgid ":py:obj:`bias <omni.isaac.lab.utils.noise.ConstantNoiseCfg.bias>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.ConstantNoiseCfg.bias:1:<autosummary>:1
msgid "The bias to add."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.ConstantNoiseCfg.bias:1
msgid "The bias to add. Defaults to 0.0."
msgstr ""

#: of omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean:1:<autosummary>:1
msgid ":py:obj:`mean <omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean:1:<autosummary>:1
msgid "The mean of the noise."
msgstr ""

#: of omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean:1:<autosummary>:1
msgid ":py:obj:`std <omni.isaac.lab.utils.noise.GaussianNoiseCfg.std>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean:1:<autosummary>:1
msgid "The standard deviation of the noise."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.GaussianNoiseCfg.mean:1
msgid "The mean of the noise. Defaults to 0.0."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.GaussianNoiseCfg.std:1
msgid "The standard deviation of the noise. Defaults to 1.0."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1:<autosummary>:1
msgid ""
":py:obj:`class_type "
"<omni.isaac.lab.utils.noise.NoiseModelCfg.class_type>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg:1:<autosummary>:1
msgid "alias of :py:class:`~omni.isaac.lab.utils.noise.noise_model.NoiseModel`"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
msgid ":py:obj:`noise_cfg <omni.isaac.lab.utils.noise.NoiseModelCfg.noise_cfg>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.NoiseModelCfg.noise_cfg:1
#: omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.noise_cfg:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
msgid "The noise configuration to use."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
msgid ""
":py:obj:`apply "
"<omni.isaac.lab.utils.noise.NoiseModelCfg.class_type.apply>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.apply:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
msgid "Apply the noise to the data."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
msgid ""
":py:obj:`reset "
"<omni.isaac.lab.utils.noise.NoiseModelCfg.class_type.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModel:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1:<autosummary>:1
msgid "Reset the noise model."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1
msgid "Bases: :py:class:`~omni.isaac.lab.utils.noise.noise_cfg.NoiseModelCfg`"
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1:<autosummary>:1
msgid ""
":py:obj:`class_type "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.class_type>`\\"
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_cfg.NoiseModelWithAdditiveBiasCfg:1:<autosummary>:1
msgid ""
"alias of "
":py:class:`~omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias`"
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.noise_cfg:1:<autosummary>:1
msgid ""
":py:obj:`bias_noise_cfg "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.bias_noise_cfg>`\\"
msgstr ""

#: ../../docstring of
#: omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.bias_noise_cfg:1
#: omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.noise_cfg:1:<autosummary>:1
msgid "The noise configuration for the bias."
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1:<autosummary>:1
msgid ""
":py:obj:`apply "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.class_type.apply>`\\"
" \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.apply:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:1:<autosummary>:1
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1:<autosummary>:1
msgid "Apply bias noise to the data."
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1:<autosummary>:1
msgid ""
":py:obj:`reset "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.class_type.reset>`\\"
" \\(\\[env\\_ids\\]\\)"
msgstr ""

#: ../../docstring of
#: omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBiasCfg.bias_noise_cfg:3
msgid ""
"Based on this configuration, the bias is sampled at every reset of the "
"noise model."
msgstr ""

#: of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min:1:<autosummary>:1
msgid ":py:obj:`n_min <omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min:1:<autosummary>:1
msgid "The minimum value of the noise."
msgstr ""

#: of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min:1:<autosummary>:1
msgid ":py:obj:`n_max <omni.isaac.lab.utils.noise.UniformNoiseCfg.n_max>`\\"
msgstr ""

#: of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min:1:<autosummary>:1
msgid "The maximum value of the noise."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_min:1
msgid "The minimum value of the noise. Defaults to -1.0."
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.noise.UniformNoiseCfg.n_max:1
msgid "The maximum value of the noise. Defaults to 1.0."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:1:<autosummary>:1
msgid ""
":py:obj:`reset <omni.isaac.lab.utils.noise.NoiseModel.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:1:<autosummary>:1
msgid ":py:obj:`apply <omni.isaac.lab.utils.noise.NoiseModel.apply>`\\ \\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:3
msgid ""
"This method can be implemented by derived classes to reset the noise "
"model. This is useful when implementing temporal noise models such as "
"random walk."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.reset:6
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:5
msgid ""
"The environment ids to reset the noise model for. Defaults to None, in "
"which case all environments are considered."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.apply:3
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.apply:3
msgid "The data to apply the noise to. Shape is (num_envs, ...)."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModel.apply:5
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.apply:5
msgid "The data with the noise applied. Shape is the same as the input data."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:1
msgid "Bases: :py:class:`~omni.isaac.lab.utils.noise.noise_model.NoiseModel`"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias:3
msgid "The bias term is sampled from a the specified distribution on reset."
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:1:<autosummary>:1
msgid ""
":py:obj:`reset "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBias.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: of
#: omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:1:<autosummary>:1
msgid ""
":py:obj:`apply "
"<omni.isaac.lab.utils.noise.NoiseModelWithAdditiveBias.apply>`\\ "
"\\(data\\)"
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.NoiseModelWithAdditiveBias.reset:3
msgid "This method resets the bias term for the specified environments."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.constant_noise:3
#: omni.isaac.lab.utils.noise.noise_model.gaussian_noise:3
#: omni.isaac.lab.utils.noise.noise_model.uniform_noise:3
msgid "The unmodified data set to apply noise to."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.constant_noise:4
msgid "The configuration parameters for constant noise."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.constant_noise:6
#: omni.isaac.lab.utils.noise.noise_model.gaussian_noise:6
#: omni.isaac.lab.utils.noise.noise_model.uniform_noise:6
msgid "The data modified by the noise parameters provided."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.gaussian_noise:4
msgid "The configuration parameters for gaussian noise."
msgstr ""

#: of omni.isaac.lab.utils.noise.noise_model.uniform_noise:4
msgid "The configuration parameters for uniform noise."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:113
msgid "String operations"
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`to_camel_case <omni.isaac.lab.utils.string.to_camel_case>`\\ "
"\\(snake\\_str\\[\\, to\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid "Converts a string from snake case to camel case."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`to_snake_case <omni.isaac.lab.utils.string.to_snake_case>`\\ "
"\\(camel\\_str\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
#: omni.isaac.lab.utils.string.to_snake_case:1
msgid "Converts a string from camel case to snake case."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`string_to_slice <omni.isaac.lab.utils.string.string_to_slice>`\\"
" \\(s\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_slice:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid "Convert a string representation of a slice to a slice object."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`is_lambda_expression "
"<omni.isaac.lab.utils.string.is_lambda_expression>`\\ \\(name\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.is_lambda_expression:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid "Checks if the input string is a lambda expression."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`callable_to_string "
"<omni.isaac.lab.utils.string.callable_to_string>`\\ \\(value\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.callable_to_string:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid "Converts a callable object to a string."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`string_to_callable "
"<omni.isaac.lab.utils.string.string_to_callable>`\\ \\(name\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_callable:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid "Resolves the module and function names to return the function."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`resolve_matching_names "
"<omni.isaac.lab.utils.string.resolve_matching_names>`\\ \\(keys\\, "
"list\\_of\\_strings\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
"Match a list of query regular expressions against a list of strings and "
"return the matched indices and names."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
":py:obj:`resolve_matching_names_values "
"<omni.isaac.lab.utils.string.resolve_matching_names_values>`\\ \\(data\\,"
" ...\\[\\, ...\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:1
#: omni.isaac.lab.utils.string.to_camel_case:1:<autosummary>:1
msgid ""
"Match a list of regular expressions in a dictionary against a list of "
"strings and return the matched indices, names, and values."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:3
#: omni.isaac.lab.utils.string.to_snake_case:5
msgid "A string in snake case (i.e. with '_')"
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:4
msgid "Convention to convert string to. Defaults to \"cC\"."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:6
msgid "Invalid input argument `to`, i.e. not \"cC\" or \"CC\"."
msgstr ""

#: of omni.isaac.lab.utils.string.to_camel_case:8
msgid "A string in camel-case format."
msgstr ""

#: of omni.isaac.lab.utils.string.to_snake_case:3
msgid "A string in camel case."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_slice:3
msgid "The string representation of the slice."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_slice:5
msgid "The slice object."
msgstr ""

#: of omni.isaac.lab.utils.string.is_lambda_expression:3
msgid "The input string."
msgstr ""

#: of omni.isaac.lab.utils.string.is_lambda_expression:5
msgid "Whether the input string is a lambda expression."
msgstr ""

#: of omni.isaac.lab.utils.string.callable_to_string:3
msgid "A callable object."
msgstr ""

#: of omni.isaac.lab.utils.string.callable_to_string:5
msgid "When the input argument is not a callable object."
msgstr ""

#: of omni.isaac.lab.utils.string.callable_to_string:7
msgid "A string representation of the callable object."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_callable:3
msgid ""
"The function name. The format should be 'module:attribute_name' or a "
"lambda expression of format: 'lambda x: x'."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_callable:6
msgid "When the resolved attribute is not a function."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_callable:7
msgid "When the module cannot be found."
msgstr ""

#: of omni.isaac.lab.utils.string.string_to_callable:9
msgid "The function loaded from the module."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:3
msgid ""
"When a list of query regular expressions is provided, the function checks"
" each target string against each query regular expression and returns the"
" indices of the matched strings and the matched strings."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:6
#: omni.isaac.lab.utils.string.resolve_matching_names_values:4
msgid ""
"If the :attr:`preserve_order` is True, the ordering of the matched "
"indices and names is the same as the order of the provided list of "
"strings. This means that the ordering is dictated by the order of the "
"target strings and not the order of the query regular expressions."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:10
#: omni.isaac.lab.utils.string.resolve_matching_names_values:8
msgid ""
"If the :attr:`preserve_order` is False, the ordering of the matched "
"indices and names is the same as the order of the provided list of query "
"regular expressions."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:13
msgid ""
"For example, consider the list of strings is ['a', 'b', 'c', 'd', 'e'] "
"and the regular expressions are ['a|c', 'b']. If :attr:`preserve_order` "
"is False, then the function will return the indices of the matched "
"strings and the strings as: ([0, 1, 2], ['a', 'b', 'c']). When "
":attr:`preserve_order` is True, it will return them as: ([0, 2, 1], ['a',"
" 'c', 'b'])."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:18
msgid ""
"The function does not sort the indices. It returns the indices in the "
"order they are found."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:20
msgid ""
"A regular expression or a list of regular expressions to match the "
"strings in the list."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:21
#: omni.isaac.lab.utils.string.resolve_matching_names_values:17
msgid "A list of strings to match."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:22
#: omni.isaac.lab.utils.string.resolve_matching_names_values:18
msgid ""
"Whether to preserve the order of the query keys in the returned values. "
"Defaults to False."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:24
msgid "A tuple of lists containing the matched indices and names."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:26
msgid "When multiple matches are found for a string in the list."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names:27
msgid "When not all regular expressions are matched."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:11
msgid ""
"For example, consider the dictionary is {\"a|d|e\": 1, \"b|c\": 2}, the "
"list of strings is ['a', 'b', 'c', 'd', 'e']. If :attr:`preserve_order` "
"is False, then the function will return the indices of the matched "
"strings, the matched strings, and the values as: ([0, 1, 2, 3, 4], ['a', "
"'b', 'c', 'd', 'e'], [1, 2, 2, 1, 1]). When :attr:`preserve_order` is "
"True, it will return them as: ([0, 3, 4, 1, 2], ['a', 'd', 'e', 'b', "
"'c'], [1, 1, 1, 2, 2])."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:16
msgid ""
"A dictionary of regular expressions and values to match the strings in "
"the list."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:20
msgid "A tuple of lists containing the matched indices, names, and values."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:22
msgid "When the input argument :attr:`data` is not a dictionary."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:23
msgid "When multiple matches are found for a string in the dictionary."
msgstr ""

#: of omni.isaac.lab.utils.string.resolve_matching_names_values:24
msgid "When not all regular expressions in the data keys are matched."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:120
msgid "Timer operations"
msgstr ""

#: of omni.isaac.lab.utils.timer:1
msgid "**Exceptions:**"
msgstr ""

#: of omni.isaac.lab.utils.timer:1:<autosummary>:1
msgid ":py:obj:`TimerError <omni.isaac.lab.utils.timer.TimerError>`\\"
msgstr ""

#: of omni.isaac.lab.utils.timer.TimerError:1
#: omni.isaac.lab.utils.timer:1:<autosummary>:1
msgid "A custom exception used to report errors in use of :class:`Timer` class."
msgstr ""

#: of omni.isaac.lab.utils.timer.TimerError:1:<autosummary>:1
msgid ":py:obj:`Timer <omni.isaac.lab.utils.timer.Timer>`\\"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:1
#: omni.isaac.lab.utils.timer.TimerError:1:<autosummary>:1
msgid "A timer for performance measurements."
msgstr ""

#: of omni.isaac.lab.utils.timer.TimerError:1
msgid "Bases: :py:class:`Exception`"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:1
msgid "Bases: :py:class:`~contextlib.ContextDecorator`"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:3
msgid ""
"A class to keep track of time for performance measurement. It allows "
"timing via context managers and decorators as well."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:6
msgid ""
"It uses the `time.perf_counter` function to measure time. This function "
"returns the number of seconds since the epoch as a float. It has the "
"highest resolution available on the system."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:10
msgid "As a regular object:"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:27
msgid "As a context manager:"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:39
msgid "Reference: https://gist.github.com/sumeet/1123871"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid ":py:obj:`timing_info <omni.isaac.lab.utils.timer.Timer.timing_info>`\\"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.timer.Timer.timing_info:1
#: omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid "Dictionary for storing the elapsed time per timer instances globally."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid ":py:obj:`time_elapsed <omni.isaac.lab.utils.timer.Timer.time_elapsed>`\\"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.time_elapsed:1
#: omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid "The number of seconds that have elapsed since this timer started timing."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid ""
":py:obj:`total_run_time "
"<omni.isaac.lab.utils.timer.Timer.total_run_time>`\\"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.total_run_time:1
#: omni.isaac.lab.utils.timer.Timer:1:<autosummary>:1
msgid ""
"The number of seconds that elapsed from when the timer started to when it"
" ended."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid ""
":py:obj:`__init__ <omni.isaac.lab.utils.timer.Timer.__init__>`\\ "
"\\(\\[msg\\, name\\]\\)"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.__init__:1
#: omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid "Initializes the timer."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid ":py:obj:`start <omni.isaac.lab.utils.timer.Timer.start>`\\ \\(\\)"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.start:1
#: omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid "Start timing."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid ":py:obj:`stop <omni.isaac.lab.utils.timer.Timer.stop>`\\ \\(\\)"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.stop:1
#: omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid "Stop timing."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid ""
":py:obj:`get_timer_info "
"<omni.isaac.lab.utils.timer.Timer.get_timer_info>`\\ \\(name\\)"
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.get_timer_info:2
#: omni.isaac.lab.utils.timer.Timer.timing_info:1:<autosummary>:1
msgid "Retrieves the time logged in the global dictionary"
msgstr ""

#: ../../docstring of omni.isaac.lab.utils.timer.Timer.timing_info:3
msgid ""
"This dictionary logs the timer information. The keys are the names given "
"to the timer class at its initialization. If no :attr:`name` is passed to"
" the constructor, no time is recorded in the dictionary."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.__init__:3
msgid ""
"The message to display when using the timer class in a context manager. "
"Defaults to None."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.__init__:5
msgid ""
"The name to use for logging times in a global dictionary. Defaults to "
"None."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.time_elapsed:3
msgid ""
"This is used for checking how much time has elapsed while the timer is "
"still running."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.get_timer_info:2
msgid "based on name."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.get_timer_info:4
msgid "Name of the the entry to be retrieved."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.get_timer_info:6
msgid "If name doesn't exist in the log."
msgstr ""

#: of omni.isaac.lab.utils.timer.Timer.get_timer_info:8
msgid "A float containing the time logged if the name exists."
msgstr ""

#: ../../source/api/lab/omni.isaac.lab.utils.rst:127
msgid "Warp operations"
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:1:<autosummary>:1
msgid ""
":py:obj:`convert_to_warp_mesh "
"<omni.isaac.lab.utils.warp.convert_to_warp_mesh>`\\ \\(points\\, "
"indices\\, device\\)"
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:1
#: omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:1:<autosummary>:1
msgid "Create a warp mesh object with a mesh defined from vertices and triangles."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:1:<autosummary>:1
msgid ""
":py:obj:`raycast_mesh <omni.isaac.lab.utils.warp.raycast_mesh>`\\ "
"\\(ray\\_starts\\, ray\\_directions\\, mesh\\)"
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:1:<autosummary>:1
#: omni.isaac.lab.utils.warp.ops.raycast_mesh:1
msgid "Performs ray-casting against a mesh."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:3
msgid ""
"The vertices of the mesh. Shape is (N, 3), where N is the number of "
"vertices."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:4
msgid ""
"The triangles of the mesh as references to vertices for each triangle. "
"Shape is (M, 3), where M is the number of triangles / faces."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:6
msgid "The device to use for the mesh."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.convert_to_warp_mesh:8
msgid "The warp mesh object."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:3
msgid ""
"Note that the `ray_starts` and `ray_directions`, and `ray_hits` should "
"have compatible shapes and data types to ensure proper execution. "
"Additionally, they all must be in the same frame."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:6
msgid "The starting position of the rays. Shape (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:7
msgid "The ray directions for each ray. Shape (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:8
msgid "The warp mesh to ray-cast against."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:9
msgid "The maximum distance to ray-cast. Defaults to 1e6."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:10
msgid ""
"Whether to return the distance of the ray until it hits the mesh. "
"Defaults to False."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:11
msgid ""
"Whether to return the normal of the mesh face the ray hits. Defaults to "
"False."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:12
msgid ""
"Whether to return the face id of the mesh face the ray hits. Defaults to "
"False."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:14
msgid ""
"The ray hit position. Shape (N, 3).     The returned tensor contains "
":obj:`float('inf')` for missed hits. The ray hit distance. Shape (N,)."
"     Will only return if :attr:`return_distance` is True, else returns "
"None.     The returned tensor contains :obj:`float('inf')` for missed "
"hits. The ray hit normal. Shape (N, 3).     Will only return if "
":attr:`return_normal` is True else returns None.     The returned tensor "
"contains :obj:`float('inf')` for missed hits. The ray hit face id. Shape "
"(N,).     Will only return if :attr:`return_face_id` is True else returns"
" None.     The returned tensor contains :obj:`int(-1)` for missed hits."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:16
msgid "The ray hit position. Shape (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:17
msgid "The returned tensor contains :obj:`float('inf')` for missed hits."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:19
msgid "The ray hit distance. Shape (N,)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:19
msgid ""
"Will only return if :attr:`return_distance` is True, else returns None. "
"The returned tensor contains :obj:`float('inf')` for missed hits."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:22
msgid "The ray hit normal. Shape (N, 3)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:22
msgid ""
"Will only return if :attr:`return_normal` is True else returns None. The "
"returned tensor contains :obj:`float('inf')` for missed hits."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:25
msgid "The ray hit face id. Shape (N,)."
msgstr ""

#: of omni.isaac.lab.utils.warp.ops.raycast_mesh:25
msgid ""
"Will only return if :attr:`return_face_id` is True else returns None. The"
" returned tensor contains :obj:`int(-1)` for missed hits."
msgstr ""

