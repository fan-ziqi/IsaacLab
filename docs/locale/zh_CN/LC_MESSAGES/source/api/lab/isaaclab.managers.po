# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-27 16:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/api/lab/isaaclab.managers.rst:2
msgid "isaaclab.managers"
msgstr ""

#: isaaclab.managers:1 of
msgid "Sub-module for environment managers."
msgstr ""

#: isaaclab.managers:3 of
msgid ""
"The managers are used to handle various aspects of the environment such "
"as randomization events, curriculum, and observations. Each manager "
"implements a specific functionality for the environment. The managers are"
" designed to be modular and can be easily extended to support new "
"functionality."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:7
msgid "Classes"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`SceneEntityCfg <isaaclab.managers.SceneEntityCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1 of
msgid "Configuration for a scene entity that is used by the manager's term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ManagerBase <isaaclab.managers.ManagerBase>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase:1 of
msgid "Base class for all managers."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ManagerTermBase <isaaclab.managers.ManagerTermBase>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerTermBase:1 of
msgid "Base class for manager terms."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ManagerTermBaseCfg <isaaclab.managers.ManagerTermBaseCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.ManagerTermBaseCfg:1 of
msgid "Configuration for a manager term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ObservationManager <isaaclab.managers.ObservationManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager:1 of
msgid "Manager for computing observation signals for a given world."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ObservationGroupCfg <isaaclab.managers.ObservationGroupCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.ObservationGroupCfg:1 of
msgid "Configuration for an observation group."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ObservationTermCfg <isaaclab.managers.ObservationTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.ObservationTermCfg:1 of
msgid "Configuration for an observation term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ActionManager <isaaclab.managers.ActionManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.action_manager.ActionManager:1 of
msgid "Manager for processing and applying actions for a given world."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ActionTerm <isaaclab.managers.ActionTerm>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.action_manager.ActionTerm:1 of
msgid "Base class for action terms."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`ActionTermCfg <isaaclab.managers.ActionTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.ActionTermCfg:1 of
msgid "Configuration for an action term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`EventManager <isaaclab.managers.EventManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.event_manager.EventManager:1 of
msgid "Manager for orchestrating operations based on different simulation events."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`EventTermCfg <isaaclab.managers.EventTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.EventTermCfg:1 of
msgid "Configuration for a event term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`CommandManager <isaaclab.managers.CommandManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.command_manager.CommandManager:1 of
msgid "Manager for generating commands."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`CommandTerm <isaaclab.managers.CommandTerm>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.command_manager.CommandTerm:1 of
msgid "The base class for implementing a command term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`CommandTermCfg <isaaclab.managers.CommandTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.CommandTermCfg:1 of
msgid "Configuration for a command generator term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`RewardManager <isaaclab.managers.RewardManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager:1 of
msgid "Manager for computing reward signals for a given world."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`RewardTermCfg <isaaclab.managers.RewardTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.RewardTermCfg:1 of
msgid "Configuration for a reward term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`TerminationManager <isaaclab.managers.TerminationManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager:1 of
msgid "Manager for computing done signals for a given world."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`TerminationTermCfg <isaaclab.managers.TerminationTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.TerminationTermCfg:1 of
msgid "Configuration for a termination term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`CurriculumManager <isaaclab.managers.CurriculumManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1 of
msgid "Manager to implement and execute specific curricula."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`CurriculumTermCfg <isaaclab.managers.CurriculumTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.CurriculumTermCfg:1 of
msgid "Configuration for a curriculum term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`RecorderManager <isaaclab.managers.RecorderManager>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.recorder_manager.RecorderManager:1 of
msgid "Manager for recording data from recorder terms."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
msgid ":py:obj:`RecorderTermCfg <isaaclab.managers.RecorderTermCfg>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:32:<autosummary>:1
#: isaaclab.managers.manager_term_cfg.RecorderTermCfg:1 of
msgid "Configuration for an recorder term."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:35
msgid "Scene Entity"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:3 of
msgid ""
"This class is used to specify the name of the scene entity that is "
"queried from the :class:`InteractiveScene` and passed to the manager's "
"term function."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1
#: isaaclab.managers.action_manager.ActionTerm:1
#: isaaclab.managers.command_manager.CommandManager:1
#: isaaclab.managers.command_manager.CommandTerm:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1
#: isaaclab.managers.event_manager.EventManager:1
#: isaaclab.managers.manager_base.ManagerBase:1
#: isaaclab.managers.manager_base.ManagerTermBase:1
#: isaaclab.managers.manager_term_cfg.ActionTermCfg:1
#: isaaclab.managers.manager_term_cfg.CommandTermCfg:1
#: isaaclab.managers.manager_term_cfg.CurriculumTermCfg:1
#: isaaclab.managers.manager_term_cfg.EventTermCfg:1
#: isaaclab.managers.manager_term_cfg.ManagerTermBaseCfg:1
#: isaaclab.managers.manager_term_cfg.ObservationGroupCfg:1
#: isaaclab.managers.manager_term_cfg.ObservationTermCfg:1
#: isaaclab.managers.manager_term_cfg.RecorderTermCfg:1
#: isaaclab.managers.manager_term_cfg.TerminationTermCfg:1
#: isaaclab.managers.observation_manager.ObservationManager:1
#: isaaclab.managers.recorder_manager.RecorderManager:1
#: isaaclab.managers.reward_manager.RewardManager:1
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1
#: isaaclab.managers.termination_manager.TerminationManager:1 of
msgid "**Attributes:**"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ":py:obj:`name <isaaclab.managers.SceneEntityCfg.name>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.asset_name:1
#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1
#: isaaclab.managers.SceneEntityCfg.name:1
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The name of the scene entity."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ":py:obj:`joint_names <isaaclab.managers.SceneEntityCfg.joint_names>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The names of the joints from the scene entity."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ":py:obj:`joint_ids <isaaclab.managers.SceneEntityCfg.joint_ids>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The indices of the joints from the asset required by the term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
":py:obj:`fixed_tendon_names "
"<isaaclab.managers.SceneEntityCfg.fixed_tendon_names>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The names of the fixed tendons from the scene entity."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
":py:obj:`fixed_tendon_ids "
"<isaaclab.managers.SceneEntityCfg.fixed_tendon_ids>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The indices of the fixed tendons from the asset required by the term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ":py:obj:`body_names <isaaclab.managers.SceneEntityCfg.body_names>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The names of the bodies from the asset required by the term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ":py:obj:`body_ids <isaaclab.managers.SceneEntityCfg.body_ids>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid "The indices of the bodies from the asset required by the term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
":py:obj:`object_collection_names "
"<isaaclab.managers.SceneEntityCfg.object_collection_names>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
"The names of the objects in the rigid object collection required by the "
"term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
":py:obj:`object_collection_ids "
"<isaaclab.managers.SceneEntityCfg.object_collection_ids>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
"The indices of the objects from the rigid object collection required by "
"the term."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
":py:obj:`preserve_order "
"<isaaclab.managers.SceneEntityCfg.preserve_order>`\\"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1:<autosummary>:1 of
msgid ""
"Whether to preserve indices ordering to match with that in the specified "
"joint, body, or object collection names."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1
#: isaaclab.managers.action_manager.ActionTerm:1
#: isaaclab.managers.command_manager.CommandManager:1
#: isaaclab.managers.command_manager.CommandTerm:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1
#: isaaclab.managers.event_manager.EventManager:1
#: isaaclab.managers.manager_base.ManagerBase:1
#: isaaclab.managers.manager_base.ManagerTermBase:1
#: isaaclab.managers.manager_term_cfg.RewardTermCfg:1
#: isaaclab.managers.observation_manager.ObservationManager:1
#: isaaclab.managers.recorder_manager.RecorderManager:1
#: isaaclab.managers.reward_manager.RewardManager:1
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg:1
#: isaaclab.managers.termination_manager.TerminationManager:1 of
msgid "**Methods:**"
msgstr ""

#: isaaclab.managers.SceneEntityCfg.name:1:<autosummary>:1 of
msgid ":py:obj:`resolve <isaaclab.managers.SceneEntityCfg.resolve>`\\ \\(scene\\)"
msgstr ""

#: isaaclab.managers.SceneEntityCfg.name:1:<autosummary>:1
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:1 of
msgid ""
"Resolves the scene entity and converts the joint and body names to "
"indices."
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.asset_name:3
#: isaaclab.managers.SceneEntityCfg.name:3 of
msgid ""
"This is the name defined in the scene configuration file. See the "
":class:`InteractiveSceneCfg` class for more details."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.joint_names:1 of
msgid "The names of the joints from the scene entity. Defaults to None."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.fixed_tendon_names:3
#: isaaclab.managers.SceneEntityCfg.joint_names:3 of
msgid ""
"The names can be either joint names or a regular expression matching the "
"joint names."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.joint_names:5 of
msgid ""
"These are converted to joint indices on initialization of the manager and"
" passed to the term function as a list of joint indices under "
":attr:`joint_ids`."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.joint_ids:1 of
msgid ""
"The indices of the joints from the asset required by the term. Defaults "
"to slice(None), which means all the joints in the asset (if present)."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.joint_ids:4 of
msgid ""
"If :attr:`joint_names` is specified, this is filled in automatically on "
"initialization of the manager."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.fixed_tendon_names:1 of
msgid "The names of the fixed tendons from the scene entity. Defaults to None."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.fixed_tendon_names:5 of
msgid ""
"These are converted to fixed tendon indices on initialization of the "
"manager and passed to the term function as a list of fixed tendon indices"
" under :attr:`fixed_tendon_ids`."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.fixed_tendon_ids:1 of
msgid ""
"The indices of the fixed tendons from the asset required by the term. "
"Defaults to slice(None), which means all the fixed tendons in the asset "
"(if present)."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.fixed_tendon_ids:4 of
msgid ""
"If :attr:`fixed_tendon_names` is specified, this is filled in "
"automatically on initialization of the manager."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.body_names:1 of
msgid ""
"The names of the bodies from the asset required by the term. Defaults to "
"None."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.body_names:3 of
msgid ""
"The names can be either body names or a regular expression matching the "
"body names."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.body_names:5 of
msgid ""
"These are converted to body indices on initialization of the manager and "
"passed to the term function as a list of body indices under "
":attr:`body_ids`."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.body_ids:1 of
msgid ""
"The indices of the bodies from the asset required by the term. Defaults "
"to slice(None), which means all the bodies in the asset."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.body_ids:4 of
msgid ""
"If :attr:`body_names` is specified, this is filled in automatically on "
"initialization of the manager."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.object_collection_names:1
#: of
msgid ""
"The names of the objects in the rigid object collection required by the "
"term. Defaults to None."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.object_collection_names:3
#: of
msgid ""
"The names can be either names or a regular expression matching the object"
" names in the collection."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.object_collection_names:5
#: of
msgid ""
"These are converted to object indices on initialization of the manager "
"and passed to the term function as a list of object indices under "
":attr:`object_collection_ids`."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.object_collection_ids:1 of
msgid ""
"The indices of the objects from the rigid object collection required by "
"the term. Defaults to slice(None), which means all the objects in the "
"collection."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.object_collection_ids:4 of
msgid ""
"If :attr:`object_collection_names` is specified, this is filled in "
"automatically on initialization of the manager."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.preserve_order:1 of
msgid ""
"Whether to preserve indices ordering to match with that in the specified "
"joint, body, or object collection names. Defaults to False."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.preserve_order:4 of
msgid ""
"If False, the ordering of the indices are sorted in ascending order (i.e."
" the ordering in the entity's joints, bodies, or object in the object "
"collection). Otherwise, the indices are preserved in the order of the "
"specified joint, body, or object collection names."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.preserve_order:8 of
msgid ""
"For more details, see the "
":meth:`isaaclab.utils.string.resolve_matching_names` function."
msgstr ""

#: ../../docstring isaaclab.managers.SceneEntityCfg.preserve_order:11 of
msgid ""
"This attribute is only used when :attr:`joint_names`, :attr:`body_names`,"
" or :attr:`object_collection_names` are specified."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:3 of
msgid ""
"This function examines the scene entity from the "
":class:`InteractiveScene` and resolves the indices and names of the "
"joints and bodies. It is an expensive operation as it resolves regular "
"expressions and should be called only once."
msgstr ""

#: isaaclab.managers.RecorderManager.exported_failed_episode_count
#: isaaclab.managers.RecorderManager.exported_successful_episode_count
#: isaaclab.managers.action_manager.ActionManager.__init__
#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms
#: isaaclab.managers.action_manager.ActionManager.get_term
#: isaaclab.managers.action_manager.ActionManager.process_action
#: isaaclab.managers.action_manager.ActionManager.reset
#: isaaclab.managers.action_manager.ActionTerm.__init__
#: isaaclab.managers.action_manager.ActionTerm.process_actions
#: isaaclab.managers.command_manager.CommandManager.__init__
#: isaaclab.managers.command_manager.CommandManager.compute
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms
#: isaaclab.managers.command_manager.CommandManager.get_command
#: isaaclab.managers.command_manager.CommandManager.get_term
#: isaaclab.managers.command_manager.CommandManager.reset
#: isaaclab.managers.command_manager.CommandManager.set_debug_vis
#: isaaclab.managers.command_manager.CommandTerm.compute
#: isaaclab.managers.command_manager.CommandTerm.reset
#: isaaclab.managers.command_manager.CommandTerm.set_debug_vis
#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__
#: isaaclab.managers.curriculum_manager.CurriculumManager.compute
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms
#: isaaclab.managers.event_manager.EventManager.__init__
#: isaaclab.managers.event_manager.EventManager.apply
#: isaaclab.managers.event_manager.EventManager.get_term_cfg
#: isaaclab.managers.event_manager.EventManager.reset
#: isaaclab.managers.event_manager.EventManager.set_term_cfg
#: isaaclab.managers.manager_base.ManagerBase.__init__
#: isaaclab.managers.manager_base.ManagerBase.find_terms
#: isaaclab.managers.manager_base.ManagerBase.reset
#: isaaclab.managers.manager_base.ManagerTermBase.__init__
#: isaaclab.managers.manager_base.ManagerTermBase.reset
#: isaaclab.managers.observation_manager.ObservationManager.__init__
#: isaaclab.managers.observation_manager.ObservationManager.compute_group
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms
#: isaaclab.managers.observation_manager.ObservationManager.reset
#: isaaclab.managers.recorder_manager.RecorderManager.__init__
#: isaaclab.managers.recorder_manager.RecorderManager.add_to_episodes
#: isaaclab.managers.recorder_manager.RecorderManager.export_episodes
#: isaaclab.managers.recorder_manager.RecorderManager.get_episode
#: isaaclab.managers.recorder_manager.RecorderManager.record_post_reset
#: isaaclab.managers.recorder_manager.RecorderManager.record_pre_reset
#: isaaclab.managers.recorder_manager.RecorderManager.reset
#: isaaclab.managers.recorder_manager.RecorderManager.set_success_to_episodes
#: isaaclab.managers.reward_manager.RewardManager.__init__
#: isaaclab.managers.reward_manager.RewardManager.compute
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms
#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg
#: isaaclab.managers.reward_manager.RewardManager.reset
#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve
#: isaaclab.managers.termination_manager.TerminationManager.__init__
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms
#: isaaclab.managers.termination_manager.TerminationManager.get_term
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg
#: isaaclab.managers.termination_manager.TerminationManager.reset
#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg of
msgid "参数"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:7 of
msgid "The interactive scene instance."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__
#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__
#: isaaclab.managers.event_manager.EventManager.apply
#: isaaclab.managers.event_manager.EventManager.get_term_cfg
#: isaaclab.managers.event_manager.EventManager.set_term_cfg
#: isaaclab.managers.observation_manager.ObservationManager.__init__
#: isaaclab.managers.observation_manager.ObservationManager.compute_group
#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg
#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg
#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg
#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg of
msgid "抛出"
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:9 of
msgid "If the scene entity is not found."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:10 of
msgid ""
"If both ``joint_names`` and ``joint_ids`` are specified and are not "
"consistent."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:11 of
msgid ""
"If both ``fixed_tendon_names`` and ``fixed_tendon_ids`` are specified and"
" are not consistent."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:12 of
msgid ""
"If both ``body_names`` and ``body_ids`` are specified and are not "
"consistent."
msgstr ""

#: isaaclab.managers.scene_entity_cfg.SceneEntityCfg.resolve:13 of
msgid ""
"If both ``object_collection_names`` and ``object_collection_ids`` are "
"specified and are not consistent."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:42
msgid "Manager Base"
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.ManagerBase.__init__>`\\ \\(cfg\\, "
"env\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.__init__:1
#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1 of
msgid "Initialize the manager."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.ManagerBase.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.reset:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.reset:1
#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager.reset:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
"Resets the manager and returns logging information for the current time-"
"step."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.ManagerBase.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.find_terms:1
#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Find terms in the manager based on the names."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.ManagerBase.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.get_active_iterable_terms:1
#: isaaclab.managers.manager_base.ManagerBase:1:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Returns the active terms as iterable sequence of tuples."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.ManagerBase.num_envs>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.num_envs:1
#: isaaclab.managers.ActionTerm.num_envs:1
#: isaaclab.managers.CurriculumManager.num_envs:1
#: isaaclab.managers.EventManager.num_envs:1
#: isaaclab.managers.ManagerBase.num_envs:1
#: isaaclab.managers.ManagerTermBase.num_envs:1
#: isaaclab.managers.ObservationManager.num_envs:1
#: isaaclab.managers.RecorderManager.num_envs:1
#: isaaclab.managers.RewardManager.num_envs:1
#: isaaclab.managers.TerminationManager.num_envs:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1
#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerTermBase.__init__:1:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "Number of environments."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.ManagerBase.device>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.device:1
#: isaaclab.managers.ActionTerm.device:1
#: isaaclab.managers.CurriculumManager.device:1
#: isaaclab.managers.EventManager.device:1
#: isaaclab.managers.ManagerBase.device:1
#: isaaclab.managers.ManagerTermBase.device:1
#: isaaclab.managers.ObservationManager.device:1
#: isaaclab.managers.RecorderManager.device:1
#: isaaclab.managers.RewardManager.device:1
#: isaaclab.managers.TerminationManager.device:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1
#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerTermBase.__init__:1:<autosummary>:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "Device on which to perform computations."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1 of
msgid ":py:obj:`active_terms <isaaclab.managers.ManagerBase.active_terms>`\\"
msgstr ""

#: isaaclab.managers.ManagerBase.active_terms:1
#: isaaclab.managers.manager_base.ManagerBase.__init__:1:<autosummary>:1 of
msgid "Name of active terms."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:3 of
msgid ""
"This function is responsible for parsing the configuration object and "
"creating the terms."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:5 of
msgid ""
"If the simulation is not playing, the scene entities are not resolved "
"immediately. Instead, the resolution is deferred until the simulation "
"starts. This is done to ensure that the scene entities are resolved even "
"if the manager is created after the simulation has already started."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.__init__:10 of
msgid ""
"The configuration object. If None, the manager is initialized without any"
" terms."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:4
#: isaaclab.managers.action_manager.ActionTerm.__init__:4
#: isaaclab.managers.command_manager.CommandManager.__init__:4
#: isaaclab.managers.manager_base.ManagerBase.__init__:11
#: isaaclab.managers.manager_base.ManagerTermBase.__init__:4
#: isaaclab.managers.observation_manager.ObservationManager.__init__:4
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:4
#: isaaclab.managers.reward_manager.RewardManager.__init__:4 of
msgid "The environment instance."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.reset:3
#: isaaclab.managers.manager_base.ManagerBase.reset:3
#: isaaclab.managers.observation_manager.ObservationManager.reset:3 of
msgid ""
"The environment ids for which to log data. Defaults None, which logs data"
" for all environments."
msgstr ""

#: isaaclab.managers.RecorderManager.exported_failed_episode_count
#: isaaclab.managers.RecorderManager.exported_successful_episode_count
#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms
#: isaaclab.managers.action_manager.ActionManager.get_term
#: isaaclab.managers.action_manager.ActionManager.reset
#: isaaclab.managers.action_manager.ActionManager.set_debug_vis
#: isaaclab.managers.action_manager.ActionTerm.set_debug_vis
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms
#: isaaclab.managers.command_manager.CommandManager.get_command
#: isaaclab.managers.command_manager.CommandManager.get_term
#: isaaclab.managers.command_manager.CommandManager.reset
#: isaaclab.managers.command_manager.CommandManager.set_debug_vis
#: isaaclab.managers.command_manager.CommandTerm.reset
#: isaaclab.managers.command_manager.CommandTerm.set_debug_vis
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms
#: isaaclab.managers.curriculum_manager.CurriculumManager.reset
#: isaaclab.managers.event_manager.EventManager.get_term_cfg
#: isaaclab.managers.event_manager.EventManager.reset
#: isaaclab.managers.manager_base.ManagerBase.find_terms
#: isaaclab.managers.manager_base.ManagerBase.get_active_iterable_terms
#: isaaclab.managers.manager_base.ManagerBase.reset
#: isaaclab.managers.observation_manager.ObservationManager.compute
#: isaaclab.managers.observation_manager.ObservationManager.compute_group
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms
#: isaaclab.managers.observation_manager.ObservationManager.reset
#: isaaclab.managers.recorder_manager.RecorderManager.get_episode
#: isaaclab.managers.recorder_manager.RecorderManager.reset
#: isaaclab.managers.reward_manager.RewardManager.compute
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms
#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg
#: isaaclab.managers.reward_manager.RewardManager.reset
#: isaaclab.managers.termination_manager.TerminationManager.compute
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms
#: isaaclab.managers.termination_manager.TerminationManager.get_term
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg
#: isaaclab.managers.termination_manager.TerminationManager.reset of
msgid "返回"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.reset:6
#: isaaclab.managers.manager_base.ManagerBase.reset:6
#: isaaclab.managers.observation_manager.ObservationManager.reset:6 of
msgid "Dictionary containing the logging information."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.find_terms:3 of
msgid ""
"This function searches the manager for terms based on the names. The "
"names can be specified as regular expressions or a list of regular "
"expressions. The search is performed on the active terms in the manager."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.find_terms:7 of
msgid ""
"Please check the "
":meth:`~isaaclab.utils.string_utils.resolve_matching_names` function for "
"more information on the name matching."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.find_terms:10 of
msgid ""
"A regular expression or a list of regular expressions to match the term "
"names."
msgstr ""

#: isaaclab.managers.manager_base.ManagerBase.find_terms:12 of
msgid "A list of term names that match the input keys."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms:3
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms:3
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms:3
#: isaaclab.managers.manager_base.ManagerBase.get_active_iterable_terms:3
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms:3
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms:3
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms:3
#: of
msgid ""
"The first element of the tuple is the name of the term and the second "
"element is the raw value(s) of the term."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms:7
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms:7
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms:7
#: isaaclab.managers.manager_base.ManagerBase.get_active_iterable_terms:5
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms:7
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms:7
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms:7
#: of
msgid "The active terms."
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase:3 of
msgid ""
"Manager term implementations can be functions or classes. If the term is "
"a class, it should inherit from this base class and implement the "
"required methods."
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase:6 of
msgid ""
"Each manager is implemented as a class that inherits from the "
":class:`ManagerBase` class. Each manager class should also have a "
"corresponding configuration class that defines the configuration terms "
"for the manager. Each term should the :class:`ManagerTermBaseCfg` class "
"or its subclass."
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase:10 of
msgid "Example pseudo-code for creating a manager:"
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.ManagerTermBase.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase.__init__:1
#: isaaclab.managers.manager_base.ManagerTermBase:1:<autosummary>:1 of
msgid "Initialize the manager term."
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.ManagerTermBase.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1
#: isaaclab.managers.manager_base.ManagerTermBase.reset:1
#: isaaclab.managers.manager_base.ManagerTermBase:1:<autosummary>:1 of
msgid "Resets the manager term."
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.ManagerTermBase.num_envs>`\\"
msgstr ""

#: isaaclab.managers.manager_base.ManagerTermBase.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.ManagerTermBase.device>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:3
#: isaaclab.managers.manager_base.ManagerTermBase.__init__:3 of
msgid "The configuration object."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.reset:3
#: isaaclab.managers.manager_base.ManagerTermBase.reset:3
#: isaaclab.managers.recorder_manager.RecorderManager.add_to_episodes:8
#: isaaclab.managers.recorder_manager.RecorderManager.export_episodes:3
#: isaaclab.managers.recorder_manager.RecorderManager.reset:3
#: isaaclab.managers.recorder_manager.RecorderManager.set_success_to_episodes:3
#: isaaclab.managers.termination_manager.TerminationManager.reset:3 of
msgid ""
"The environment ids. Defaults to None, in which case all environments are"
" considered."
msgstr ""

#: isaaclab.managers.ManagerTermBaseCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`func <isaaclab.managers.ManagerTermBaseCfg.func>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.ManagerTermBaseCfg.func:1
#: isaaclab.managers.ManagerTermBaseCfg.func:1:<autosummary>:1 of
msgid "The function or class to be called for the term."
msgstr ""

#: isaaclab.managers.ManagerTermBaseCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`params <isaaclab.managers.ManagerTermBaseCfg.params>`\\"
msgstr ""

#: isaaclab.managers.CurriculumTermCfg.func:1:<autosummary>:1
#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1
#: isaaclab.managers.ManagerTermBaseCfg.func:1:<autosummary>:1
#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1
#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid "The parameters to be passed to the function as keyword arguments."
msgstr ""

#: ../../docstring isaaclab.managers.ManagerTermBaseCfg.func:3 of
msgid ""
"The function must take the environment object as the first argument. The "
"remaining arguments are specified in the :attr:`params` attribute."
msgstr ""

#: ../../docstring isaaclab.managers.ManagerTermBaseCfg.func:6 of
msgid ""
"It also supports `callable classes`_, i.e. classes that implement the "
":meth:`__call__` method. In this case, the class should inherit from the "
":class:`ManagerTermBase` class and implement the required methods."
msgstr ""

#: ../../docstring isaaclab.managers.CurriculumTermCfg.params:1
#: isaaclab.managers.EventTermCfg.params:1
#: isaaclab.managers.ManagerTermBaseCfg.params:1
#: isaaclab.managers.ObservationTermCfg.params:1
#: isaaclab.managers.TerminationTermCfg.params:1 of
msgid ""
"The parameters to be passed to the function as keyword arguments. "
"Defaults to an empty dict."
msgstr ""

#: ../../docstring isaaclab.managers.CurriculumTermCfg.params:4
#: isaaclab.managers.EventTermCfg.params:4
#: isaaclab.managers.ManagerTermBaseCfg.params:4
#: isaaclab.managers.ObservationTermCfg.params:4
#: isaaclab.managers.TerminationTermCfg.params:4 of
msgid ""
"If the value is a :class:`SceneEntityCfg` object, the manager will query "
"the scene entity from the :class:`InteractiveScene` and process the "
"entity's joints and bodies as specified in the :class:`SceneEntityCfg` "
"object."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:55
msgid "Observation Manager"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1
#: isaaclab.managers.event_manager.EventManager:1
#: isaaclab.managers.observation_manager.ObservationManager:1
#: isaaclab.managers.recorder_manager.RecorderManager:1
#: isaaclab.managers.reward_manager.RewardManager:1
#: isaaclab.managers.termination_manager.TerminationManager:1 of
msgid "基类：:py:class:`~isaaclab.managers.manager_base.ManagerBase`"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:3 of
msgid ""
"Observations are organized into groups based on their intended usage. "
"This allows having different observation groups for different types of "
"learning such as asymmetric actor-critic and student-teacher training. "
"Each group contains observation terms which contain information about the"
" observation function to call, the noise corruption model to use, and the"
" sensor to retrieve data from."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:8 of
msgid ""
"Each observation group should inherit from the "
":class:`ObservationGroupCfg` class. Within each group, each observation "
"term should instantiate the :class:`ObservationTermCfg` class. Based on "
"the configuration, the observations in a group can be concatenated into a"
" single tensor or returned as a dictionary with keys corresponding to the"
" term's name."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:13 of
msgid ""
"If the observations in a group are concatenated, the shape of the "
"concatenated tensor is computed based on the shapes of the individual "
"observation terms. This information is stored in the "
":attr:`group_obs_dim` dictionary with keys as the group names and values "
"as the shape of the observation tensor. When the terms in a group are not"
" concatenated, the attribute stores a list of shapes for each term in the"
" group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:19 of
msgid ""
"When the observation terms in a group do not have the same shape, the "
"observation terms cannot be concatenated. In this case, please set the "
":attr:`ObservationGroupCfg.concatenate_terms` attribute in the group "
"configuration to False."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:23 of
msgid ""
"Observations can also have history. This means a running history is "
"updated per sim step. History can be controlled per "
":class:`ObservationTermCfg` (See the "
":attr:`ObservationTermCfg.history_length` and "
":attr:`ObservationTermCfg.flatten_history_dim`). History can also be "
"controlled via :class:`ObservationGroupCfg` where group configuration "
"overwrites per term configuration if set. History follows an oldest to "
"newest ordering."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:28 of
msgid ""
"The observation manager can be used to compute observations for all the "
"groups or for a specific group. The observations are computed by calling "
"the registered functions for each term in the group. The functions are "
"called in the order of the terms in the group. The functions are expected"
" to return a tensor with shape (num_envs, ...)."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:33 of
msgid ""
"If a noise model or custom modifier is registered for a term, the "
"function is called to corrupt the observation. The corruption function is"
" expected to return a tensor with the same shape as the observation. The "
"observations are clipped and scaled as per the configuration settings."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`__init__ <isaaclab.managers.ObservationManager.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid "Initialize observation manager."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.ObservationManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`reset <isaaclab.managers.ObservationManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ":py:obj:`compute <isaaclab.managers.ObservationManager.compute>`\\ \\(\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid "Compute the observations per group for all groups."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`compute_group "
"<isaaclab.managers.ObservationManager.compute_group>`\\ "
"\\(group\\_name\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:1
#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid "Computes the observations for a given group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`find_terms <isaaclab.managers.ObservationManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`active_terms "
"<isaaclab.managers.ObservationManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.ObservationManager.active_terms:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid "Name of active observation terms in each group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`group_obs_dim "
"<isaaclab.managers.ObservationManager.group_obs_dim>`\\"
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_dim:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid "Shape of computed observations in each group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`group_obs_term_dim "
"<isaaclab.managers.ObservationManager.group_obs_term_dim>`\\"
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_term_dim:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid "Shape of individual observation terms in each group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`group_obs_concatenate "
"<isaaclab.managers.ObservationManager.group_obs_concatenate>`\\"
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_concatenate:1
#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid "Whether the observation terms are concatenated in each group or not."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`device <isaaclab.managers.ObservationManager.device>`\\"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`num_envs <isaaclab.managers.ObservationManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:3 of
msgid ""
"The configuration object or dictionary (``dict[str, "
"ObservationGroupCfg]``)."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:6
#: isaaclab.managers.observation_manager.ObservationManager.__init__:6 of
msgid "If the configuration is None."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.__init__:7 of
msgid ""
"If the shapes of the observation terms in a group are not compatible for "
"concatenation     and the :attr:`~ObservationGroupCfg.concatenate_terms` "
"attribute is set to True."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_active_iterable_terms:5
#: isaaclab.managers.command_manager.CommandManager.get_active_iterable_terms:5
#: isaaclab.managers.curriculum_manager.CurriculumManager.get_active_iterable_terms:5
#: isaaclab.managers.observation_manager.ObservationManager.get_active_iterable_terms:5
#: isaaclab.managers.reward_manager.RewardManager.get_active_iterable_terms:5
#: isaaclab.managers.termination_manager.TerminationManager.get_active_iterable_terms:5
#: of
msgid "The specific environment to pull the active terms from."
msgstr ""

#: isaaclab.managers.ObservationManager.active_terms:3 of
msgid ""
"The keys are the group names and the values are the list of observation "
"term names in the group."
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_dim:3 of
msgid ""
"The key is the group name and the value is the shape of the observation "
"tensor. If the terms in the group are concatenated, the value is a single"
" tuple representing the shape of the concatenated observation tensor. "
"Otherwise, the value is a list of tuples, where each tuple represents the"
" shape of the observation tensor for a term in the group."
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_term_dim:3 of
msgid ""
"The key is the group name and the value is a list of tuples representing "
"the shape of the observation terms in the group. The order of the tuples "
"corresponds to the order of the terms in the group. This matches the "
"order of the terms in the :attr:`active_terms`."
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_concatenate:3 of
msgid ""
"The key is the group name and the value is a boolean specifying whether "
"the observation terms in the group are concatenated into a single tensor."
" If True, the observations are concatenated along the last dimension."
msgstr ""

#: isaaclab.managers.ObservationManager.group_obs_concatenate:6 of
msgid ""
"The values are set based on the "
":attr:`~ObservationGroupCfg.concatenate_terms` attribute in the group "
"configuration."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute:3 of
msgid ""
"The method computes the observations for all the groups handled by the "
"observation manager. Please check the :meth:`compute_group` on the "
"processing of observations per group."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute:6 of
msgid ""
"A dictionary with keys as the group names and values as the computed "
"observations. The observations are either concatenated into a single "
"tensor or returned as a dictionary with keys corresponding to the term's "
"name."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:3 of
msgid ""
"The observations for a given group are computed by calling the registered"
" functions for each term in the group. The functions are called in the "
"order of the terms in the group. The functions are expected to return a "
"tensor with shape (num_envs, ...)."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:7 of
msgid "The following steps are performed for each observation term:"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:9 of
msgid "Compute observation term by calling the function"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:10 of
msgid ""
"Apply custom modifiers in the order specified in "
":attr:`ObservationTermCfg.modifiers`"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:11 of
msgid "Apply corruption/noise model based on :attr:`ObservationTermCfg.noise`"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:12 of
msgid "Apply clipping based on :attr:`ObservationTermCfg.clip`"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:13 of
msgid "Apply scaling based on :attr:`ObservationTermCfg.scale`"
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:15 of
msgid ""
"We apply noise to the computed term first to maintain the integrity of "
"how noise affects the data as it truly exists in the real world. If the "
"noise is applied after clipping or scaling, the noise could be "
"artificially constrained or amplified, which might misrepresent how noise"
" naturally occurs in the data."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:20 of
msgid ""
"The name of the group for which to compute the observations. Defaults to "
"None, in which case observations for all the groups are computed and "
"returned."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:23 of
msgid ""
"Depending on the group's configuration, the tensors for individual "
"observation terms are concatenated along the last dimension into a single"
" tensor. Otherwise, they are returned as a dictionary with keys "
"corresponding to the term's name."
msgstr ""

#: isaaclab.managers.observation_manager.ObservationManager.compute_group:27 of
msgid "If input ``group_name`` is not a valid group handled by the manager."
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid ""
":py:obj:`concatenate_terms "
"<isaaclab.managers.ObservationGroupCfg.concatenate_terms>`\\"
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid "Whether to concatenate the observation terms in the group."
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid ""
":py:obj:`enable_corruption "
"<isaaclab.managers.ObservationGroupCfg.enable_corruption>`\\"
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid "Whether to enable corruption for the observation group."
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid ""
":py:obj:`history_length "
"<isaaclab.managers.ObservationGroupCfg.history_length>`\\"
msgstr ""

#: ../../docstring
#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1
#: isaaclab.managers.ObservationGroupCfg.history_length:1 of
msgid ""
"Number of past observation to store in the observation buffers for all "
"observation terms in group."
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid ""
":py:obj:`flatten_history_dim "
"<isaaclab.managers.ObservationGroupCfg.flatten_history_dim>`\\"
msgstr ""

#: isaaclab.managers.ObservationGroupCfg.concatenate_terms:1:<autosummary>:1 of
msgid ""
"Flag to flatten history-based observation terms to a 2D (num_env, D) "
"tensor for all observation terms in group."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.concatenate_terms:1 of
msgid ""
"Whether to concatenate the observation terms in the group. Defaults to "
"True."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.concatenate_terms:3 of
msgid ""
"If true, the observation terms in the group are concatenated along the "
"last dimension. Otherwise, they are kept separate and returned as a "
"dictionary."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.concatenate_terms:6 of
msgid ""
"If the observation group contains terms of different dimensions, it must "
"be set to False."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.enable_corruption:1 of
msgid "Whether to enable corruption for the observation group. Defaults to False."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.enable_corruption:3 of
msgid ""
"If true, the observation terms in the group are corrupted by adding noise"
" (if specified). Otherwise, no corruption is applied."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.history_length:3 of
msgid ""
"This parameter will override :attr:`ObservationTermCfg.history_length` if"
" set. Defaults to None. If None, each terms history will be controlled on"
" a per term basis. See :class:`ObservationTermCfg` for details on "
"history_length implementation."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.flatten_history_dim:1
#: of
msgid ""
"Flag to flatten history-based observation terms to a 2D (num_env, D) "
"tensor for all observation terms in group. Defaults to True."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationGroupCfg.flatten_history_dim:4
#: of
msgid ""
"This parameter will override all "
":attr:`ObservationTermCfg.flatten_history_dim` in the group if "
"ObservationGroupCfg.history_length is set."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`func <isaaclab.managers.ObservationTermCfg.func>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.CurriculumTermCfg.func:1
#: isaaclab.managers.CurriculumTermCfg.func:1:<autosummary>:1
#: isaaclab.managers.EventTermCfg.func:1
#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1
#: isaaclab.managers.ObservationTermCfg.func:1
#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1
#: isaaclab.managers.TerminationTermCfg.func:1
#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid "The name of the function to be called."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`modifiers <isaaclab.managers.ObservationTermCfg.modifiers>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid "The list of data modifiers to apply to the observation in order."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`noise <isaaclab.managers.ObservationTermCfg.noise>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid "The noise to add to the observation."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`clip <isaaclab.managers.ObservationTermCfg.clip>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid "The clipping range for the observation after adding noise."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`scale <isaaclab.managers.ObservationTermCfg.scale>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid "The scale to apply to the observation after clipping."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ""
":py:obj:`history_length "
"<isaaclab.managers.ObservationTermCfg.history_length>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid "Number of past observations to store in the observation buffers."
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`params <isaaclab.managers.ObservationTermCfg.params>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ""
":py:obj:`flatten_history_dim "
"<isaaclab.managers.ObservationTermCfg.flatten_history_dim>`\\"
msgstr ""

#: isaaclab.managers.ObservationTermCfg.func:1:<autosummary>:1 of
msgid ""
"Whether or not the observation manager should flatten history-based "
"observation terms to a 2D (N, D) tensor."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.func:3 of
msgid ""
"This function should take the environment object and any other parameters"
" as input and return the observation signal as torch float tensors of "
"shape (num_envs, obs_term_dim)."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.modifiers:1 of
msgid ""
"The list of data modifiers to apply to the observation in order. Defaults"
" to None, in which case no modifications will be applied."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.modifiers:4 of
msgid ""
"Modifiers are applied in the order they are specified in the list. They "
"can be stateless or stateful, and can be used to apply transformations to"
" the observation data. For example, a modifier can be used to normalize "
"the observation data or to apply a rolling average."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.modifiers:8 of
msgid ""
"For more information on modifiers, see the "
":class:`~isaaclab.utils.modifiers.ModifierCfg` class."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.noise:1 of
msgid ""
"The noise to add to the observation. Defaults to None, in which case no "
"noise is added."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.clip:1 of
msgid ""
"The clipping range for the observation after adding noise. Defaults to "
"None, in which case no clipping is applied."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.scale:1 of
msgid ""
"The scale to apply to the observation after clipping. Defaults to None, "
"in which case no scaling is applied (same as setting scale to :obj:`1`)."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.scale:4 of
msgid ""
"We leverage PyTorch broadcasting to scale the observation tensor with the"
" provided value. If a tuple is provided, please make sure the length of "
"the tuple matches the dimensions of the tensor outputted from the term."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.history_length:1 of
msgid ""
"Number of past observations to store in the observation buffers. Defaults"
" to 0, meaning no history."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.history_length:3 of
msgid ""
"Observation history initializes to empty, but is filled with the first "
"append after reset or initialization. Subsequent history only adds a "
"single entry to the history buffer. If flatten_history_dim is set to "
"True, the source data of shape (N, H, D, ...) where N is the batch "
"dimension and H is the history length will be reshaped to a 2D tensor of "
"shape (N, H*D*...). Otherwise, the data will be returned as is."
msgstr ""

#: ../../docstring isaaclab.managers.ObservationTermCfg.flatten_history_dim:1
#: of
msgid ""
"Whether or not the observation manager should flatten history-based "
"observation terms to a 2D (N, D) tensor. Defaults to True."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:71
msgid "Action Manager"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:3 of
msgid ""
"The action manager handles the interpretation and application of user-"
"defined actions on a given world. It is comprised of different action "
"terms that decide the dimension of the expected actions."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:7 of
msgid "The action manager performs operations at two stages:"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:9 of
msgid ""
"processing of actions: It splits the input actions to each term and "
"performs any pre-processing needed. This should be called once at every "
"environment step."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:11 of
msgid ""
"apply actions: This operation typically sets the processed actions into "
"the assets in the scene (such as robots). It should be called before "
"every simulation step."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.ActionManager.__init__>`\\ \\(cfg\\,"
" env\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid "Initialize the action manager."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.ActionManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`set_debug_vis <isaaclab.managers.ActionManager.set_debug_vis>`\\"
" \\(debug\\_vis\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid "Sets whether to visualize the action data."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.ActionManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.reset:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid "Resets the action history."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`process_action "
"<isaaclab.managers.ActionManager.process_action>`\\ \\(action\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.process_action:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1
#: isaaclab.managers.action_manager.ActionTerm.process_actions:1
#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid "Processes the actions sent to the environment."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`apply_action <isaaclab.managers.ActionManager.apply_action>`\\ "
"\\(\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.apply_action:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid "Applies the actions to the environment/simulation."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ":py:obj:`get_term <isaaclab.managers.ActionManager.get_term>`\\ \\(name\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_term:1
#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid "Returns the action term with the specified name."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.ActionManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`total_action_dim "
"<isaaclab.managers.ActionManager.total_action_dim>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.total_action_dim:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid "Total dimension of actions."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`active_terms <isaaclab.managers.ActionManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.active_terms:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid "Name of active action terms."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`action_term_dim "
"<isaaclab.managers.ActionManager.action_term_dim>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.action_term_dim:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid "Shape of each action term."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`action <isaaclab.managers.ActionManager.action>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid "The actions sent to the environment."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`prev_action <isaaclab.managers.ActionManager.prev_action>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid "The previous actions sent to the environment."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`has_debug_vis_implementation "
"<isaaclab.managers.ActionManager.has_debug_vis_implementation>`\\"
msgstr ""

#: isaaclab.managers.ActionManager.has_debug_vis_implementation:1
#: isaaclab.managers.CommandManager.has_debug_vis_implementation:1
#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandManager.__init__:1:<autosummary>:1
#: of
msgid "Whether the command terms have debug visualization implemented."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.ActionManager.device>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.ActionManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.__init__:3 of
msgid "The configuration object or dictionary (``dict[str, ActionTermCfg]``)."
msgstr ""

#: isaaclab.managers.ActionManager.action:1 of
msgid ""
"The actions sent to the environment. Shape is (num_envs, "
"total_action_dim)."
msgstr ""

#: isaaclab.managers.ActionManager.prev_action:1 of
msgid ""
"The previous actions sent to the environment. Shape is (num_envs, "
"total_action_dim)."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.set_debug_vis:1 of
msgid ""
"Sets whether to visualize the action data. :param debug_vis: Whether to "
"visualize the action data."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.set_debug_vis:4 of
msgid ""
"Whether the debug visualization was successfully set. False if the action"
" does not support debug visualization."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.reset:6
#: isaaclab.managers.recorder_manager.RecorderManager.reset:6 of
msgid "An empty dictionary."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.process_action:3 of
msgid "This function should be called once per environment step."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.process_action:5
#: isaaclab.managers.action_manager.ActionTerm.process_actions:5 of
msgid "The actions to process."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.apply_action:3 of
msgid "This should be called at every simulation step."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_term:3 of
msgid "The name of the action term."
msgstr ""

#: isaaclab.managers.action_manager.ActionManager.get_term:5 of
msgid "The action term with the specified name."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1 of
msgid "基类：:py:class:`~isaaclab.managers.manager_base.ManagerTermBase`"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:3 of
msgid ""
"The action term is responsible for processing the raw actions sent to the"
" environment and applying them to the asset managed by the term. The "
"action term is comprised of two operations:"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:7 of
msgid ""
"Processing of actions: This operation is performed once per **environment"
" step** and is responsible for pre-processing the raw actions sent to the"
" environment."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:9 of
msgid ""
"Applying actions: This operation is performed once per **simulation "
"step** and is responsible for applying the processed actions to the asset"
" managed by the term."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.ActionTerm.__init__>`\\ \\(cfg\\, "
"env\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1
#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid "Initialize the action term."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`set_debug_vis <isaaclab.managers.ActionTerm.set_debug_vis>`\\ "
"\\(debug\\_vis\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid "Sets whether to visualize the action term data."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`process_actions "
"<isaaclab.managers.ActionTerm.process_actions>`\\ \\(actions\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`apply_actions <isaaclab.managers.ActionTerm.apply_actions>`\\ "
"\\(\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.apply_actions:1
#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid "Applies the actions to the asset managed by the term."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.ActionTerm.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ":py:obj:`action_dim <isaaclab.managers.ActionTerm.action_dim>`\\"
msgstr ""

#: isaaclab.managers.ActionTerm.action_dim:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid "Dimension of the action term."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ":py:obj:`raw_actions <isaaclab.managers.ActionTerm.raw_actions>`\\"
msgstr ""

#: isaaclab.managers.ActionTerm.raw_actions:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid "The input/raw actions sent to the term."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`processed_actions "
"<isaaclab.managers.ActionTerm.processed_actions>`\\"
msgstr ""

#: isaaclab.managers.ActionTerm.processed_actions:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid "The actions computed by the term after applying any processing."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`has_debug_vis_implementation "
"<isaaclab.managers.ActionTerm.has_debug_vis_implementation>`\\"
msgstr ""

#: isaaclab.managers.ActionTerm.has_debug_vis_implementation:1
#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid "Whether the action term has a debug visualization implemented."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.ActionTerm.device>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.ActionTerm.num_envs>`\\"
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.set_debug_vis:1 of
msgid ""
"Sets whether to visualize the action term data. :param debug_vis: Whether"
" to visualize the action term data."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.set_debug_vis:4 of
msgid ""
"Whether the debug visualization was successfully set. False if the action"
" term does not support debug visualization."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.process_actions:3 of
msgid "This function is called once per environment step by the manager."
msgstr ""

#: isaaclab.managers.action_manager.ActionTerm.apply_actions:3 of
msgid "This is called at every simulation step by the manager."
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid ":py:obj:`class_type <isaaclab.managers.ActionTermCfg.class_type>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.class_type:1
#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid "The associated action term class."
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid ":py:obj:`asset_name <isaaclab.managers.ActionTermCfg.asset_name>`\\"
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid ":py:obj:`debug_vis <isaaclab.managers.ActionTermCfg.debug_vis>`\\"
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1
#: isaaclab.managers.CommandTermCfg.resampling_time_range:1:<autosummary>:1 of
msgid "Whether to visualize debug information."
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid ":py:obj:`clip <isaaclab.managers.ActionTermCfg.clip>`\\"
msgstr ""

#: isaaclab.managers.ActionTermCfg.class_type:1:<autosummary>:1 of
msgid "Clip range for the action (dict of regex expressions)."
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.class_type:3 of
msgid ""
"The class should inherit from "
":class:`isaaclab.managers.action_manager.ActionTerm`."
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.debug_vis:1
#: isaaclab.managers.CommandTermCfg.debug_vis:1 of
msgid "Whether to visualize debug information. Defaults to False."
msgstr ""

#: ../../docstring isaaclab.managers.ActionTermCfg.clip:1 of
msgid "Clip range for the action (dict of regex expressions). Defaults to None."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:88
msgid "Event Manager"
msgstr ""

#: isaaclab.managers.event_manager.EventManager:3 of
msgid ""
"The event manager applies operations to the environment based on "
"different simulation events. For example, changing the masses of objects "
"or their friction coefficients during initialization/ reset, or applying "
"random pushes to the robot at a fixed interval of steps. The user can "
"specify several modes of events to fine-tune the behavior based on when "
"to apply the event."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:8 of
msgid ""
"The event terms are parsed from a config class containing the manager's "
"settings and each term's parameters. Each event term should instantiate "
"the :class:`EventTermCfg` class."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:11 of
msgid ""
"Event terms can be grouped by their mode. The mode is a user-defined "
"string that specifies when the event term should be applied. This "
"provides the user complete control over when event terms should be "
"applied."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:15 of
msgid ""
"For a typical training process, you may want to apply events in the "
"following modes:"
msgstr ""

#: isaaclab.managers.event_manager.EventManager:17 of
msgid ""
"\"prestartup\": Event is applied once at the beginning of the training "
"before the simulation starts. This is used to randomize USD-level "
"properties of the simulation stage."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:19 of
msgid ""
"\"startup\": Event is applied once at the beginning of the training once "
"simulation is started."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:20 of
msgid "\"reset\": Event is applied at every reset."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:21 of
msgid "\"interval\": Event is applied at pre-specified intervals of time."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:23 of
msgid ""
"However, you can also define your own modes and use them in the training "
"process as you see fit. For this you will need to add the triggering of "
"that mode in the environment implementation as well."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:28 of
msgid ""
"The triggering of operations corresponding to the mode ``\"interval\"`` "
"are the only mode that are directly handled by the manager itself. The "
"other modes are handled by the environment implementation."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.EventManager.__init__>`\\ \\(cfg\\, "
"env\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid "Initialize the event manager."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.EventManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`apply <isaaclab.managers.EventManager.apply>`\\ \\(mode\\[\\, "
"env\\_ids\\, dt\\, global\\_env\\_step\\_count\\]\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid "Calls each event term in the specified mode."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`set_term_cfg <isaaclab.managers.EventManager.set_term_cfg>`\\ "
"\\(term\\_name\\, cfg\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.set_term_cfg:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Sets the configuration of the specified term into the manager."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_term_cfg <isaaclab.managers.EventManager.get_term_cfg>`\\ "
"\\(term\\_name\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.get_term_cfg:1
#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1
#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Gets the configuration for the specified term."
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.EventManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.EventManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`active_terms <isaaclab.managers.EventManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.EventManager.active_terms:1
#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid "Name of active event terms."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid ""
":py:obj:`available_modes "
"<isaaclab.managers.EventManager.available_modes>`\\"
msgstr ""

#: isaaclab.managers.EventManager.available_modes:1
#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid "Modes of events."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.EventManager.device>`\\"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.EventManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.event_manager.EventManager.__init__:3 of
msgid "A configuration object or dictionary (``dict[str, EventTermCfg]``)."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:4
#: isaaclab.managers.event_manager.EventManager.__init__:4
#: isaaclab.managers.termination_manager.TerminationManager.__init__:4 of
msgid "An environment object."
msgstr ""

#: isaaclab.managers.EventManager.active_terms:3 of
msgid ""
"The keys are the modes of event and the values are the names of the event"
" terms."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:3 of
msgid ""
"This function iterates over all the event terms in the specified mode and"
" calls the function corresponding to the term. The function is called "
"with the environment instance and the environment indices to apply the "
"event to."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:7 of
msgid ""
"For the \"interval\" mode, the function is called when the time interval "
"has passed. This requires specifying the time step of the environment."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:10 of
msgid ""
"For the \"reset\" mode, the function is called when the mode is \"reset\""
" and the total number of environment steps that have happened since the "
"last trigger of the function is equal to its configured parameter for the"
" number of environment steps between resets."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:14 of
msgid "The mode of event."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:15 of
msgid ""
"The indices of the environments to apply the event to. Defaults to None, "
"in which case the event is applied to all environments when applicable."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:17 of
msgid ""
"The time step of the environment. This is only used for the \"interval\" "
"mode. Defaults to None to simplify the call for other modes."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:19 of
msgid ""
"The total number of environment steps that have happened. This is only "
"used for the \"reset\" mode. Defaults to None to simplify the call for "
"other modes."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:22 of
msgid "If the mode is ``\"interval\"`` and the time step is not provided."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:23 of
msgid ""
"If the mode is ``\"interval\"`` and the environment indices are provided."
" This is an undefined     behavior as the environment indices are "
"computed based on the time left for each environment."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.apply:24 of
msgid ""
"If the mode is ``\"reset\"`` and the total number of environment steps "
"that have happened     is not provided."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.set_term_cfg:3 of
msgid ""
"The method finds the term by name by searching through all the modes. It "
"then updates the configuration of the term with the first matching name."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.get_term_cfg:6
#: isaaclab.managers.event_manager.EventManager.set_term_cfg:6 of
msgid "The name of the event term."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.set_term_cfg:7 of
msgid "The configuration for the event term."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.get_term_cfg:10
#: isaaclab.managers.event_manager.EventManager.set_term_cfg:9
#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg:7
#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg:6
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg:7
#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg:6 of
msgid "If the term name is not found."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.get_term_cfg:3 of
msgid ""
"The method finds the term by name by searching through all the modes. It "
"then returns the configuration of the term with the first matching name."
msgstr ""

#: isaaclab.managers.event_manager.EventManager.get_term_cfg:8 of
msgid "The configuration of the event term."
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`params <isaaclab.managers.EventTermCfg.params>`\\"
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`func <isaaclab.managers.EventTermCfg.func>`\\"
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`mode <isaaclab.managers.EventTermCfg.mode>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.mode:1
#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid "The mode in which the event term is applied."
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ""
":py:obj:`interval_range_s "
"<isaaclab.managers.EventTermCfg.interval_range_s>`\\"
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid "The range of time in seconds at which the term is applied."
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`is_global_time <isaaclab.managers.EventTermCfg.is_global_time>`\\"
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid "Whether randomization should be tracked on a per-environment basis."
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ""
":py:obj:`min_step_count_between_reset "
"<isaaclab.managers.EventTermCfg.min_step_count_between_reset>`\\"
msgstr ""

#: isaaclab.managers.EventTermCfg.params:1:<autosummary>:1 of
msgid ""
"The number of environment steps after which the term is applied since its"
" last application."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.func:3 of
msgid ""
"This function should take the environment object, environment indices and"
" any other parameters as input."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.mode:5 of
msgid ""
"The mode name ``\"interval\"`` is a special mode that is handled by the "
"manager Hence, its name is reserved and cannot be used for other modes."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.interval_range_s:1 of
msgid ""
"The range of time in seconds at which the term is applied. Defaults to "
"None."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.interval_range_s:3 of
msgid ""
"Based on this, the interval is sampled uniformly between the specified "
"range for each environment instance. The term is applied on the "
"environment instances where the current time hits the interval time."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.interval_range_s:7
#: isaaclab.managers.EventTermCfg.is_global_time:7 of
msgid "This is only used if the mode is ``\"interval\"``."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.is_global_time:1 of
msgid ""
"Whether randomization should be tracked on a per-environment basis. "
"Defaults to False."
msgstr ""

#: ../../docstring isaaclab.managers.EventTermCfg.is_global_time:3 of
msgid ""
"If True, the same interval time is used for all the environment "
"instances. If False, the interval time is sampled independently for each "
"environment instance and the term is applied when the current time hits "
"the interval time for that instance."
msgstr ""

#: ../../docstring
#: isaaclab.managers.EventTermCfg.min_step_count_between_reset:1 of
msgid ""
"The number of environment steps after which the term is applied since its"
" last application. Defaults to 0."
msgstr ""

#: ../../docstring
#: isaaclab.managers.EventTermCfg.min_step_count_between_reset:3 of
msgid ""
"When the mode is \"reset\", the term is only applied if the number of "
"environment steps since its last application exceeds this quantity. This "
"helps to avoid calling the term too often, thereby improving performance."
msgstr ""

#: ../../docstring
#: isaaclab.managers.EventTermCfg.min_step_count_between_reset:7 of
msgid ""
"If the value is zero, the term is applied on every call to the manager "
"with the mode \"reset\"."
msgstr ""

#: ../../docstring
#: isaaclab.managers.EventTermCfg.min_step_count_between_reset:9 of
msgid "This is only used if the mode is ``\"reset\"``."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:101
msgid "Command Manager"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:3 of
msgid ""
"The command manager is used to generate commands for an agent to execute."
" It makes it convenient to switch between different command generation "
"strategies within the same environment. For instance, in an environment "
"consisting of a quadrupedal robot, the command to it could be a velocity "
"command or position command. By keeping the command generation logic "
"separate from the environment, it is easy to switch between different "
"command generation strategies."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:9 of
msgid ""
"The command terms are implemented as classes that inherit from the "
":class:`CommandTerm` class. Each command generator term should also have "
"a corresponding configuration class that inherits from the "
":class:`CommandTermCfg` class."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.CommandManager.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.__init__:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid "Initialize the command manager."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.CommandManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`set_debug_vis "
"<isaaclab.managers.CommandManager.set_debug_vis>`\\ \\(debug\\_vis\\)"
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandManager.set_debug_vis:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandTerm.set_debug_vis:1 of
msgid "Sets whether to visualize the command data."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.CommandManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.reset:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid "Reset the command terms and log their metrics."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ":py:obj:`compute <isaaclab.managers.CommandManager.compute>`\\ \\(dt\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.compute:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid "Updates the commands."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_command <isaaclab.managers.CommandManager.get_command>`\\ "
"\\(name\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.get_command:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid "Returns the command for the specified command term."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_term <isaaclab.managers.CommandManager.get_term>`\\ "
"\\(name\\)"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.get_term:1
#: isaaclab.managers.command_manager.CommandManager:1:<autosummary>:1 of
msgid "Returns the command term with the specified name."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`active_terms <isaaclab.managers.CommandManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.CommandManager.active_terms:1
#: isaaclab.managers.command_manager.CommandManager.__init__:1:<autosummary>:1
#: of
msgid "Name of active command terms."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`has_debug_vis_implementation "
"<isaaclab.managers.CommandManager.has_debug_vis_implementation>`\\"
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.__init__:3 of
msgid "The configuration object or dictionary (``dict[str, CommandTermCfg]``)."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.set_debug_vis:3
#: isaaclab.managers.command_manager.CommandTerm.set_debug_vis:3 of
msgid "Whether to visualize the command data."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.set_debug_vis:5
#: isaaclab.managers.command_manager.CommandTerm.set_debug_vis:5 of
msgid ""
"Whether the debug visualization was successfully set. False if the "
"command generator does not support debug visualization."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.reset:3 of
msgid ""
"This function resets the command counter and resamples the command for "
"each term. It should be called at the beginning of each episode."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.reset:6
#: isaaclab.managers.command_manager.CommandTerm.reset:6 of
msgid "The list of environment IDs to reset. Defaults to None."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.reset:8 of
#, python-brace-format
msgid ""
"A dictionary containing the information to log under the "
"\"Metrics/{term_name}/{metric_name}\" key."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.compute:3 of
msgid "This function calls each command term managed by the class."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.compute:5
#: isaaclab.managers.reward_manager.RewardManager.compute:6 of
msgid "The time-step interval of the environment."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.get_command:3
#: isaaclab.managers.command_manager.CommandManager.get_term:3 of
msgid "The name of the command term."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.get_command:5 of
msgid "The command tensor of the specified command term."
msgstr ""

#: isaaclab.managers.command_manager.CommandManager.get_term:5 of
msgid "The command term with the specified name."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm:3 of
msgid ""
"A command term is used to generate commands for goal-conditioned tasks. "
"For example, in the case of a goal-conditioned navigation task, the "
"command term can be used to generate a target position for the robot to "
"navigate to."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm:7 of
msgid ""
"It implements a resampling mechanism that allows the command to be "
"resampled at a fixed frequency. The resampling frequency can be specified"
" in the configuration object. Additionally, it is possible to assign a "
"visualization function to the command term that can be used to visualize "
"the command in the simulator."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm:1:<autosummary>:1 of
msgid ":py:obj:`command <isaaclab.managers.CommandTerm.command>`\\"
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm:1:<autosummary>:1 of
msgid "The command tensor."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm:1:<autosummary>:1 of
msgid ""
":py:obj:`has_debug_vis_implementation "
"<isaaclab.managers.CommandTerm.has_debug_vis_implementation>`\\"
msgstr ""

#: isaaclab.managers.CommandTerm.has_debug_vis_implementation:1
#: isaaclab.managers.command_manager.CommandTerm:1:<autosummary>:1 of
msgid "Whether the command generator has a debug visualization implemented."
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1 of
msgid ""
":py:obj:`set_debug_vis <isaaclab.managers.CommandTerm.set_debug_vis>`\\ "
"\\(debug\\_vis\\)"
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.CommandTerm.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandTerm.reset:1 of
msgid "Reset the command generator and log metrics."
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1 of
msgid ":py:obj:`compute <isaaclab.managers.CommandTerm.compute>`\\ \\(dt\\)"
msgstr ""

#: isaaclab.managers.CommandTerm.command:1:<autosummary>:1
#: isaaclab.managers.command_manager.CommandTerm.compute:1 of
msgid "Compute the command."
msgstr ""

#: isaaclab.managers.CommandTerm.command:1 of
msgid "The command tensor. Shape is (num_envs, command_dim)."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm.reset:3 of
msgid ""
"This function resets the command counter and resamples the command. It "
"should be called at the beginning of each episode."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm.reset:8 of
#, python-brace-format
msgid "A dictionary containing the information to log under the \"{name}\" key."
msgstr ""

#: isaaclab.managers.command_manager.CommandTerm.compute:3 of
msgid "The time step passed since the last call to compute."
msgstr ""

#: isaaclab.managers.CommandTermCfg.resampling_time_range:1:<autosummary>:1 of
msgid ""
":py:obj:`resampling_time_range "
"<isaaclab.managers.CommandTermCfg.resampling_time_range>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.CommandTermCfg.resampling_time_range:1
#: isaaclab.managers.CommandTermCfg.resampling_time_range:1:<autosummary>:1 of
msgid "Time before commands are changed [s]."
msgstr ""

#: isaaclab.managers.CommandTermCfg.resampling_time_range:1:<autosummary>:1 of
msgid ":py:obj:`debug_vis <isaaclab.managers.CommandTermCfg.debug_vis>`\\"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:116
msgid "Reward Manager"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:3 of
msgid ""
"The reward manager computes the total reward as a sum of the weighted "
"reward terms. The reward terms are parsed from a nested config class "
"containing the reward manger's settings and reward terms configuration."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:7 of
msgid ""
"The reward terms are parsed from a config class containing the manager's "
"settings and each term's parameters. Each reward term should instantiate "
"the :class:`RewardTermCfg` class."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:12 of
msgid ""
"The reward manager multiplies the reward term's ``weight``  with the "
"time-step interval ``dt`` of the environment. This is done to ensure that"
" the computed reward terms are balanced with respect to the chosen time-"
"step interval in the environment."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.RewardManager.__init__>`\\ \\(cfg\\,"
" env\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.__init__:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid "Initialize the reward manager."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.RewardManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.reset:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid "Returns the episodic sum of individual reward terms."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ":py:obj:`compute <isaaclab.managers.RewardManager.compute>`\\ \\(dt\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.compute:1
#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid "Computes the reward signal as a weighted sum of individual terms."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`set_term_cfg <isaaclab.managers.RewardManager.set_term_cfg>`\\ "
"\\(term\\_name\\, cfg\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_term_cfg <isaaclab.managers.RewardManager.get_term_cfg>`\\ "
"\\(term\\_name\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.RewardManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.RewardManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`active_terms <isaaclab.managers.RewardManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.RewardManager.active_terms:1
#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1 of
msgid "Name of active reward terms."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`device <isaaclab.managers.RewardManager.device>`\\"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.__init__:1:<autosummary>:1 of
msgid ":py:obj:`num_envs <isaaclab.managers.RewardManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.__init__:3 of
msgid "The configuration object or dictionary (``dict[str, RewardTermCfg]``)."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.reset:3 of
msgid ""
"The environment ids for which the episodic sum of individual reward terms"
" is to be returned. Defaults to all the environment ids."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.reset:6
#: isaaclab.managers.termination_manager.TerminationManager.reset:6 of
msgid "Dictionary of episodic sum of individual reward terms."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.compute:3 of
msgid ""
"This function calls each reward term managed by the class and adds them "
"to compute the net reward signal. It also updates the episodic sums "
"corresponding to individual reward terms."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.compute:8 of
msgid "The net reward signal of shape (num_envs,)."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg:3
#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg:3 of
msgid "The name of the reward term."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.set_term_cfg:4 of
msgid "The configuration for the reward term."
msgstr ""

#: isaaclab.managers.reward_manager.RewardManager.get_term_cfg:5 of
msgid "The configuration of the reward term."
msgstr ""

#: isaaclab.managers.RewardTermCfg.__new__:1:<autosummary>:1 of
msgid ""
":py:obj:`__new__ <isaaclab.managers.RewardTermCfg.__new__>`\\ "
"\\(\\*\\*kwargs\\)"
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:127
msgid "Termination Manager"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:3 of
msgid ""
"The termination manager computes the termination signal (also called "
"dones) as a combination of termination terms. Each termination term is a "
"function which takes the environment as an argument and returns a boolean"
" tensor of shape (num_envs,). The termination manager computes the "
"termination signal as the union (logical or) of all the termination "
"terms."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:8 of
msgid ""
"Following the `Gymnasium API "
"<https://gymnasium.farama.org/tutorials/gymnasium_basics/handling_time_limits/>`_,"
" the termination signal is computed as the logical OR of the following "
"signals:"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:11 of
msgid ""
"**Time-out**: This signal is set to true if the environment has ended "
"after an externally defined condition (that is outside the scope of a "
"MDP). For example, the environment may be terminated if the episode has "
"timed out (i.e. reached max episode length)."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:14 of
msgid ""
"**Terminated**: This signal is set to true if the environment has reached"
" a terminal state defined by the environment. This state may correspond "
"to task success, task failure, robot falling, etc."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:17 of
msgid ""
"These signals can be individually accessed using the :attr:`time_outs` "
"and :attr:`terminated` properties."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:19 of
msgid ""
"The termination terms are parsed from a config class containing the "
"manager's settings and each term's parameters. Each termination term "
"should instantiate the :class:`TerminationTermCfg` class. The term's "
"configuration :attr:`TerminationTermCfg.time_out` decides whether the "
"term is a timeout or a termination term."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`__init__ <isaaclab.managers.TerminationManager.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Initializes the termination manager."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`reset <isaaclab.managers.TerminationManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.reset:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Returns the episodic counts of individual termination terms."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ":py:obj:`compute <isaaclab.managers.TerminationManager.compute>`\\ \\(\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.compute:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Computes the termination signal as union of individual terms."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_term <isaaclab.managers.TerminationManager.get_term>`\\ "
"\\(name\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.get_term:1
#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid "Returns the termination term with the specified name."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.TerminationManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`set_term_cfg "
"<isaaclab.managers.TerminationManager.set_term_cfg>`\\ \\(term\\_name\\, "
"cfg\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_term_cfg "
"<isaaclab.managers.TerminationManager.get_term_cfg>`\\ \\(term\\_name\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager:1:<autosummary>:1
#: of
msgid ""
":py:obj:`find_terms <isaaclab.managers.TerminationManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`active_terms "
"<isaaclab.managers.TerminationManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.TerminationManager.active_terms:1
#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "Name of active termination terms."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`dones <isaaclab.managers.TerminationManager.dones>`\\"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "The net termination signal."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`time_outs <isaaclab.managers.TerminationManager.time_outs>`\\"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "The timeout signal (reaching max episode length)."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`terminated <isaaclab.managers.TerminationManager.terminated>`\\"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid "The terminated signal (reaching a terminal state)."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`device <isaaclab.managers.TerminationManager.device>`\\"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`num_envs <isaaclab.managers.TerminationManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.__init__:3 of
msgid ""
"The configuration object or dictionary (``dict[str, "
"TerminationTermCfg]``)."
msgstr ""

#: isaaclab.managers.TerminationManager.dones:1 of
msgid "The net termination signal. Shape is (num_envs,)."
msgstr ""

#: isaaclab.managers.TerminationManager.time_outs:1 of
msgid "The timeout signal (reaching max episode length). Shape is (num_envs,)."
msgstr ""

#: isaaclab.managers.TerminationManager.time_outs:3 of
msgid ""
"This signal is set to true if the environment has ended after an "
"externally defined condition (that is outside the scope of a MDP). For "
"example, the environment may be terminated if the episode has timed out "
"(i.e. reached max episode length)."
msgstr ""

#: isaaclab.managers.TerminationManager.terminated:1 of
msgid "The terminated signal (reaching a terminal state). Shape is (num_envs,)."
msgstr ""

#: isaaclab.managers.TerminationManager.terminated:3 of
msgid ""
"This signal is set to true if the environment has reached a terminal "
"state defined by the environment. This state may correspond to task "
"success, task failure, robot falling, etc."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.compute:3 of
msgid ""
"This function calls each termination term managed by the class and "
"performs a logical OR operation to compute the net termination signal."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.compute:6 of
msgid "The combined termination signal of shape (num_envs,)."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.get_term:3
#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg:3
#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg:3 of
msgid "The name of the termination term."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.get_term:5 of
msgid "The corresponding termination term value. Shape is (num_envs,)."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.set_term_cfg:4 of
msgid "The configuration for the termination term."
msgstr ""

#: isaaclab.managers.termination_manager.TerminationManager.get_term_cfg:5 of
msgid "The configuration of the termination term."
msgstr ""

#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`params <isaaclab.managers.TerminationTermCfg.params>`\\"
msgstr ""

#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`func <isaaclab.managers.TerminationTermCfg.func>`\\"
msgstr ""

#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid ":py:obj:`time_out <isaaclab.managers.TerminationTermCfg.time_out>`\\"
msgstr ""

#: isaaclab.managers.TerminationTermCfg.params:1:<autosummary>:1 of
msgid "Whether the termination term contributes towards episodic timeouts."
msgstr ""

#: ../../docstring isaaclab.managers.TerminationTermCfg.func:3 of
msgid ""
"This function should take the environment object and any other parameters"
" as input and return the termination signals as torch boolean tensors of "
"shape (num_envs,)."
msgstr ""

#: ../../docstring isaaclab.managers.TerminationTermCfg.time_out:1 of
msgid ""
"Whether the termination term contributes towards episodic timeouts. "
"Defaults to False."
msgstr ""

#: ../../docstring isaaclab.managers.TerminationTermCfg.time_out:3 of
msgid "These usually correspond to tasks that have a fixed time limit."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:139
msgid "Curriculum Manager"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:3 of
msgid ""
"The curriculum manager updates various quantities of the environment "
"subject to a training curriculum by calling a list of terms. These help "
"stabilize learning by progressively making the learning tasks harder as "
"the agent improves."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:7 of
msgid ""
"The curriculum terms are parsed from a config class containing the "
"manager's settings and each term's parameters. Each curriculum term "
"should instantiate the :class:`CurriculumTermCfg` class."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.CurriculumManager.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.CurriculumManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.reset:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid "Returns the current state of individual curriculum terms."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid ""
":py:obj:`compute <isaaclab.managers.CurriculumManager.compute>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.compute:1
#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid "Update the curriculum terms."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.CurriculumManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.CurriculumManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`active_terms "
"<isaaclab.managers.CurriculumManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.CurriculumManager.active_terms:1
#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: of
msgid "Name of active curriculum terms."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`device <isaaclab.managers.CurriculumManager.device>`\\"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`num_envs <isaaclab.managers.CurriculumManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:3 of
msgid "The configuration object or dictionary (``dict[str, CurriculumTermCfg]``)"
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:6 of
msgid "If curriculum term is not of type :class:`CurriculumTermCfg`."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.__init__:7 of
msgid "If curriculum term configuration does not satisfy its function signature."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.reset:5 of
msgid ""
"This function does not use the environment indices :attr:`env_ids` and "
"logs the state of all the terms. The argument is only present to maintain"
" consistency with other classes."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.reset:9 of
msgid "Dictionary of curriculum terms and their states."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.compute:3 of
msgid "This function calls each curriculum term managed by the class."
msgstr ""

#: isaaclab.managers.curriculum_manager.CurriculumManager.compute:5 of
msgid ""
"The list of environment IDs to update. If None, all the environments are "
"updated. Defaults to None."
msgstr ""

#: isaaclab.managers.CurriculumTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`func <isaaclab.managers.CurriculumTermCfg.func>`\\"
msgstr ""

#: isaaclab.managers.CurriculumTermCfg.func:1:<autosummary>:1 of
msgid ":py:obj:`params <isaaclab.managers.CurriculumTermCfg.params>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.CurriculumTermCfg.func:3 of
msgid ""
"This function should take the environment object, environment indices and"
" any other parameters as input and return the curriculum state for "
"logging purposes. If the function returns None, the curriculum state is "
"not logged."
msgstr ""

#: ../../source/api/lab/isaaclab.managers.rst:151
msgid "Recorder Manager"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`__init__ <isaaclab.managers.RecorderManager.__init__>`\\ "
"\\(cfg\\, env\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Initialize the recorder manager."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`reset <isaaclab.managers.RecorderManager.reset>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.reset:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Resets the recorder data."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_episode <isaaclab.managers.RecorderManager.get_episode>`\\ "
"\\(env\\_id\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.get_episode:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Returns the episode data for the given environment id."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`add_to_episodes "
"<isaaclab.managers.RecorderManager.add_to_episodes>`\\ \\(key\\, "
"value\\[\\, env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.add_to_episodes:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
"Adds the given key-value pair to the episodes for the given environment "
"ids."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`set_success_to_episodes "
"<isaaclab.managers.RecorderManager.set_success_to_episodes>`\\ "
"\\(env\\_ids\\, success\\_values\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.set_success_to_episodes:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
"Sets the task success values to the episodes for the given environment "
"ids."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`find_terms <isaaclab.managers.RecorderManager.find_terms>`\\ "
"\\(name\\_keys\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`get_active_iterable_terms "
"<isaaclab.managers.RecorderManager.get_active_iterable_terms>`\\ "
"\\(env\\_idx\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`record_pre_step "
"<isaaclab.managers.RecorderManager.record_pre_step>`\\ \\(\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.record_pre_step:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Trigger recorder terms for pre-step functions."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`record_post_step "
"<isaaclab.managers.RecorderManager.record_post_step>`\\ \\(\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.record_post_step:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Trigger recorder terms for post-step functions."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`record_pre_reset "
"<isaaclab.managers.RecorderManager.record_pre_reset>`\\ "
"\\(env\\_ids\\[\\, force\\_export\\_or\\_skip\\]\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.record_pre_reset:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Trigger recorder terms for pre-reset functions."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`record_post_reset "
"<isaaclab.managers.RecorderManager.record_post_reset>`\\ \\(env\\_ids\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.record_post_reset:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Trigger recorder terms for post-reset functions."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid ""
":py:obj:`export_episodes "
"<isaaclab.managers.RecorderManager.export_episodes>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.export_episodes:1
#: isaaclab.managers.recorder_manager.RecorderManager:1:<autosummary>:1 of
msgid "Concludes and exports the episodes for the given environment ids."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`active_terms <isaaclab.managers.RecorderManager.active_terms>`\\"
msgstr ""

#: isaaclab.managers.RecorderManager.active_terms:1
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid "Name of active recorder terms."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`exported_successful_episode_count "
"<isaaclab.managers.RecorderManager.exported_successful_episode_count>`\\"
msgstr ""

#: isaaclab.managers.RecorderManager.exported_successful_episode_count:1
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid "Number of successful episodes."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`exported_failed_episode_count "
"<isaaclab.managers.RecorderManager.exported_failed_episode_count>`\\"
msgstr ""

#: isaaclab.managers.RecorderManager.exported_failed_episode_count:1
#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid "Number of failed episodes."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`device <isaaclab.managers.RecorderManager.device>`\\"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`num_envs <isaaclab.managers.RecorderManager.num_envs>`\\"
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.__init__:3 of
msgid "The configuration object or dictionary (``dict[str, RecorderTermCfg]``)."
msgstr ""

#: isaaclab.managers.RecorderManager.exported_failed_episode_count:3
#: isaaclab.managers.RecorderManager.exported_successful_episode_count:3 of
msgid ""
"The environment id. Defaults to None, in which case all environments are "
"considered."
msgstr ""

#: isaaclab.managers.RecorderManager.exported_successful_episode_count:5 of
msgid "The number of successful episodes."
msgstr ""

#: isaaclab.managers.RecorderManager.exported_failed_episode_count:5 of
msgid "The number of failed episodes."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.get_episode:3 of
msgid "The environment id."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.get_episode:5 of
msgid "The episode data for the given environment id."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.add_to_episodes:3 of
msgid ""
"The key of the given value to be added to the episodes. The key can "
"contain nested keys separated by '/'. For example, \"obs/joint_pos\" "
"would add the given value under ['obs']['policy'] in the underlying "
"dictionary in the episode data."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.add_to_episodes:6 of
msgid ""
"The value to be added to the episodes. The value can be a tensor or a "
"nested dictionary of tensors. The shape of a tensor in the value is "
"(env_ids, ...)."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.set_success_to_episodes:4
#: of
msgid ""
"The task success values to be set to the episodes. The shape of the "
"tensor is (env_ids, 1)."
msgstr ""

#: isaaclab.managers.recorder_manager.RecorderManager.record_post_reset:3
#: isaaclab.managers.recorder_manager.RecorderManager.record_pre_reset:3 of
msgid "The environment ids in which a reset is triggered."
msgstr ""

#: isaaclab.managers.RecorderTermCfg.class_type:1:<autosummary>:1 of
msgid ":py:obj:`class_type <isaaclab.managers.RecorderTermCfg.class_type>`\\"
msgstr ""

#: ../../docstring isaaclab.managers.RecorderTermCfg.class_type:1
#: isaaclab.managers.RecorderTermCfg.class_type:1:<autosummary>:1 of
msgid "The associated recorder term class."
msgstr ""

#: ../../docstring isaaclab.managers.RecorderTermCfg.class_type:3 of
msgid ""
"The class should inherit from "
":class:`isaaclab.managers.action_manager.RecorderTerm`."
msgstr ""


