# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-11 19:45+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:2
msgid "isaaclab_mimic.datagen"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:22
msgid "Data Generator"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:29
msgid "Datagen Info"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:36
msgid "Datagen Info Pool"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:43
msgid "Random Strategy"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:50
msgid "Nearest Neighbor Object Strategy"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:57
msgid "Nearest Neighbor Robot Distance Strategy"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:64
msgid "Waypoint"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:71
msgid "Waypoint Sequence"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.datagen.rst:78
msgid "Waypoint Trajectory"
msgstr ""

#~ msgid "Sub-package with core implementation logic for Isaac Lab Mimic."
#~ msgstr ""

#~ msgid "Classes"
#~ msgstr ""

#~ msgid ":py:obj:`DataGenerator <isaaclab_mimic.datagen.DataGenerator>`\\"
#~ msgstr ""

#~ msgid ""
#~ "The main data generator object that "
#~ "loads a source dataset, parses it, "
#~ "and generates new trajectories."
#~ msgstr ""

#~ msgid ":py:obj:`DatagenInfo <isaaclab_mimic.datagen.DatagenInfo>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Defines the structure of information "
#~ "required from an environment for data"
#~ " generation processes."
#~ msgstr ""

#~ msgid ":py:obj:`DataGenInfoPool <isaaclab_mimic.datagen.DataGenInfoPool>`\\"
#~ msgstr ""

#~ msgid "Pool of DatagenInfo for data generation."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SelectionStrategy "
#~ "<isaaclab_mimic.datagen.SelectionStrategy>`\\"
#~ msgstr ""

#~ msgid "Defines methods and functions for selection strategies to implement."
#~ msgstr ""

#~ msgid ":py:obj:`RandomStrategy <isaaclab_mimic.datagen.RandomStrategy>`\\"
#~ msgstr ""

#~ msgid "Pick source demonstration randomly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`NearestNeighborObjectStrategy "
#~ "<isaaclab_mimic.datagen.NearestNeighborObjectStrategy>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Pick source demonstration to be the "
#~ "one with the closest object pose "
#~ "to the object in the current "
#~ "scene."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`NearestNeighborRobotDistanceStrategy "
#~ "<isaaclab_mimic.datagen.NearestNeighborRobotDistanceStrategy>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Pick source demonstration to be the "
#~ "one that minimizes the distance the "
#~ "robot end effector will need to "
#~ "travel from the current pose to "
#~ "the first pose in the transformed "
#~ "segment."
#~ msgstr ""

#~ msgid ":py:obj:`Waypoint <isaaclab_mimic.datagen.Waypoint>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Represents a single desired 6-DoF "
#~ "waypoint, along with corresponding gripper "
#~ "actuation for this point."
#~ msgstr ""

#~ msgid ":py:obj:`WaypointSequence <isaaclab_mimic.datagen.WaypointSequence>`\\"
#~ msgstr ""

#~ msgid "Represents a sequence of Waypoint objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`WaypointTrajectory "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A sequence of WaypointSequence objects "
#~ "that corresponds to a full 6-DoF "
#~ "trajectory."
#~ msgstr ""

#~ msgid "**Methods:**"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.DataGenerator.__init__>`\\ \\(env\\[\\,"
#~ " src\\_demo\\_datagen\\_info\\_pool\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "param env"
#~ msgstr ""

#~ msgid "environment to use for data generation"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`randomize_subtask_boundaries "
#~ "<isaaclab_mimic.datagen.DataGenerator.randomize_subtask_boundaries>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "Apply random offsets to sample subtask"
#~ " boundaries according to the task "
#~ "spec."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`select_source_demo "
#~ "<isaaclab_mimic.datagen.DataGenerator.select_source_demo>`\\ "
#~ "\\(eef\\_pose\\, object\\_pose\\, ...\\)"
#~ msgstr ""

#~ msgid "Helper method to run source subtask segment selection."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`generate "
#~ "<isaaclab_mimic.datagen.DataGenerator.generate>`\\ "
#~ "\\(env\\_id\\, success\\_term\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Attempt to generate a new demonstration."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "source demo datagen info pool"
#~ msgstr ""

#~ msgid "path to hdf5 dataset to use for generation"
#~ msgstr ""

#~ msgid ""
#~ "list of demonstration keys to use "
#~ "in file. If not provided, all "
#~ "demonstration keys will be used."
#~ msgstr ""

#~ msgid ""
#~ "Apply random offsets to sample subtask"
#~ " boundaries according to the task "
#~ "spec. Recall that each demonstration is"
#~ " segmented into a set of subtask "
#~ "segments, and the end index of "
#~ "each subtask can have a random "
#~ "offset."
#~ msgstr ""

#~ msgid "current end effector pose"
#~ msgstr ""

#~ msgid "current object pose for this subtask"
#~ msgstr ""

#~ msgid "index of subtask"
#~ msgstr ""

#~ msgid ""
#~ "start and end indices for subtask "
#~ "segment in source demonstrations of "
#~ "shape (N, 2)"
#~ msgstr ""

#~ msgid "name of reference object for this subtask"
#~ msgstr ""

#~ msgid "name of selection strategy"
#~ msgstr ""

#~ msgid "extra kwargs for running selection strategy"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "selected source demo index"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "environment ID"
#~ msgstr ""

#~ msgid "success function to check if the task is successful"
#~ msgstr ""

#~ msgid "queue to store actions for each environment"
#~ msgstr ""

#~ msgid ""
#~ "if True, select a different source "
#~ "demonstration for each subtask during "
#~ "data generation, else keep the same "
#~ "one for the entire episode"
#~ msgstr ""

#~ msgid ""
#~ "if True, each subtask segment will "
#~ "consist of the first robot pose "
#~ "and the target poses instead of "
#~ "just the target poses. Can sometimes "
#~ "help improve data generation quality as"
#~ " the interpolation segment will interpolate"
#~ " to where the robot started in "
#~ "the source segment instead of the "
#~ "first target pose. Note that the "
#~ "first subtask segment of each episode"
#~ " will always include the first robot"
#~ " pose, regardless of this argument."
#~ msgstr ""

#~ msgid ""
#~ "if True, each interpolation segment will"
#~ " start from the last target pose "
#~ "in the previous subtask segment, instead"
#~ " of the current robot pose. Can "
#~ "sometimes improve data generation quality."
#~ msgstr ""

#~ msgid "if True, pause after every subtask during generation, for debugging."
#~ msgstr ""

#~ msgid ""
#~ "dictionary with the following items:     "
#~ "initial_state (dict): initial simulator state"
#~ " for the executed trajectory     states "
#~ "(list): simulator state at each timestep"
#~ "     observations (list): observation dictionary"
#~ " at each timestep     datagen_infos (list):"
#~ " datagen_info at each timestep     actions"
#~ " (np.array): action executed at each "
#~ "timestep     success (bool): whether the "
#~ "trajectory successfully solved the task "
#~ "or not     src_demo_inds (list): list of"
#~ " selected source demonstration indices for"
#~ " each subtask     src_demo_labels (np.array): "
#~ "same as @src_demo_inds, but repeated to"
#~ " have a label for each timestep "
#~ "of the trajectory"
#~ msgstr ""

#~ msgid "dictionary with the following items:"
#~ msgstr ""

#~ msgid ""
#~ "initial_state (dict): initial simulator state"
#~ " for the executed trajectory states "
#~ "(list): simulator state at each timestep"
#~ " observations (list): observation dictionary "
#~ "at each timestep datagen_infos (list): "
#~ "datagen_info at each timestep actions "
#~ "(np.array): action executed at each "
#~ "timestep success (bool): whether the "
#~ "trajectory successfully solved the task "
#~ "or not src_demo_inds (list): list of "
#~ "selected source demonstration indices for "
#~ "each subtask src_demo_labels (np.array): same"
#~ " as @src_demo_inds, but repeated to "
#~ "have a label for each timestep of"
#~ " the trajectory"
#~ msgstr ""

#~ msgid ""
#~ "Defines the structure of information "
#~ "required from an environment for data"
#~ " generation processes. The `DatagenInfo` "
#~ "class centralizes all essential data "
#~ "elements needed for data generation in"
#~ " one place, reducing the overhead and"
#~ " complexity of repeatedly querying the "
#~ "environment whenever this information is "
#~ "needed."
#~ msgstr ""

#~ msgid "To allow for flexibility,not all information must be present."
#~ msgstr ""

#~ msgid ""
#~ "Core Elements: - **eef_pose**: Captures "
#~ "the current 6 dimensional poses of "
#~ "the robot's end-effector. - "
#~ "**object_poses**: Captures the 6 dimensional"
#~ " poses of relevant objects in the "
#~ "scene. - **subtask_term_signals**: Captures "
#~ "subtask completions signals. - "
#~ "**target_eef_pose**: Captures the target 6 "
#~ "dimensional poses for robot's end "
#~ "effector at each time step. - "
#~ "**gripper_action**:  Captures the gripper's "
#~ "state."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.DatagenInfo.__init__>`\\ "
#~ "\\(\\[eef\\_pose\\, object\\_poses\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "param eef_pose"
#~ msgstr ""

#~ msgid "robot end effector poses of shape [..., 4, 4]"
#~ msgstr ""

#~ msgid "dictionary mapping object name to object poses of shape [..., 4, 4]"
#~ msgstr ""

#~ msgid ""
#~ "dictionary mapping subtask name to a "
#~ "binary indicator (0 or 1) on "
#~ "whether subtask has been completed. Each"
#~ " value in the dictionary could be "
#~ "an int, float, or torch.Tensor of "
#~ "shape [..., 1]."
#~ msgstr ""

#~ msgid "target end effector poses of shape [..., 4, 4]"
#~ msgstr ""

#~ msgid ""
#~ "gripper actions of shape [..., D] "
#~ "where D is the dimension of the"
#~ " gripper actuation action for the "
#~ "robot arm"
#~ msgstr ""

#~ msgid ""
#~ "This class is a container for "
#~ "storing `DatagenInfo` objects that are "
#~ "extracted from episodes. The pool "
#~ "supports the use of an asyncio "
#~ "lock to safely add new episodes to"
#~ " the pool while consuming the data,"
#~ " so it can be shared across "
#~ "multiple mimic data generators."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.__init__>`\\ \\(env\\,"
#~ " env\\_cfg\\, device\\[\\, asyncio\\_lock\\]\\)"
#~ msgstr ""

#~ msgid "param env_cfg"
#~ msgstr ""

#~ msgid "environment configuration"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`add_episode "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.add_episode>`\\ "
#~ "\\(episode\\)"
#~ msgstr ""

#~ msgid "Add a datagen info from the given episode."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`load_from_dataset_file "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.load_from_dataset_file>`\\ "
#~ "\\(file\\_path\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Load from a dataset file."
#~ msgstr ""

#~ msgid "**Attributes:**"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`datagen_infos "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.datagen_infos>`\\"
#~ msgstr ""

#~ msgid "Returns the datagen infos."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`subtask_indices "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.subtask_indices>`\\"
#~ msgstr ""

#~ msgid "Returns the subtask indices."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`asyncio_lock "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.asyncio_lock>`\\"
#~ msgstr ""

#~ msgid "Returns the asyncio lock."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`num_datagen_infos "
#~ "<isaaclab_mimic.datagen.DataGenInfoPool.num_datagen_infos>`\\"
#~ msgstr ""

#~ msgid "Returns the number of datagen infos."
#~ msgstr ""

#~ msgid "device to store the data"
#~ msgstr ""

#~ msgid "asyncio lock to use for thread safety"
#~ msgstr ""

#~ msgid "episode to add"
#~ msgstr ""

#~ msgid "path to the dataset file"
#~ msgstr ""

#~ msgid "keys of the demos to load"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`select_source_demo "
#~ "<isaaclab_mimic.datagen.RandomStrategy.select_source_demo>`\\ "
#~ "\\(eef\\_pose\\, object\\_pose\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "Selects source demonstration index using "
#~ "the current robot pose, relevant object"
#~ " pose for the current subtask, and"
#~ " relevant information from the source "
#~ "demonstrations for the current subtask."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.RandomStrategy.__init__>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "current 4x4 eef pose"
#~ msgstr ""

#~ msgid "current 4x4 object pose, for the object in this subtask"
#~ msgstr ""

#~ msgid ""
#~ "DatagenInfo instance for the relevant "
#~ "subtask segment in the source "
#~ "demonstrations"
#~ msgstr ""

#~ msgid ""
#~ "index of source demonstration - "
#~ "indicates which source subtask segment "
#~ "to use"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`select_source_demo "
#~ "<isaaclab_mimic.datagen.NearestNeighborObjectStrategy.select_source_demo>`\\"
#~ " \\(eef\\_pose\\, object\\_pose\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.NearestNeighborObjectStrategy.__init__>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid "weight on position for minimizing pose distance"
#~ msgstr ""

#~ msgid "weight on rotation for minimizing pose distance"
#~ msgstr ""

#~ msgid ""
#~ "pick source demo index uniformly at "
#~ "randomly from the top @nn_k nearest "
#~ "neighbors"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`select_source_demo "
#~ "<isaaclab_mimic.datagen.NearestNeighborRobotDistanceStrategy.select_source_demo>`\\"
#~ " \\(eef\\_pose\\, object\\_pose\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.NearestNeighborRobotDistanceStrategy.__init__>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ <isaaclab_mimic.datagen.Waypoint.__init__>`\\"
#~ " \\(eef\\_names\\, pose\\, gripper\\_action\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid "param pose"
#~ msgstr ""

#~ msgid "4x4 pose target for robot controller"
#~ msgstr ""

#~ msgid "gripper action for robot controller"
#~ msgstr ""

#~ msgid ""
#~ "action noise amplitude to apply during"
#~ " execution at this timestep (for arm"
#~ " actions, not gripper actions)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.WaypointSequence.__init__>`\\ "
#~ "\\(\\[sequence\\]\\)"
#~ msgstr ""

#~ msgid "param sequence"
#~ msgstr ""

#~ msgid "if provided, should be a list of Waypoint objects"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`from_poses "
#~ "<isaaclab_mimic.datagen.WaypointSequence.from_poses>`\\ "
#~ "\\(eef\\_names\\, poses\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "Instantiate a WaypointSequence object given"
#~ " a sequence of poses, gripper "
#~ "actions, and action noise."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`split "
#~ "<isaaclab_mimic.datagen.WaypointSequence.split>`\\ \\(ind\\)"
#~ msgstr ""

#~ msgid ""
#~ "Splits this sequence into 2 pieces, "
#~ "the part up to time index @ind,"
#~ " and the rest."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`last_waypoint "
#~ "<isaaclab_mimic.datagen.WaypointSequence.last_waypoint>`\\"
#~ msgstr ""

#~ msgid "Return last waypoint in sequence."
#~ msgstr ""

#~ msgid "sequence of pose matrices of shape (T, 4, 4)"
#~ msgstr ""

#~ msgid ""
#~ "sequence of gripper actions that should"
#~ " be applied at each timestep of "
#~ "shape (T, D)."
#~ msgstr ""

#~ msgid ""
#~ "sequence of action noise magnitudes that"
#~ " should be applied at each timestep."
#~ " If a single float is provided, "
#~ "the noise magnitude will be constant "
#~ "over the trajectory."
#~ msgstr ""

#~ msgid "waypoint (Waypoint instance)"
#~ msgstr ""

#~ msgid ""
#~ "Splits this sequence into 2 pieces, "
#~ "the part up to time index @ind,"
#~ " and the rest. Returns 2 "
#~ "WaypointSequence objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`__init__ "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.__init__>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`add_waypoint_sequence "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.add_waypoint_sequence>`\\"
#~ " \\(sequence\\)"
#~ msgstr ""

#~ msgid "Directly append sequence to list (no interpolation)."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`add_waypoint_sequence_for_target_pose "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.add_waypoint_sequence_for_target_pose>`\\"
#~ " \\(...\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Adds a new waypoint sequence corresponding to a desired target pose."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`pop_first "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.pop_first>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Removes first waypoint in first waypoint sequence and returns it."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`merge "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.merge>`\\ \\(other\\,"
#~ " eef\\_names\\[\\, num\\_steps\\_interp\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Merge this trajectory with another (@other)."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`execute "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.execute>`\\ \\(env\\,"
#~ " env\\_id\\, success\\_term\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Main function to execute the trajectory."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`last_waypoint "
#~ "<isaaclab_mimic.datagen.WaypointTrajectory.last_waypoint>`\\"
#~ msgstr ""

#~ msgid "sequence to add"
#~ msgstr ""

#~ msgid ""
#~ "Adds a new waypoint sequence "
#~ "corresponding to a desired target pose."
#~ " A new WaypointSequence will be "
#~ "constructed consisting of @num_steps "
#~ "intermediate Waypoint objects. These can "
#~ "either be constructed with linear "
#~ "interpolation from the last waypoint "
#~ "(default) or be a constant set of"
#~ " target poses (set @skip_interpolation to"
#~ " True)."
#~ msgstr ""

#~ msgid "4x4 target pose"
#~ msgstr ""

#~ msgid "value for gripper action"
#~ msgstr ""

#~ msgid ""
#~ "number of action steps when trying "
#~ "to reach this waypoint. Will add "
#~ "intermediate linearly interpolated points "
#~ "between the last pose on this "
#~ "trajectory and the target pose, so "
#~ "that the total number of steps is"
#~ " @num_steps."
#~ msgstr ""

#~ msgid ""
#~ "if True, keep the target pose "
#~ "fixed and repeat it @num_steps times "
#~ "instead of using linearly interpolated "
#~ "targets."
#~ msgstr ""

#~ msgid ""
#~ "scale of random gaussian noise to "
#~ "add during action execution (e.g. when"
#~ " @execute is called)"
#~ msgstr ""

#~ msgid ""
#~ "Removes first waypoint in first waypoint"
#~ " sequence and returns it. If the "
#~ "first waypoint sequence is now empty,"
#~ " it is also removed."
#~ msgstr ""

#~ msgid "the other trajectory to merge into this one"
#~ msgstr ""

#~ msgid ""
#~ "if not None, add a waypoint "
#~ "sequence that interpolates between the "
#~ "end of the current trajectory and "
#~ "the start of @other"
#~ msgstr ""

#~ msgid ""
#~ "if not None, add a waypoint "
#~ "sequence that has constant target poses"
#~ " corresponding to the first target "
#~ "pose in @other"
#~ msgstr ""

#~ msgid "noise to use during the interpolation segment"
#~ msgstr ""

#~ msgid ""
#~ "Main function to execute the trajectory."
#~ " Will use env_interface.target_eef_pose_to_action "
#~ "to convert each target pose at "
#~ "each waypoint to an action command, "
#~ "and pass that along to env.step."
#~ msgstr ""

#~ msgid "environment to use for executing trajectory"
#~ msgstr ""

#~ msgid "environment index"
#~ msgstr ""

#~ msgid "success term to check if the task is successful"
#~ msgstr ""

#~ msgid "queue for sending actions to the environment"
#~ msgstr ""

#~ msgid ""
#~ "dictionary with the following items for"
#~ " the executed trajectory:     states "
#~ "(list): simulator state at each timestep"
#~ "     observations (list): observation dictionary"
#~ " at each timestep     datagen_infos (list):"
#~ " datagen_info at each timestep     actions"
#~ " (list): action executed at each "
#~ "timestep     success (bool): whether the "
#~ "trajectory successfully solved the task "
#~ "or not"
#~ msgstr ""

#~ msgid "dictionary with the following items for the executed trajectory:"
#~ msgstr ""

#~ msgid ""
#~ "states (list): simulator state at each"
#~ " timestep observations (list): observation "
#~ "dictionary at each timestep datagen_infos "
#~ "(list): datagen_info at each timestep "
#~ "actions (list): action executed at each"
#~ " timestep success (bool): whether the "
#~ "trajectory successfully solved the task "
#~ "or not"
#~ msgstr ""

