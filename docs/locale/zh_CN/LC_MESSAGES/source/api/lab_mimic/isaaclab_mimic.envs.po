# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 09:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:2
msgid "isaaclab_mimic.envs"
msgstr ""

#: isaaclab_mimic.envs:1 of
msgid "Sub-package with environment wrappers for Isaac Lab Mimic."
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:7
msgid "Classes"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:11:<autosummary>:1
msgid ""
":py:obj:`FrankaCubeStackIKRelMimicEnv "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv>`\\"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:11:<autosummary>:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1
#: of
msgid ""
"Isaac Lab Mimic environment wrapper class for Franka Cube Stack IK Rel "
"env."
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:11:<autosummary>:1
msgid ""
":py:obj:`FrankaCubeStackIKRelMimicEnvCfg "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg>`\\"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:11:<autosummary>:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1
#: of
msgid "Isaac Lab Mimic environment config class for Franka Cube Stack IK Rel env."
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:14
msgid "Franka Cube Stack IK Rel Mimic Env"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1
#: of
msgid "**Methods:**"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_robot_eef_pose "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose>`\\ "
"\\(eef\\_name\\[\\, env\\_ids\\]\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Get current robot end effector pose."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`target_eef_pose_to_action "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action>`\\"
" \\(...\\[\\, ...\\]\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Takes a target pose and gripper action for the end effector controller "
"and returns an action (usually a normalized delta pose action) to try and"
" achieve that target pose."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`action_to_target_eef_pose "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose>`\\"
" \\(action\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Converts action (compatible with env.step) to a target pose for the end "
"effector controller."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`actions_to_gripper_actions "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions>`\\"
" \\(actions\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Extracts the gripper actuation part from a sequence of env actions "
"(compatible with env.step)."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_subtask_term_signals "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals>`\\"
" \\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Gets a dictionary of termination signal flags for each subtask in a task."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`__init__ "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.__init__>`\\ "
"\\(cfg\\[\\, render\\_mode\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.__init__:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Initialize the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`close "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.close>`\\ \\(\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.close:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Cleanup for the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_object_poses "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.get_object_poses>`\\ "
"\\(\\[env\\_ids\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.get_object_poses:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Gets the pose of each object relevant to Isaac Lab Mimic data generation "
"in the current scene."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_wrapper_attr "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.get_wrapper_attr>`\\ "
"\\(name\\)"
msgstr ""

#: gymnasium.core.Env.get_wrapper_attr:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Gets the attribute `name` from the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`has_wrapper_attr "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.has_wrapper_attr>`\\ "
"\\(name\\)"
msgstr ""

#: gymnasium.core.Env.has_wrapper_attr:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Checks if the attribute `name` exists in the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`load_managers "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.load_managers>`\\ "
"\\(\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.load_managers:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Load the managers for the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`render "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.render>`\\ "
"\\(\\[recompute\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Run rendering without stepping through the physics."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`reset "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.reset>`\\ \\(\\[seed\\,"
" env\\_ids\\, options\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Resets the specified environments and returns observations."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`reset_to "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.reset_to>`\\ "
"\\(state\\, env\\_ids\\[\\, seed\\, is\\_relative\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Resets specified environments to provided states."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`seed <isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.seed>`\\ "
"\\(\\[seed\\]\\)"
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.seed:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Set the seed for the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`serialize "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.serialize>`\\ \\(\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Save all information needed to re-instantiate this environment in a "
"dictionary."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`set_wrapper_attr "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.set_wrapper_attr>`\\ "
"\\(name\\, value\\, \\*\\[\\, force\\]\\)"
msgstr ""

#: gymnasium.core.Env.set_wrapper_attr:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Sets the attribute `name` on the environment with `value`, see "
"`Wrapper.set_wrapper_attr` for more info."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`setup_manager_visualizers "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.setup_manager_visualizers>`\\"
" \\(\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.setup_manager_visualizers:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid "Creates live visualizers for manager terms."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
":py:obj:`step <isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.step>`\\ "
"\\(action\\)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1:<autosummary>:1
#: of
msgid ""
"Execute one time-step of the environment's dynamics and reset terminated "
"environments."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1
#: of
msgid "**Attributes:**"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`device "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.device>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.device:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "The device on which the environment is running."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`is_vector_env "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.is_vector_env>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.is_vector_env:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Whether the environment is a vectorized environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`max_episode_length "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.max_episode_length>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.max_episode_length:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Maximum episode length in environment steps."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`max_episode_length_s "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.max_episode_length_s>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.max_episode_length_s:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Maximum episode length in seconds."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`metadata "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.metadata>`\\"
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.metadata:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Metadata for the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`np_random "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
"Returns the environment's internal :attr:`_np_random` that if not set "
"will initialise with a random seed."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`np_random_seed "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
"Returns the environment's internal :attr:`_np_random_seed` that if not "
"set will first initialise with a random int as seed."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`num_envs "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.num_envs>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.num_envs:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "The number of instances of the environment that are running."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`physics_dt "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.physics_dt>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.physics_dt:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "The physics time-step (in s)."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`step_dt "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.step_dt>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.step_dt:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "The environment stepping time-step (in s)."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ""
":py:obj:`unwrapped "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.unwrapped>`\\"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.unwrapped:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Returns the base non-wrapped environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid ":py:obj:`cfg <isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.cfg>`\\"
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.cfg:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1:<autosummary>:1
#: of
msgid "Configuration for the environment."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:1
#: of
msgid ""
"Get current robot end effector pose. Should be the same frame as used by "
"the robot end-effector controller."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset
#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to
#: isaaclab.envs.manager_based_env.ManagerBasedEnv.seed
#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.__init__
#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render
#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step
#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.get_object_poses
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action
#: of
msgid "Parameters"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:3
#: of
msgid "Name of the end effector."
msgstr ""

#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.get_object_poses:3
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:4
#: of
msgid "Environment indices to get the pose for. If None, all envs are considered."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset
#: isaaclab.envs.manager_based_env.ManagerBasedEnv.seed
#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render
#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step
#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.get_object_poses
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.unwrapped
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action
#: of
msgid "Returns"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_robot_eef_pose:6
#: of
msgid "A torch.Tensor eef pose matrix. Shape is (len(env_ids), 4, 4)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:1
#: of
msgid ""
"Takes a target pose and gripper action for the end effector controller "
"and returns an action (usually a normalized delta pose action) to try and"
" achieve that target pose. Noise is added to the target pose action if "
"specified."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:5
#: of
msgid "Dictionary of 4x4 target eef pose for each end-effector."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:6
#: of
msgid "Dictionary of gripper actions for each end-effector."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:7
#: of
msgid "Noise to add to the action. If None, no noise is added."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:8
#: of
msgid "Environment index to get the action for."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.target_eef_pose_to_action:10
#: of
msgid "An action torch.Tensor that's compatible with env.step()."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose:1
#: of
msgid ""
"Converts action (compatible with env.step) to a target pose for the end "
"effector controller. Inverse of @target_eef_pose_to_action. Usually used "
"to infer a sequence of target controller poses from a demonstration "
"trajectory using the recorded actions."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose:5
#: of
msgid "Environment action. Shape is (num_envs, action_dim)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.action_to_target_eef_pose:7
#: of
msgid "A dictionary of eef pose torch.Tensor that @action corresponds to"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions:3
#: of
msgid ""
"environment actions. The shape is (num_envs, num steps in a demo, "
"action_dim)."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.actions_to_gripper_actions:5
#: of
msgid ""
"A dictionary of torch.Tensor gripper actions. Key to each dict is an "
"eef_name."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals:1
#: of
msgid ""
"Gets a dictionary of termination signal flags for each subtask in a task."
" The flag is 1 when the subtask has been completed and 0 otherwise. The "
"implementation of this method is required if intending to enable "
"automatic subtask term signal annotation when running the dataset "
"annotation tool. This method can be kept unimplemented if intending to "
"use manual subtask term signal annotation."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals:7
#: of
msgid ""
"Environment indices to get the termination signals for. If None, all envs"
" are considered."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env.FrankaCubeStackIKRelMimicEnv.get_subtask_term_signals:9
#: of
msgid "A dictionary termination signal flags (False or True) for each subtask."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.__init__:3 of
msgid "The configuration for the environment."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.__init__:4 of
msgid ""
"The render mode for the environment. Defaults to None, which is similar "
"to ``\"human\"``."
msgstr ""

#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.get_object_poses:5
#: of
msgid ""
"A dictionary that maps object names to object pose matrix (4x4 "
"torch.Tensor)"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.load_managers:3 of
msgid ""
"This function is responsible for creating the various managers (action, "
"observation, events, etc.) for the environment. Since the managers "
"require access to physics handles, they can only be created after the "
"simulator is reset (i.e. played for the first time)."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.load_managers:8 of
msgid ""
"In case of standalone application (when running simulator from Python), "
"the function is called automatically when the class is initialized."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.load_managers:11 of
msgid ""
"However, in case of extension mode, the user must call this function "
"manually after the simulator is reset. This is because the simulator is "
"only reset when the user calls :meth:`SimulationContext.reset_async` and "
"it isn't possible to call async functions in the constructor."
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random:3 of
msgid "Instances of `np.random.Generator`"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed:3 of
msgid ""
"If :attr:`np_random_seed` was set directly instead of through "
":meth:`reset` or :meth:`set_np_random_through_seed`, the seed will take "
"the value -1."
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed:6 of
msgid ""
"the seed of the current `np_random` or -1, if the seed of the rng is "
"unknown"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.np_random_seed
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.unwrapped of
msgid "Return type"
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.physics_dt:3 of
msgid "This is the lowest time-decimation at which the simulation is happening."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:3 of
msgid "By convention, if mode is:"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:5 of
msgid ""
"**human**: Render to the current display and return nothing. Usually for "
"human consumption."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:6 of
msgid ""
"**rgb_array**: Return a numpy.ndarray with shape (x, y, 3), representing "
"RGB values for an x-by-y pixel image, suitable for turning into a video."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:9 of
msgid ""
"Whether to force a render even if the simulator has already rendered the "
"scene. Defaults to False."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:12 of
msgid ""
"The rendered image as a numpy array if mode is \"rgb_array\". Otherwise, "
"returns None."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render of
msgid "Raises"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:14 of
msgid ""
"If mode is set to \"rgb_data\" and simulation render mode does not "
"support it.     In this case, the simulation render mode must be set to "
"``RenderMode.PARTIAL_RENDERING``     or ``RenderMode.FULL_RENDERING``."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.render:15 of
msgid "If an unsupported rendering mode is specified."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:3 of
msgid ""
"This function calls the :meth:`_reset_idx` function to reset the "
"specified environments. However, certain operations, such as procedural "
"terrain generation, that happened during initialization are not repeated."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:7
#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:13 of
msgid ""
"The seed to use for randomization. Defaults to None, in which case the "
"seed is not set."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:8
#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:12 of
msgid ""
"The environment ids to reset. Defaults to None, in which case all "
"environments are reset."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:9 of
msgid ""
"Additional information to specify how the environment is reset. Defaults "
"to None.  .. note:: This argument is used for compatibility with "
"Gymnasium environment definition."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:9 of
msgid ""
"Additional information to specify how the environment is reset. Defaults "
"to None."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:11 of
msgid ""
"This argument is used for compatibility with Gymnasium environment "
"definition."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset:13 of
msgid "A tuple containing the observations and extras."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:3 of
msgid ""
"This function resets the environments to the provided states. The state "
"is a dictionary containing the state of the scene entities. Please refer "
"to :meth:`InteractiveScene.get_state` for the format."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:7 of
msgid ""
"The function is different from the :meth:`reset` function as it resets "
"the environments to specific states, instead of using the randomization "
"events for resetting the environments."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:10 of
msgid ""
"The state to reset the specified environments to. Please refer to "
":meth:`InteractiveScene.get_state` for the format."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.reset_to:14 of
msgid ""
"If set to True, the state is considered relative to the environment "
"origins. Defaults to False."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.seed:3 of
msgid "The seed for random generator. Defaults to -1."
msgstr ""

#: isaaclab.envs.manager_based_env.ManagerBasedEnv.seed:5 of
msgid "The seed used for random generator."
msgstr ""

#: isaaclab.envs.manager_based_rl_mimic_env.ManagerBasedRLMimicEnv.serialize:1
#: of
msgid ""
"Save all information needed to re-instantiate this environment in a "
"dictionary. This is the same as @env_meta - environment metadata stored "
"in hdf5 datasets, and used in utils/env_utils.py."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:3 of
msgid ""
"Unlike the :class:`ManagerBasedEnv.step` class, the function performs the"
" following operations:"
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:5 of
msgid "Process the actions."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:6 of
msgid "Perform physics stepping."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:7 of
msgid "Perform rendering if gui is enabled."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:8 of
msgid "Update the environment counters and compute the rewards and terminations."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:9 of
msgid "Reset the environments that terminated."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:10 of
msgid "Compute the observations."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:11 of
msgid "Return the observations, rewards, resets and extras."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:13 of
msgid "The actions to apply on the environment. Shape is (num_envs, action_dim)."
msgstr ""

#: isaaclab.envs.manager_based_rl_env.ManagerBasedRLEnv.step:15 of
msgid ""
"A tuple containing the observations, rewards, resets (terminated and "
"truncated) and extras."
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.step_dt:3 of
msgid "This is the time-step at which the environment steps forward."
msgstr ""

#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnv.unwrapped:3 of
msgid "The base non-wrapped :class:`gymnasium.Env` instance"
msgstr ""

#: ../../source/api/lab_mimic/isaaclab_mimic.envs.rst:21
msgid "Franka Cube Stack IK Rel Mimic Env Cfg"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1
#: of
msgid ""
"Bases: "
":py:class:`~isaaclab_tasks.manager_based.manipulation.stack.config.franka.stack_ik_rel_env_cfg.FrankaCubeStackEnvCfg`,"
" :py:class:`~isaaclab.envs.mimic_env_cfg.MimicEnvCfg`"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1:<autosummary>:1
#: of
msgid ""
":py:obj:`__init__ "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.__init__>`\\ "
"\\(\\[datagen\\_config\\, subtask\\_configs\\, ...\\]\\)"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1
#: of
msgid "**Classes:**"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1:<autosummary>:1
#: of
msgid ""
":py:obj:`ui_window_class_type "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.ui_window_class_type>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg:1:<autosummary>:1
#: of
msgid ""
"alias of "
":py:class:`~isaaclab.envs.ui.manager_based_rl_env_window.ManagerBasedRLEnvWindow`"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`viewer "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.viewer>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Viewer configuration."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`sim <isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.sim>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Physics simulation configuration."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`seed "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.seed>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "The seed for the random number generator."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`decimation "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.decimation>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.decimation:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Number of control action updates @ sim dt per policy dt."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`scene "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.scene>`\\"
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.scene:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Scene settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`recorders "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.recorders>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Recorder settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`observations "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.observations>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.observations:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Observation space settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`actions "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.actions>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.actions:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Action space settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`events "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.events>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Event settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`rerender_on_reset "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rerender_on_reset>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
"Whether a render step is performed again after at least one environment "
"has been reset."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`wait_for_textures "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.wait_for_textures>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "True to wait for assets to be loaded completely, False otherwise."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ":py:obj:`xr <isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.xr>`\\"
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.xr:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
"Configuration for viewing and interacting with the environment through an"
" XR device."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`teleop_devices "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.teleop_devices>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.teleop_devices:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Configuration for teleoperation devices."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`is_finite_horizon "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
"Whether the learning task is treated as a finite or infinite horizon "
"problem for the agent."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`episode_length_s "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.episode_length_s>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.episode_length_s:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Duration of an episode (in seconds)."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`rewards "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rewards>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rewards:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Reward settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`terminations "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.terminations>`\\"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.terminations:1
#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Termination settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`curriculum "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.curriculum>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Curriculum settings."
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid ""
":py:obj:`commands "
"<isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.commands>`\\"
msgstr ""

#: isaaclab_mimic.envs.franka_stack_ik_rel_mimic_env_cfg.FrankaCubeStackIKRelMimicEnvCfg.__init__:1:<autosummary>:1
#: of
msgid "Command settings."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.viewer:1
#: of
msgid "Viewer configuration. Default is ViewerCfg()."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.sim:1 of
msgid "Physics simulation configuration. Default is SimulationCfg()."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.seed:1
#: of
msgid ""
"The seed for the random number generator. Defaults to None, in which case"
" the seed is not set."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.seed:5
#: of
msgid ""
"The seed is set at the beginning of the environment initialization. This "
"ensures that the environment creation is deterministic and behaves "
"similarly across different runs."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.decimation:3 of
msgid ""
"For instance, if the simulation dt is 0.01s and the policy dt is 0.1s, "
"then the decimation is 10. This means that the control action is updated "
"every 10 simulation steps."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.scene:3
#: of
msgid ""
"Please refer to the :class:`isaaclab.scene.InteractiveSceneCfg` class for"
" more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.recorders:1 of
msgid "Recorder settings. Defaults to recording nothing."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.recorders:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.RecorderManager` class for "
"more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.observations:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.ObservationManager` class "
"for more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.actions:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.ActionManager` class for "
"more details."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.events:1
#: of
msgid ""
"Event settings. Defaults to the basic configuration that resets the scene"
" to its default state."
msgstr ""

#: ../../docstring isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.events:3
#: of
msgid ""
"Please refer to the :class:`isaaclab.managers.EventManager` class for "
"more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rerender_on_reset:1 of
msgid ""
"Whether a render step is performed again after at least one environment "
"has been reset. Defaults to False, which means no render step will be "
"performed after reset."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rerender_on_reset:4 of
msgid ""
"When this is False, data collected from sensors after performing reset "
"will be stale and will not reflect the latest states in simulation caused"
" by the reset."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rerender_on_reset:6 of
msgid ""
"When this is True, an extra render step will be performed to update the "
"sensor data to reflect the latest states from the reset. This comes at a "
"cost of performance as an additional render step will be performed after "
"each time an environment is reset."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.wait_for_textures:1 of
msgid ""
"True to wait for assets to be loaded completely, False otherwise. "
"Defaults to True."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:1 of
msgid ""
"Whether the learning task is treated as a finite or infinite horizon "
"problem for the agent. Defaults to False, which means the task is treated"
" as an infinite horizon problem."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:4 of
msgid "This flag handles the subtleties of finite and infinite horizon tasks:"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:6 of
msgid ""
"**Finite horizon**: no penalty or bootstrapping value is required by the "
"the agent for running out of time. However, the environment still needs "
"to terminate the episode after the time limit is reached."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:9 of
msgid ""
"**Infinite horizon**: the agent needs to bootstrap the value of the state"
" at the end of the episode. This is done by sending a time-limit (or "
"truncated) done signal to the agent, which triggers this bootstrapping "
"calculation."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:13 of
msgid ""
"If True, then the environment is treated as a finite horizon problem and "
"no time-out (or truncated) done signal is sent to the agent. If False, "
"then the environment is treated as an infinite horizon problem and a "
"time-out (or truncated) done signal is sent to the agent."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.is_finite_horizon:19 of
msgid ""
"The base :class:`ManagerBasedRLEnv` class does not use this flag "
"directly. It is used by the environment wrappers to determine what type "
"of done signal to send to the corresponding learning agent."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.episode_length_s:3 of
msgid ""
"Based on the decimation rate and physics time step, the episode length is"
" calculated as:"
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.episode_length_s:9 of
msgid ""
"For example, if the decimation rate is 10, the physics time step is 0.01,"
" and the episode length is 10 seconds, then the episode length in steps "
"is 100."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.rewards:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.RewardManager` class for "
"more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.terminations:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.TerminationManager` class "
"for more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.curriculum:1 of
msgid ""
"Curriculum settings. Defaults to None, in which case no curriculum is "
"applied."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.curriculum:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.CurriculumManager` class "
"for more details."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.commands:1 of
msgid ""
"Command settings. Defaults to None, in which case no commands are "
"generated."
msgstr ""

#: ../../docstring
#: isaaclab_mimic.envs.FrankaCubeStackIKRelMimicEnvCfg.commands:3 of
msgid ""
"Please refer to the :class:`isaaclab.managers.CommandManager` class for "
"more details."
msgstr ""

