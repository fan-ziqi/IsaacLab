# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 12:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/setup/sample.rst:2
msgid "Running Existing Scripts"
msgstr "运行现有脚本"

#: ../../source/setup/sample.rst:5
msgid "Showroom"
msgstr "展厅"

#: ../../source/setup/sample.rst:7
msgid ""
"The main core interface extension in Isaac Lab ``omni.isaac.lab`` provides "
"the main modules for actuators, objects, robots and sensors. We provide a "
"list of demo scripts and tutorials. These showcase how to use the provided "
"interfaces within a code in a minimal way."
msgstr ""
"Isaac "
"Lab中的主要核心接口扩展 ``omni.isaac.lab`` 提供了执行器、对象、机器人和传感器的主要模块。我们提供了一系列演示脚本和教程。这些展示了如何以最简化的方式在代码中使用提供的接口。"

#: ../../source/setup/sample.rst:12
msgid "A few quick showroom scripts to run and checkout:"
msgstr "一些快速展厅脚本可供运行和查看："

#: ../../source/setup/sample.rst:14
msgid ""
"Spawn different quadrupeds and make robots stand using position commands:"
msgstr "产生不同的四足动物，并使用位置命令使机器人站立："

#: ../../source/setup/sample.rst:20
msgid "Spawn different arms and apply random joint position commands:"
msgstr "产生不同的机械臂，并施加随机关节位置命令："

#: ../../source/setup/sample.rst:26
msgid "Spawn different hands and command them to open and close:"
msgstr "产生不同的手部并命令它们打开和关闭："

#: ../../source/setup/sample.rst:32
msgid "Spawn procedurally generated terrains with different configurations:"
msgstr "生成不同配置的过程生成地形："

#: ../../source/setup/sample.rst:38
msgid "Spawn multiple markers that are useful for visualizations:"
msgstr "产生对可视化有用的多个标记："

#: ../../source/setup/sample.rst:45
msgid "Workflows"
msgstr "工作流"

#: ../../source/setup/sample.rst:47
msgid ""
"With Isaac Lab, we also provide a suite of benchmark environments included "
"in the ``omni.isaac.lab_tasks`` extension. We use the OpenAI Gym registry to"
" register these environments. For each environment, we provide a default "
"configuration file that defines the scene, observations, rewards and action "
"spaces."
msgstr ""
"使用Isaac Lab，我们还提供了包含在 ``omni.isaac.lab_tasks`` 扩展中的一套基准环境。我们使用OpenAI "
"Gym注册表来注册这些环境。对于每个环境，我们提供一个默认配置文件，定义了场景、观察、奖励和动作空间。"

#: ../../source/setup/sample.rst:52
msgid ""
"The list of environments available registered with OpenAI Gym can be found "
"by running:"
msgstr "可以通过运行下面的命令找到已在OpenAI Gym注册的环境列表："

#: ../../source/setup/sample.rst:60
msgid "Basic agents"
msgstr "基本代理"

#: ../../source/setup/sample.rst:62
msgid ""
"These include basic agents that output zero or random agents. They are "
"useful to ensure that the environments are configured correctly."
msgstr "这些包括输出零或随机代理的基本代理。它们有助于确保环境配置正确。"

#: ../../source/setup/sample.rst:65
msgid "Zero-action agent on the Cart-pole example"
msgstr "调试杆示例上的零动作代理"

#: ../../source/setup/sample.rst:71
msgid "Random-action agent on the Cart-pole example:"
msgstr "调试杆示例上的随机动作代理："

#: ../../source/setup/sample.rst:79
msgid "State machine"
msgstr "状态机"

#: ../../source/setup/sample.rst:81
msgid ""
"We include examples on hand-crafted state machines for the environments. "
"These help in understanding the environment and how to use the provided "
"interfaces. The state machines are written in `warp "
"<https://github.com/NVIDIA/warp>`__ which allows efficient execution for "
"large number of environments using CUDA kernels."
msgstr ""
"我们包括手工制作的状态机示例，用于环境。这有助于理解环境以及如何使用提供的接口。状态机是用 `Warp "
"<https://github.com/NVIDIA/warp>`__ 编写的，它允许使用CUDA核函数对大量环境进行有效执行。"

#: ../../source/setup/sample.rst:92
msgid "Teleoperation"
msgstr "远程操作"

#: ../../source/setup/sample.rst:94
msgid ""
"We provide interfaces for providing commands in SE(2) and SE(3) space for "
"robot control. In case of SE(2) teleoperation, the returned command is the "
"linear x-y velocity and yaw rate, while in SE(3), the returned command is a "
"6-D vector representing the change in pose."
msgstr ""
"我们提供接口，用于在机器人控制中提供SE(2)和SE(3)空间的命令。在SE(2)远程操作的情况下，返回的命令是线性x-"
"y速度和偏航速率，而在SE(3)远程操作的情况下，返回的命令是表示姿势变化的6-D向量。"

#: ../../source/setup/sample.rst:99
msgid "To play inverse kinematics (IK) control with a keyboard device:"
msgstr "使用键盘设备进行逆运动学（IK）控制："

#: ../../source/setup/sample.rst:105
msgid ""
"The script prints the teleoperation events configured. For keyboard, these "
"are as follows:"
msgstr "该脚本打印了配置的远程操作事件。对于键盘，这些是如下所示："

#: ../../source/setup/sample.rst:121
msgid "Imitation Learning"
msgstr "模仿学习"

#: ../../source/setup/sample.rst:123
msgid ""
"Using the teleoperation devices, it is also possible to collect data for "
"learning from demonstrations (LfD). For this, we support the learning "
"framework `Robomimic <https://robomimic.github.io/>`__ (Linux only) and "
"allow saving data in `HDF5 "
"<https://robomimic.github.io/docs/tutorials/dataset_contents.html#viewing-"
"hdf5-dataset-structure>`__ format."
msgstr ""
"使用远程操作设备，还可以收集学习自示范（LfD）的数据。为此，我们支持学习框架 `Robomimic "
"<https://robomimic.github.io/>`__ （仅限Linux），并允许以 `HDF5 "
"<https://robomimic.github.io/docs/tutorials/dataset_contents.html#viewing-"
"hdf5-dataset-structure>`__ 格式保存数据。"

#: ../../source/setup/sample.rst:130
msgid ""
"Collect demonstrations with teleoperation for the environment ``Isaac-Lift-"
"Cube-Franka-IK-Rel-v0``:"
msgstr "为环境 ``Isaac-Lift-Cube-Franka-IK-Rel-v0`` 收集远程操作的演示："

#: ../../source/setup/sample.rst:140
msgid "Split the dataset into train and validation set:"
msgstr "将数据集分割为训练集和验证集："

#: ../../source/setup/sample.rst:151
msgid ""
"Train a BC agent for ``Isaac-Lift-Cube-Franka-IK-Rel-v0`` with `Robomimic "
"<https://robomimic.github.io/>`__:"
msgstr ""
"使用 `Robomimic <https://robomimic.github.io/>`__ 为 ``Isaac-Lift-Cube-Franka-"
"IK-Rel-v0`` 训练BC代理："

#: ../../source/setup/sample.rst:158
msgid "Play the learned model to visualize results:"
msgstr "播放学习模型以可视化结果："

#: ../../source/setup/sample.rst:165
msgid "Reinforcement Learning"
msgstr "强化学习"

#: ../../source/setup/sample.rst:167
msgid ""
"We provide wrappers to different reinforcement libraries. These wrappers "
"convert the data from the environments into the respective libraries "
"function argument and return types."
msgstr "我们提供不同增强型库的包装器。这些包装器将环境中的数据转换为相应的库函数参数和返回类型。"

#: ../../source/setup/sample.rst:170
msgid ""
"Training an agent with `Stable-Baselines3 <https://stable-"
"baselines3.readthedocs.io/en/master/index.html>`__ on ``Isaac-Cartpole-v0``:"
msgstr ""
"使用 `Stable-Baselines3 <https://stable-"
"baselines3.readthedocs.io/en/master/index.html>`__ 在 ``Isaac-"
"Cartpole-v0`` 上训练代理："

#: ../../source/setup/sample.rst:184
msgid ""
"Training an agent with `SKRL <https://skrl.readthedocs.io>`__ on ``Isaac-"
"Reach-Franka-v0``:"
msgstr ""
"使用 `SKRL <https://skrl.readthedocs.io>`__ 在 ``Isaac-Reach-Franka-v0`` 上训练一个代理："

#: ../../source/setup/sample.rst
msgid "PyTorch"
msgstr "PyTorch"

#: ../../source/setup/sample.rst
msgid "JAX"
msgstr "JAX"

#: ../../source/setup/sample.rst:213
msgid ""
"Training an agent with `RL-Games <https://github.com/Denys88/rl_games>`__ on"
" ``Isaac-Ant-v0``:"
msgstr ""
"使用 ``Isaac-Ant-v0`` 上的 `RL-Games "
"<https://github.com/Denys88/rl_games>`__ 训练一个代理："

#: ../../source/setup/sample.rst:225
msgid ""
"Training an agent with `RSL-RL <https://github.com/leggedrobotics/rsl_rl>`__"
" on ``Isaac-Reach-Franka-v0``:"
msgstr ""
"使用 ``Isaac-Reach-Franka-v0`` 上的 `RSL-RL "
"<https://github.com/leggedrobotics/rsl_rl>`__ 训练一个代理："

#: ../../source/setup/sample.rst:237
msgid ""
"All the scripts above log the training progress to `Tensorboard`_ in the "
"``logs`` directory in the root of the repository. The logs directory follows"
" the pattern ``logs/<library>/<task>/<date-time>``, where ``<library>`` is "
"the name of the learning framework, ``<task>`` is the task name, and "
"``<date-time>`` is the timestamp at which the training script was executed."
msgstr ""
"上述所有脚本都会将训练进度记录到存储库根目录下 ``log`` 目录中的 `Tensorboard`_ 中。 ``log`` 目录遵循模式 ``logs/<库>/<任务>/<日期-"
"时间>`` ,其中 ``<库>`` 是学习框架的名称， ``<任务>`` 是任务名称， ``<日期-时间>`` 是执行训练脚本时的时间戳。"

#: ../../source/setup/sample.rst:242
msgid "To view the logs, run:"
msgstr "要查看日志，请运行:"
