# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-14 10:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/setup/walkthrough/project_setup.rst:5
msgid "Isaac Lab Project Setup"
msgstr "Isaac 实验室项目设置"

#: ../../source/setup/walkthrough/project_setup.rst:7
msgid ""
"The best way to create a new project is to use the :ref:`Template "
"Generator<template-generator>`. Generating the template for this tutorial "
"series is done by calling the ``isaaclab`` script from the root directory of"
" the repository"
msgstr ""
"使用 :ref:`Template Generator<template-generator>` 来创建新项目是最好的方式。通过从存储库的根目录调用 "
"``isaaclab`` 脚本来为本教程系列生成模板。"

#: ../../source/setup/walkthrough/project_setup.rst:14
msgid ""
"Be sure to select ``External`` and ``Direct | single agent``.  For the "
"frameworks, select ``skrl`` and both ``PPO`` and ``AMP`` on the following "
"menu.  You can select other frameworks if you like, but this tutorial will "
"detail ``skrl`` specifically. The configuration process for other frameworks"
" is similar. You can get a copy of this code directly by checking out the "
"`initial branch of the tutorial repository <https://github.com/isaac-"
"sim/IsaacLabTutorial/tree/initial>`_!"
msgstr ""
"确保选择 ``External`` 和 ``Direct | single agent`` 。对于框架，选择以下菜单上的 "
"``skrl``、``PPO`` 和 ``AMP`` 。您可以选择其他框架，但本教程将详细介绍 ``skrl`` "
"。其他框架的配置过程类似。您可以直接通过查看 `教程存储库的初始分支 <https://github.com/isaac-"
"sim/IsaacLabTutorial/tree/initial>`_ 来获取此代码的副本！"

#: ../../source/setup/walkthrough/project_setup.rst:19
msgid ""
"This will create an extension project with the specified name at the chosen "
"path.  For this tutorial, we chose the name ``isaac_lab_tutorial``."
msgstr "这将创建具有指定名称的扩展项目在所选路径。对于本教程，我们选择了名称 ``isaac_lab_tutorial`` 。"

#: ../../source/setup/walkthrough/project_setup.rst:23
msgid ""
"The template generator expects the project name to respect \"snake_case\": "
"all lowercase with underscores separating words. However, we have renamed "
"the sample project to \"IsaacLabTutorial\" to more closely match the naming "
"convention GitHub and our other projects. If you are following along with "
"the example repository, note this minor difference as some superficial path "
"names may change.  If you are following along by building the project "
"yourself, then you can ignore this note."
msgstr ""
"模板生成器期望项目名称遵循 \"蛇形命名法\": 全部小写，单词之间用下划线分隔。但是，我们已将示例项目重命名为 "
"\"IsaacLabTutorial\" ，以更符合 GitHub "
"和我们其他项目的命名约定。如果您正在参考示例存储库，请注意这个细微差别，因为某些表面路径名称可能会更改。如果您通过构建项目自己来跟进，那么您可以忽略这个说明。"

#: ../../source/setup/walkthrough/project_setup.rst:27
msgid ""
"Next, we must install the project as a python module.  Navigate to the "
"directory that was just created (it will contain the ``source`` and "
"``scripts`` directories for the project) and then run the following to "
"install the module."
msgstr ""
"接下来，我们必须将项目安装为 python 模块。导航到刚创建的目录（它将包含项目的 ``source`` 和 ``scripts`` "
"目录），然后运行以下命令以安装模块。"

#: ../../source/setup/walkthrough/project_setup.rst:34
msgid "To verify that things have been setup properly, run"
msgstr "要验证设置是否正确，"

#: ../../source/setup/walkthrough/project_setup.rst:40
msgid ""
"from the root directory of your new project.  This should generate a table "
"that looks something like the following"
msgstr "请从新项目的根目录运行。这将生成一个类似以下表格的表格"

#: ../../source/setup/walkthrough/project_setup.rst:52
msgid "We can now use the task name to run the environment."
msgstr "现在，我们可以使用任务名称来运行环境。"

#: ../../source/setup/walkthrough/project_setup.rst:58
msgid "and by default, this should start a cartpole training environment."
msgstr "默认情况下，这应该启动一个cartpole训练环境。"

#: ../../source/setup/walkthrough/project_setup.rst:60
msgid ""
"Let the training finish and then run the following command to see the "
"trained policy in action!"
msgstr "训练完成后，运行以下命令以查看训练过程中得到的策略！"

#: ../../source/setup/walkthrough/project_setup.rst:66
msgid ""
"Notice that you did not need to specify the path for the checkpoint file! "
"This is because Isaac Lab handles much of the minute details like checkpoint"
" saving, loading, and logging. In this case, the ``train.py`` script will "
"create two directories: **logs** and **output**, which are used as the "
"default output directories for tasks run by this project."
msgstr ""
"请注意，您无需指定检查点文件的路径！这是因为 Isaac Lab 处理诸如检查点保存、加载和记录等许多细节。在这种情况下， ``train.py`` "
"脚本将创建两个目录: **logs** 和 **output** ，它们用作此项目运行的任务的默认输出目录。"

#: ../../source/setup/walkthrough/project_setup.rst:72
msgid "Project Structure"
msgstr "项目结构"

#: ../../source/setup/walkthrough/project_setup.rst:74
msgid ""
"There are four nested structures you need to be aware of when working in the"
" direct workflow with an Isaac Lab template project: the **Project**, the "
"**Extension**, the **Modules**, and the **Task**."
msgstr ""
"在直接工作流程中，Isaac Lab 模板项目有四个嵌套结构，您需要了解的是: **Project** 、 **Extension** 、 "
"**Modules** 和 **Task** 。"

#: ../../source/setup/walkthrough/project_setup.rst:-1
msgid "The structure of the isaac lab template project."
msgstr "isaac 实验室模板项目的结构。"

#: ../../source/setup/walkthrough/project_setup.rst:82
msgid ""
"The **Project** is the root directory of the generated template.  It "
"contains the source and scripts directories, as well as a ``README.md`` "
"file. When we created the template, we named the project *IsaacLabTutorial* "
"and this defined the root directory of a git repository.   If you examine "
"the project root with hidden files visible you will see a number of files "
"defining the behavior of the project with respect to git. The ``scripts`` "
"directory contains the ``train.py`` and ``play.py`` scripts for the various "
"RL libraries you chose when generating the template, while the source "
"directory contains the python packages for the project."
msgstr ""
"**Project** 是生成模板的根目录。它包含源代码和脚本目录，以及一个 ``README.md`` 文件。当我们创建模板时，我们将项目命名为 "
"*IsaacLabTutorial* ，这将定义 git 存储库的根目录。如果您检查包含隐藏文件的项目根目录，您将看到定义项目行为的许多文件与 git "
"有关。 ``scripts`` 目录包含您在生成模板时选择的各个 RL 库的 ``train.py`` 和 ``play.py`` "
"脚本，而源代码目录包含项目的 python 包。"

#: ../../source/setup/walkthrough/project_setup.rst:88
msgid ""
"The **Extension** is the name of the python package we installed via pip. By"
" default, the template generates a project with a single extension of the "
"same name. A project can have multiple extensions, and so they are kept in a"
" common ``source`` directory. Traditional python packages are defined by the"
" presence of a ``pyproject.toml`` file that describes the package metadata, "
"but packages using Isaac Lab must also be Isaac Sim extensions and so "
"require a ``config`` directory and an accompanying ``extension.toml`` file "
"that describes the metadata needed by the Isaac Sim extension manager. "
"Finally, because the template is intended to be installed via pip, it needs "
"a ``setup.py`` file to complete the setup procedure using the "
"``extension.toml`` config. A project can have multiple extensions, as "
"evidenced by the Isaac Lab repository itself!"
msgstr ""
"**Extension** 是我们通过 pip 安装的 python "
"包的名称。默认情况下，模板生成一个具有相同名称的单个扩展项目。一个项目可以有多个扩展，因此它们保存在一个常见的 ``source`` 目录中。传统的 "
"python 包是通过存在描述包元数据的 ``pyproject.toml`` 文件定义的，但是使用 Isaac Lab 的包还必须是 Isaac "
"Sim 扩展，因此需要一个包含在 ``config`` 目录中的 ``extension.toml`` 文件，以及一个附带的 "
"``extension.toml`` 文件，它描述了 Isaac Sim 扩展管理器需要的元数据。最后，因为模板旨在通过 pip 安装，所以它需要一个 "
"``setup.py`` 文件来使用 ``extension.toml`` 配置完成设置过程。一个项目可以有多个扩展，正如 Isaac Lab "
"存储库本身所示！"

#: ../../source/setup/walkthrough/project_setup.rst:96
msgid ""
"The **Modules** are what actually gets loaded by Isaac Lab to run training "
"(the meat of the code). By default, the template generates an extension with"
" a single module that is named the same as the project. The structure of the"
" various sub-modules in the extension is what determines the ``entry_point``"
" for an environment in Isaac Lab. This is why our template project needed to"
" be installed before we could call ``train.py``: the path to the necessary "
"components to run the task needed to be exposed to python for Isaac Lab to "
"find them."
msgstr ""
"**Modules** 是 Isaac Lab "
"加载以运行训练（代码的核心）。默认情况下，模板生成一个具有与项目相同名称的单个模块的扩展。扩展中各个子模块的结构决定了在 Isaac Lab "
"中运行环境的 ``entry_point`` 。这就是为什么我们需要在调用 ``train.py`` 之前安装模板项目的原因: "
"运行任务所需的组件的路径需要对 python 公开才能让 Isaac Lab 找到它们。"

#: ../../source/setup/walkthrough/project_setup.rst:102
msgid ""
"Finally, the **Task** is the heart of the direct workflow. By default, the "
"template generates a single task with the same name as the project. The "
"environment and configuration files are stored here, as well as placeholder,"
" RL library dependent ``agents``. Critically, note the contents of the "
"``__init__.py``! Specifically, the ``gym.register`` function needs to be "
"called at least once before an environment and task can be used with the "
"Isaac Lab ``train.py`` and ``play.py`` scripts. This function should be "
"included in one of the module ``__init__.py`` files so it is called at "
"installation. The path to this init file is what defines the entry point for"
" the task!"
msgstr ""
"最后，**Task** 是直接工作流的核心。默认情况下，模板生成一个与项目同名的单个任务。环境和配置文件存储在这里，以及占位符、依赖于 RL 库的 "
"``agents`` 。请注意 ``__init__.py`` 的内容！具体来说， ``gym.register`` 函数至少需要在用 Isaac "
"Lab 的 ``train.py`` 和 ``play.py`` 脚本使用环境和任务之前调用一次。这个函数应该包含在一个模块的 "
"``__init__.py`` 文件中，以便在安装时调用。这个 init 文件的路径定义了任务的入口点！"

#: ../../source/setup/walkthrough/project_setup.rst:109
msgid ""
"For the template, ``gym.register`` is called within "
"``isaac_lab_tutorial/source/isaac_lab_tutorial/isaac_lab_tutorial/tasks/direct/isaac_lab_tutorial/__init__.py``."
" The repeated name is a consequence of needing default names for the "
"template, but now we can see the structure of the project. "
"**Project**/source/**Extension**/**Module**/tasks/direct/**Task**/__init__.py"
msgstr ""
"对于模板， ``gym.register`` 在 "
"``isaac_lab_tutorial/source/isaac_lab_tutorial/isaac_lab_tutorial/tasks/direct/isaac_lab_tutorial/__init__.py``"
" 中调用。重复的名称是需要模板的默认名称，但现在我们可以看到项目的结构。 "
"**Project**/source/**Extension**/**Module**/tasks/direct/**Task**/__init__.py"
