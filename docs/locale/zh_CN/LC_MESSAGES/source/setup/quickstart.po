# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-26 11:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/setup/quickstart.rst:4
msgid "Quickstart Guide"
msgstr ""

#: ../../source/setup/quickstart.rst:7
msgid ""
"This guide is written for those who just can't wait to get their hands "
"dirty and will touch on the most common concepts you will encounter as "
"you build your own projects with Isaac Lab! This includes installation, "
"running RL, finding environments, creating new projects, and more!"
msgstr ""

#: ../../source/setup/quickstart.rst:10
msgid ""
"The power of Isaac Lab comes from from a few key features that we will "
"very briefly touch on in this guide."
msgstr ""

#: ../../source/setup/quickstart.rst:12
msgid ""
"**Vectorization**: Reinforcement Learning requires attempting a task many"
" times. Isaac Lab speeds this process along by vectorizing the "
"environment, a process by which training can be run in parallel across "
"many copies of the same environment, thus reducing the amount of time "
"spent on collecting data before the weights of the model can be updated. "
"Most of the codebase is devoted to defining those parts of the "
"environment that need to be touched by this vectorization system"
msgstr ""

#: ../../source/setup/quickstart.rst:17
msgid ""
"**Modular Design**: Isaac Lab is designed to be modular, meaning that you"
" can design your projects to have various components that can be swapped "
"out for different needs. For example, suppose you want to train a policy "
"that supports a specific subset of robots.  You could design the "
"environment and task to be robot agnostic by writing a controller "
"interface layer in the form of one of our Manager classes (the "
"``ActionManager`` in this specific case). Most of the rest of the "
"codebase is devoted to defining those parts of your project that need to "
"be touched by this manager system."
msgstr ""

#: ../../source/setup/quickstart.rst:22
msgid ""
"To get started, we will first install Isaac Lab and launch a training "
"script."
msgstr ""

#: ../../source/setup/quickstart.rst:25
msgid "Quick Installation Guide"
msgstr ""

#: ../../source/setup/quickstart.rst:27
msgid ""
"There are many ways to :ref:`install <isaaclab-installation-root>` Isaac "
"Lab, but for the purposes of this quickstart guide, we will follow the "
"pip install route using virtual environments."
msgstr ""

#: ../../source/setup/quickstart.rst:33
msgid ""
"If you are using Ubuntu 20.04, you will need to follow the :ref:`Binary "
"Installation Guide <isaaclab-binaries-installation>` instead of the pip "
"install route described below."
msgstr ""

#: ../../source/setup/quickstart.rst:36
msgid "To begin, we first define our virtual environment."
msgstr ""

#: ../../source/setup/quickstart.rst
msgid ":icon:`fa-brands fa-linux` Linux"
msgstr ""

#: ../../source/setup/quickstart.rst
msgid ":icon:`fa-brands fa-windows` Windows"
msgstr ""

#: ../../source/setup/quickstart.rst:61
msgid ""
"Next, we need to install the CUDA-enabled version of PyTorch 2.5.1. This "
"step is optional for Linux, but required for Windows to ensure a CUDA-"
"compatible version of PyTorch is installed. If in doubt on which version "
"to use, use 11.8."
msgstr ""

#: ../../source/setup/quickstart.rst
msgid "CUDA 11"
msgstr ""

#: ../../source/setup/quickstart.rst
msgid "CUDA 12"
msgstr ""

#: ../../source/setup/quickstart.rst:78
msgid ""
"Before we can install Isaac Sim, we need to make sure pip is updated.  To"
" update pip, run"
msgstr ""

#: ../../source/setup/quickstart.rst:97
msgid "and now we can install the Isaac Sim packages."
msgstr ""

#: ../../source/setup/quickstart.rst:103
msgid ""
"Finally, we can install Isaac Lab.  To start, clone the repository using "
"the following"
msgstr ""

#: ../../source/setup/quickstart.rst
msgid "SSH"
msgstr ""

#: ../../source/setup/quickstart.rst
msgid "HTTPS"
msgstr ""

#: ../../source/setup/quickstart.rst:119
msgid ""
"Installation is now as easy as navigating to the repo and then calling "
"the root script with the ``--install`` flag!"
msgstr ""

#: ../../source/setup/quickstart.rst:140
msgid "Launch Training"
msgstr ""

#: ../../source/setup/quickstart.rst:142
msgid ""
"The various backends of Isaac Lab are accessed through their "
"corresponding ``train.py`` and ``play.py`` scripts located in the "
"``isaaclab/scripts/reinforcement_learning`` directory. Invoking these "
"scripts will require a **Task Name** and a corresponding **Entry Point** "
"to the gymnasium API. For example"
msgstr ""

#: ../../source/setup/quickstart.rst:149
msgid ""
"This will train the mujoco ant to \"run\".  You can see the various "
"launch option available to you with the ``--help`` flag.  Note "
"specifically the ``--num_envs`` option and the ``--headless`` flag, both "
"of which can be useful when trying to develop and debug a new "
"environment. Options specified at this level automatically overwrite any "
"configuration equivalent that may be defined in the code (so long as "
"those definitions are part of a ``@configclass``, see below)."
msgstr ""

#: ../../source/setup/quickstart.rst:154
msgid "List Available Environments"
msgstr ""

#: ../../source/setup/quickstart.rst:156
msgid ""
"Above, ``Isaac-Ant-v0`` is the task name and ``skrl`` is the RL framework"
" being used.  The ``Isaac-Ant-v0`` environment has been registered with "
"the `Gymnasium API <https://gymnasium.farama.org/>`_, and you can see how"
" the entry point is defined by calling the ``list_envs.py`` script, which"
" can be found in ``isaaclab/scripts/environments/lsit_envs.py``. You "
"should see entries like the following"
msgstr ""

#: ../../source/setup/quickstart.rst:181
msgid ""
"Notice that there are two different ``Ant`` tasks, one for a ``Direct`` "
"environment and one for a ``ManagerBased`` environment. These are the "
":ref:`two primary workflows<feature-workflows>` that you can use with "
"Isaac Lab out of the box. The Direct workflow will give you the shortest "
"path to a working custom environment for reinforcement learning, but the "
"Manager based workflow will give your project the modularity required for"
" more generalized development.  For the purposes of this quickstart "
"guide, we will only focus on the Direct workflow."
msgstr ""

#: ../../source/setup/quickstart.rst:188
msgid "Generate Your Own Project"
msgstr ""

#: ../../source/setup/quickstart.rst:190
msgid ""
"Getting a new project started with Isaac Lab can seem daunting at first, "
"but this is why we provide the :ref:`template generator<template-"
"generator>`, to rapidly boilerplate a new project via the command line."
msgstr ""

#: ../../source/setup/quickstart.rst:197
msgid "This will create a new project for you based on the settings you choose"
msgstr ""

#: ../../source/setup/quickstart.rst:199
msgid ""
"**External vs Internal**: Determines if the project is meant to be built "
"as a part of the isaac lab repository, or if it is meant to be loaded as "
"an external extension."
msgstr ""

#: ../../source/setup/quickstart.rst:201
msgid ""
"**Direct vs Manager**: A direct task primarily contains all the "
"implementation details within the environment definition, while a manager"
" based project is meant to use our modular definitions for the different "
"\"parts\" of an environment."
msgstr ""

#: ../../source/setup/quickstart.rst:203
msgid ""
"**Framework**: You can select more than one option here.  This determines"
" which RL frameworks you intend to natively use with your project (which "
"specific algorithm implementations you want to use for training)."
msgstr ""

#: ../../source/setup/quickstart.rst:206
msgid "Once created, navigate to the installed project and run"
msgstr ""

#: ../../source/setup/quickstart.rst:212
msgid ""
"to complete the installation process and register the environment.  "
"Within the directories created by the template generator, you will find "
"at least one ``__init__.py`` file with something that looks like the "
"following"
msgstr ""

#: ../../source/setup/quickstart.rst:229
msgid ""
"This is the function that actually registers an environment for future "
"use.  Notice that the ``entry_point`` is literally just the python module"
" path to the environment definition.  This is why we need to install the "
"project as a package: the module path **is** the entry point for the "
"gymnasium API."
msgstr ""

#: ../../source/setup/quickstart.rst:234
msgid "Configurations"
msgstr ""

#: ../../source/setup/quickstart.rst:236
msgid ""
"Regardless of what you are going to be doing with Isaac Lab, you will "
"need to deal with **Configurations**. Configurations can all be "
"identified by the inclusion of the ``@configclass`` decorator above their"
" class definition and the lack of an ``__init__`` function. For example, "
"consider this configuration class for the :ref:`cartpole environment "
"<tutorial-create-direct-rl-env>`."
msgstr ""

#: ../../source/setup/quickstart.rst:274
msgid ""
"Notice that the entire class definition is just a list of value fields "
"and other configurations. Configuration classes are necessary for "
"anything that needs to care about being vectorized by the lab during "
"training. If you want to be able to copy an environment thousands of "
"times, and manage the data from each asynchronously, you need to somehow "
"\"label\" what parts of the scene matter to this copying process "
"(vectorization). This is what the configuration classes accomplish!"
msgstr ""

#: ../../source/setup/quickstart.rst:279
msgid ""
"In this case, the class defines the configuration for the entire training"
" environment! Notice also the ``num_envs`` variable in the "
"``InteractiveSceneCfg``. This actually gets overwritten by the CLI "
"argument from within the ``train.py`` script.  Configurations provide a "
"direct path to any variable in the configuration hierarchy, making it "
"easy to modify anything \"configured\" by the environment at launch time."
msgstr ""

#: ../../source/setup/quickstart.rst:284
msgid "Robots"
msgstr ""

#: ../../source/setup/quickstart.rst:286
msgid ""
"Robots are entirely defined as instances of configurations within Isaac "
"Lab.  If you examine ``source/isaaclab_assets/isaaclab_assets/robots``, "
"you will see a number of files, each of which contains configurations for"
" the robot in question.  The purpose of these individual files is to "
"better define scope for all the different robots, but there is nothing "
"preventing you from :ref:`adding your own <tutorial-add-new-robot>` to "
"your project or even to the ``isaaclab`` repository! For example, "
"consider the following configuration for the Dofbot"
msgstr ""

#: ../../source/setup/quickstart.rst:343
msgid ""
"This completely defines the dofbot! You could copy this into a ``.py`` "
"file and import it as a module and you would be able to use the dofbot in"
" your own lab sims. One common feature you will see in any config "
"defining things with state is the presence of an ``InitialStateCfg``.  "
"Remember, the configurations are what informs vectorization, and it's the"
" ``InitialStateCfg`` that describes the state of the joints of our robot "
"when it gets created in each environment. The ``ImplicitActuatorCfg`` "
"defines the joints of the robot using the default actuation model "
"determined by the joint time.  Not all joints need to be actuated, but "
"you will get warnings if you don't.  If you aren't planning on using "
"those undefined joints, you can generally ignore these."
msgstr ""

#: ../../source/setup/quickstart.rst:350
msgid "Apps and Sims"
msgstr ""

#: ../../source/setup/quickstart.rst:352
msgid ""
"Using the simulation means launching the Isaac Sim app to provide "
"simulation context. If you are not running a task defined by the standard"
" workflows, then you are responsible for creating the app, managing the "
"context, and stepping the simulation forward through time.  This is the "
"\"third workflow\": a **Standalone** app, which is what we call the "
"scripts for the frameworks, demos, benchmarks, etc..."
msgstr ""

#: ../../source/setup/quickstart.rst:356
msgid ""
"The Standalone workflow gives you total control over *everything* in the "
"app and simulation context. Developing standalone apps is discussed at "
"length in the `Isaac Sim documentation "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/index.html>`_ but "
"there are a few points worth touching on that can be incredibly useful."
msgstr ""

#: ../../source/setup/quickstart.rst:379
msgid ""
"The ``AppLauncher`` is the entrypoint to any and all Isaac Sim "
"applications, like Isaac Lab! *Many Isaac Lab and Isaac Sim modules "
"cannot be imported until the app is launched!*.  This is done on the "
"second to last line of the code above, when the ``AppLauncher`` is "
"constructed. The ``app_launcher.app`` is our interface to the Kit App "
"Framework; the broader interstitial code that binds the simulation to "
"things the extension management system, or the GUI, etc...  In the "
"standalone workflow, this interface, often called the ``simulation_app`` "
"is predominantly used to check if the simulation is running, and cleanup "
"after the simulation finishes."
msgstr ""

