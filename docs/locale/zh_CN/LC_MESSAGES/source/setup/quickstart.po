# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-10 09:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/setup/quickstart.rst:4
msgid "Quickstart Guide"
msgstr "快速入门指南"

#: ../../source/setup/quickstart.rst:7
msgid ""
"This guide is written for those who just can't wait to get their hands dirty"
" and will touch on the most common concepts you will encounter as you build "
"your own projects with Isaac Lab! This includes installation, running RL, "
"finding environments, creating new projects, and more!"
msgstr "本指南适用于那些迫不及待地想要动手操作并将涉及到构建自己项目时会遇到的最常见概念！这包括安装、运行 RL、查找环境、创建新项目等！"

#: ../../source/setup/quickstart.rst:10
msgid ""
"The power of Isaac Lab comes from from a few key features that we will very "
"briefly touch on in this guide."
msgstr "Isaac Lab 的强大功能源自几个关键特性，我们将在本指南中简要介绍。"

#: ../../source/setup/quickstart.rst:12
msgid ""
"**Vectorization**: Reinforcement Learning requires attempting a task many "
"times. Isaac Lab speeds this process along by vectorizing the environment, a"
" process by which training can be run in parallel across many copies of the "
"same environment, thus reducing the amount of time spent on collecting data "
"before the weights of the model can be updated. Most of the codebase is "
"devoted to defining those parts of the environment that need to be touched "
"by this vectorization system"
msgstr ""
"**向量化**: 强化学习需要多次尝试一项任务。通过将环境向量化，Isaac Lab "
"可以加速此过程，即通过并行运行多个相同环境的副本来减少在更新模型权重之前收集数据所需的时间。大部分的代码库致力于定义需要通过此向量化系统触及的环境的部分。"

#: ../../source/setup/quickstart.rst:17
msgid ""
"**Modular Design**: Isaac Lab is designed to be modular, meaning that you "
"can design your projects to have various components that can be swapped out "
"for different needs. For example, suppose you want to train a policy that "
"supports a specific subset of robots.  You could design the environment and "
"task to be robot agnostic by writing a controller interface layer in the "
"form of one of our Manager classes (the ``ActionManager`` in this specific "
"case). Most of the rest of the codebase is devoted to defining those parts "
"of your project that need to be touched by this manager system."
msgstr ""
"**模块化设计**: Isaac Lab "
"被设计为模块化，这意味着您可以设计您的项目以具有可根据不同需求替换的各种组件。例如，假设您想训练支持特定子集机器人的策略。您可以通过编写一个控制器接口层来设计环境和任务，以形式化我们其中一种"
" Manager 类（在本例中是 ``ActionManager`` ）。大部分其余的代码库致力于定义您项目中需要被这个管理系统触及的部分。"

#: ../../source/setup/quickstart.rst:22
msgid ""
"To get started, we will first install Isaac Lab and launch a training "
"script."
msgstr "要开始，我们首先会安装 Isaac Lab 并运行一个训练脚本。"

#: ../../source/setup/quickstart.rst:25
msgid "Quick Installation Guide"
msgstr "快速安装指南"

#: ../../source/setup/quickstart.rst:27
msgid ""
"There are many ways to :ref:`install <isaaclab-installation-root>` Isaac "
"Lab, but for the purposes of this quickstart guide, we will follow the pip "
"install route using virtual environments."
msgstr ""
"有许多方式可以 :ref:`安装 <isaaclab-installation-root>` Isaac "
"Lab，但为了本快速入门指南的目的，我们将跟随使用虚拟环境的 pip 安装路线。"

#: ../../source/setup/quickstart.rst:30
msgid "To begin, we first define our virtual environment."
msgstr "要开始，我们首先定义我们的虚拟环境。"

#: ../../source/setup/quickstart.rst:41
msgid "Next, install a CUDA-enabled PyTorch 2.7.0 build."
msgstr "接下来，安装一个支持CUDA的PyTorch 2.7.0版本。"

#: ../../source/setup/quickstart.rst:48
msgid ""
"Before we can install Isaac Sim, we need to make sure pip is updated.  To "
"update pip, run"
msgstr "在安装 Isaac Sim 之前，我们需要确保 pip 已经更新。要更新 pip，请运行"

#: ../../source/setup/quickstart.rst
msgid ":icon:`fa-brands fa-linux` Linux"
msgstr ":icon:`fa-brands fa-linux` Linux"

#: ../../source/setup/quickstart.rst
msgid ":icon:`fa-brands fa-windows` Windows"
msgstr ":icon:`fa-brands fa-windows` Windows"

#: ../../source/setup/quickstart.rst:67
msgid "and now we can install the Isaac Sim packages."
msgstr "现在我们可以安装 Isaac Sim 包。"

#: ../../source/setup/quickstart.rst:73
msgid ""
"Finally, we can install Isaac Lab.  To start, clone the repository using the"
" following"
msgstr "最后，我们可以安装 Isaac Lab。要开始，使用以下命令克隆存储库"

#: ../../source/setup/quickstart.rst
msgid "SSH"
msgstr "SSH"

#: ../../source/setup/quickstart.rst
msgid "HTTPS"
msgstr "HTTPS"

#: ../../source/setup/quickstart.rst:89
msgid ""
"Installation is now as easy as navigating to the repo and then calling the "
"root script with the ``--install`` flag!"
msgstr "安装现在只需要简单地导航到存储库，然后使用带有 ``--install`` 标志的根脚本进行调用！"

#: ../../source/setup/quickstart.rst:110
msgid "Launch Training"
msgstr "启动训练"

#: ../../source/setup/quickstart.rst:112
msgid ""
"The various backends of Isaac Lab are accessed through their corresponding "
"``train.py`` and ``play.py`` scripts located in the "
"``isaaclab/scripts/reinforcement_learning`` directory. Invoking these "
"scripts will require a **Task Name** and a corresponding **Entry Point** to "
"the gymnasium API. For example"
msgstr ""
"通过位于 ``isaaclab/scripts/reinforcement_learning`` 目录中的相应 ``train.py`` 和 "
"``play.py`` 脚本访问 Isaac Lab 的各个后端。调用这些脚本将需要一个 **任务名称** 和对应的 **入口点** 到 "
"gymnasium API。例如"

#: ../../source/setup/quickstart.rst:119
msgid ""
"This will train the mujoco ant to \"run\".  You can see the various launch "
"option available to you with the ``--help`` flag.  Note specifically the "
"``--num_envs`` option and the ``--headless`` flag, both of which can be "
"useful when trying to develop and debug a new environment. Options specified"
" at this level automatically overwrite any configuration equivalent that may"
" be defined in the code (so long as those definitions are part of a "
"``@configclass``, see below)."
msgstr ""
"这将训练 mujoco 蚂蚁 \"奔跑\" 。您可以使用 ``--help`` 标志查看您可用的各种启动选项。请特别注意 ``--num_envs`` "
"选项和 ``--headless`` "
"标志，这两个在尝试开发和调试新环境时非常有用。在此级别指定的选项将自动覆盖代码中可能定义的任何配置等效项（只要这些定义是 "
"``@configclass`` 的一部分，请参阅下文）。"

#: ../../source/setup/quickstart.rst:124
msgid "List Available Environments"
msgstr "列出可用环境"

#: ../../source/setup/quickstart.rst:126
msgid ""
"Above, ``Isaac-Ant-v0`` is the task name and ``skrl`` is the RL framework "
"being used.  The ``Isaac-Ant-v0`` environment has been registered with the "
"`Gymnasium API <https://gymnasium.farama.org/>`_, and you can see how the "
"entry point is defined by calling the ``list_envs.py`` script, which can be "
"found in ``isaaclab/scripts/environments/lsit_envs.py``. You should see "
"entries like the following"
msgstr ""
"上面， ``Isaac-Ant-v0`` 是任务名称， ``skrl``是使用的 RL 框架。 ``Isaac-Ant-v0`` 环境已经在 "
"`Gymnasium API <https://gymnasium.farama.org/>`_ 中注册，您可以通过调用 "
"``list_envs.py`` 脚本查看入口点是如何定义的，可以在 "
"``isaaclab/scripts/environments/lsit_envs.py`` 中找到。您应该会看到如下条目"

#: ../../source/setup/quickstart.rst:151
msgid ""
"Notice that there are two different ``Ant`` tasks, one for a ``Direct`` "
"environment and one for a ``ManagerBased`` environment. These are the "
":ref:`two primary workflows<feature-workflows>` that you can use with Isaac "
"Lab out of the box. The Direct workflow will give you the shortest path to a"
" working custom environment for reinforcement learning, but the Manager "
"based workflow will give your project the modularity required for more "
"generalized development.  For the purposes of this quickstart guide, we will"
" only focus on the Direct workflow."
msgstr ""
"请注意，有两种不同的 ``Ant`` 任务，一种是用于 ``Direct`` 环境，另一种是用于 ``ManagerBased`` 环境。这是您可以在 "
"Isaac Lab 立即使用的 :ref:`两个主要工作流程 <feature-workflows>` 。Direct "
"工作流程将为您提供最快速通往用于强化学习的工作自定义环境的路径，但 Manager based "
"工作流程将为您的项目提供更广泛开发所需的模块化。出于本快速入门指南的目的，我们只会专注于 Direct 工作流程。"

#: ../../source/setup/quickstart.rst:158
msgid "Generate Your Own Project"
msgstr "生成您自己的项目"

#: ../../source/setup/quickstart.rst:160
msgid ""
"Getting a new project started with Isaac Lab can seem daunting at first, but"
" this is why we provide the :ref:`template generator<template-generator>`, "
"to rapidly boilerplate a new project via the command line."
msgstr ""
"使用 Isaac Lab 开始新项目起初可能会让人望而生畏，但这就是为什么我们提供 :ref:`模板生成器 <template-generator>` "
"，通过命令行快速生成新项目的原因。"

#: ../../source/setup/quickstart.rst:167
msgid ""
"This will create a new project for you based on the settings you choose"
msgstr "这将根据您选择的设置为您创建一个新项目"

#: ../../source/setup/quickstart.rst:169
msgid ""
"**External vs Internal**: Determines if the project is meant to be built as "
"a part of the isaac lab repository, or if it is meant to be loaded as an "
"external extension."
msgstr "**外部 vs 内部**: 确定项目是作为 isaac lab 存储库的一部分构建，还是作为外部扩展加载的。"

#: ../../source/setup/quickstart.rst:171
msgid ""
"**Direct vs Manager**: A direct task primarily contains all the "
"implementation details within the environment definition, while a manager "
"based project is meant to use our modular definitions for the different "
"\"parts\" of an environment."
msgstr ""
"**Direct vs Manager**: 直接任务主要包含环境定义中的所有实现细节，而基于 manager "
"的项目则意味着使用我们各种环境“部件”的模块化定义。"

#: ../../source/setup/quickstart.rst:173
msgid ""
"**Framework**: You can select more than one option here.  This determines "
"which RL frameworks you intend to natively use with your project (which "
"specific algorithm implementations you want to use for training)."
msgstr "**框架**: 您可以在这里选择多个选项。这决定了您打算在项目中本地使用的 RL 框架（您想要使用哪些特定算法实现进行训练）。"

#: ../../source/setup/quickstart.rst:176
msgid "Once created, navigate to the installed project and run"
msgstr "创建后，导航到安装的项目并运行"

#: ../../source/setup/quickstart.rst:182
msgid ""
"to complete the installation process and register the environment.  Within "
"the directories created by the template generator, you will find at least "
"one ``__init__.py`` file with something that looks like the following"
msgstr "来完成安装过程并注册环境。在模板生成器创建的目录中，您将至少找到一个具有类似以下内容的 ``__init__.py`` 文件"

#: ../../source/setup/quickstart.rst:199
msgid ""
"This is the function that actually registers an environment for future use."
"  Notice that the ``entry_point`` is literally just the python module path "
"to the environment definition.  This is why we need to install the project "
"as a package: the module path **is** the entry point for the gymnasium API."
msgstr ""
"这是实际为将来使用注册环境的函数。请注意， ``entry_point`` 实际上只是环境定义的 python "
"模块路径。这就是为什么我们需要将项目安装为包: 模块路径 **就是** gymnasium API 的入口点。"

#: ../../source/setup/quickstart.rst:204
msgid "Configurations"
msgstr "配置"

#: ../../source/setup/quickstart.rst:206
msgid ""
"Regardless of what you are going to be doing with Isaac Lab, you will need "
"to deal with **Configurations**. Configurations can all be identified by the"
" inclusion of the ``@configclass`` decorator above their class definition "
"and the lack of an ``__init__`` function. For example, consider this "
"configuration class for the :ref:`cartpole environment <tutorial-create-"
"direct-rl-env>`."
msgstr ""
"无论您在 Isaac Lab 中要做什么，您都需要处理**配置** 。所有配置类都可以通过它们的类定义上方的 ``@configclass`` "
"装饰器和缺少 ``__init__`` 函数来识别。例如，考虑下面这个关于 :ref:`cartpole 环境 <tutorial-create-"
"direct-rl-env>` 的配置类。"

#: ../../source/setup/quickstart.rst:244
msgid ""
"Notice that the entire class definition is just a list of value fields and "
"other configurations. Configuration classes are necessary for anything that "
"needs to care about being vectorized by the lab during training. If you want"
" to be able to copy an environment thousands of times, and manage the data "
"from each asynchronously, you need to somehow \"label\" what parts of the "
"scene matter to this copying process (vectorization). This is what the "
"configuration classes accomplish!"
msgstr ""
"请注意，整个类定义只是一组值字段和其他配置。配置类对于在训练过程中需要关心向量化的任何内容都是必不可少的。 "
"如果您想要能够将环境复制成千上万次，并且异步地管理每个数据，您需要以某种方式 \"标记\" 哪些场景部分对这个复制过程（向量化）是重要的。 "
"这就是配置类的作用！"

#: ../../source/setup/quickstart.rst:249
msgid ""
"In this case, the class defines the configuration for the entire training "
"environment! Notice also the ``num_envs`` variable in the "
"``InteractiveSceneCfg``. This actually gets overwritten by the CLI argument "
"from within the ``train.py`` script.  Configurations provide a direct path "
"to any variable in the configuration hierarchy, making it easy to modify "
"anything \"configured\" by the environment at launch time."
msgstr ""
"在这种情况下，该类定义了整个训练环境的配置！请注意 ``InteractiveSceneCfg`` 中的 ``num_envs`` 变量。这实际上会被 "
"``train.py`` 脚本内部的 CLI "
"参数所覆盖。配置提供了一条通往配置层次结构中的任何变量的直接路径，从而轻松修改在启动时由环境“配置”的任何内容。"

#: ../../source/setup/quickstart.rst:254
msgid "Robots"
msgstr "机器人"

#: ../../source/setup/quickstart.rst:256
msgid ""
"Robots are entirely defined as instances of configurations within Isaac Lab."
"  If you examine ``source/isaaclab_assets/isaaclab_assets/robots``, you will"
" see a number of files, each of which contains configurations for the robot "
"in question.  The purpose of these individual files is to better define "
"scope for all the different robots, but there is nothing preventing you from"
" :ref:`adding your own <tutorial-add-new-robot>` to your project or even to "
"the ``isaaclab`` repository! For example, consider the following "
"configuration for the Dofbot"
msgstr ""
"在 Isaac Lab 中，机器人完全被定义为配置的实例。如果您检查 "
"``source/isaaclab_assets/isaaclab_assets/robots`` "
"，您将看到许多文件，每个文件都包含了有关所讨论机器人的配置。这些单独的文件的目的是更好地定义所有不同机器人的范围，但没有任何阻止您 "
":ref:`向您的项目添加新的机器人 <tutorial-add-new-robot>` ，甚至添加到 ``isaaclab`` "
"存储库中！例如，考虑以下配置中的 Dofbot"

#: ../../source/setup/quickstart.rst:313
msgid ""
"This completely defines the dofbot! You could copy this into a ``.py`` file "
"and import it as a module and you would be able to use the dofbot in your "
"own lab sims. One common feature you will see in any config defining things "
"with state is the presence of an ``InitialStateCfg``.  Remember, the "
"configurations are what informs vectorization, and it's the "
"``InitialStateCfg`` that describes the state of the joints of our robot when"
" it gets created in each environment. The ``ImplicitActuatorCfg`` defines "
"the joints of the robot using the default actuation model determined by the "
"joint time.  Not all joints need to be actuated, but you will get warnings "
"if you don't.  If you aren't planning on using those undefined joints, you "
"can generally ignore these."
msgstr ""
"这完全定义了 dofbot！您可以将此内容复制到一个 ``.py`` 文件中并将其作为模块导入，以便在自己的 lab sims 中使用 "
"dofbot。您将在定义带有状态的事物的任何配置中看到的一个常见特征是 ``InitialStateCfg`` 的存在。请记住，配置是指明向量化的信息，"
" ``InitialStateCfg`` 描述了机器人在每个环境中创建时的关节状态。 ``ImplicitActuatorCfg`` "
"使用由关节时间决定的默认执行模型来定义机器人的关节。并不是所有关节都需要被执行，但如果您不打算使用这些未定义的关节，您将会收到警告。如果您不打算使用这些未定义的关节，您通常可以忽略它们。"

#: ../../source/setup/quickstart.rst:320
msgid "Apps and Sims"
msgstr "Apps 和 Sims"

#: ../../source/setup/quickstart.rst:322
msgid ""
"Using the simulation means launching the Isaac Sim app to provide simulation"
" context. If you are not running a task defined by the standard workflows, "
"then you are responsible for creating the app, managing the context, and "
"stepping the simulation forward through time.  This is the \"third "
"workflow\": a **Standalone** app, which is what we call the scripts for the "
"frameworks, demos, benchmarks, etc..."
msgstr ""
"使用仿真意味着启动 Isaac Sim "
"应用程序以提供仿真上下文。如果您没有运行由标准工作流程定义的任务，则需要负责创建应用程序、管理上下文并通过时间推进仿真。 这是 \"第三个工作流程\" "
": 一个 **独立** 应用程序，这是我们为框架、演示、基准测试等编写的脚本所谓的事情..."

#: ../../source/setup/quickstart.rst:326
msgid ""
"The Standalone workflow gives you total control over *everything* in the app"
" and simulation context. Developing standalone apps is discussed at length "
"in the `Isaac Sim documentation "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/index.html>`_ but there "
"are a few points worth touching on that can be incredibly useful."
msgstr ""
"独立工作流程使您可以完全控制应用程序中的一切和仿真上下文。在 `Isaac Sim 文档 "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/index.html>`_ "
"中详细讨论了开发独立应用程序，但有几点值得着重，因为它们可以非常有用。"

#: ../../source/setup/quickstart.rst:349
msgid ""
"The ``AppLauncher`` is the entrypoint to any and all Isaac Sim applications,"
" like Isaac Lab! *Many Isaac Lab and Isaac Sim modules cannot be imported "
"until the app is launched!*.  This is done on the second to last line of the"
" code above, when the ``AppLauncher`` is constructed. The "
"``app_launcher.app`` is our interface to the Kit App Framework; the broader "
"interstitial code that binds the simulation to things the extension "
"management system, or the GUI, etc...  In the standalone workflow, this "
"interface, often called the ``simulation_app`` is predominantly used to "
"check if the simulation is running, and cleanup after the simulation "
"finishes."
msgstr ""
"``AppLauncher`` 是任何 Isaac Sim 应用程序的入口点，如 Isaac Lab！ *许多 Isaac Lab 和 Isaac "
"Sim 模块直到应用程序启动之后才能导入！* 这是在上面的代码的倒数第二行执行的，当构造 ``AppLauncher`` 时。 "
"``app_launcher.app`` 是我们访问套件应用程序框架的接口；广泛的中介代码将仿真与扩展管理系统、GUI "
"等等绑定在一起。在独立工作流程中，这个界面，通常被称为 ``simulation_app`` 主要用于检查仿真是否正在运行，并在仿真结束后清理。"
