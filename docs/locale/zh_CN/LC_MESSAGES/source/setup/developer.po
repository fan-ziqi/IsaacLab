# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 12:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/setup/developer.rst:2
msgid "Developer's Guide"
msgstr "开发人员指南"

#: ../../source/setup/developer.rst:4
msgid ""
"For development, we suggest using `Microsoft Visual Studio Code (VSCode) "
"<https://code.visualstudio.com/>`__. This is also suggested by NVIDIA "
"Omniverse and there exists tutorials on how to `debug Omniverse extensions "
"<https://www.youtube.com/watch?v=Vr1bLtF1f4U&ab_channel=NVIDIAOmniverse>`__ "
"using VSCode."
msgstr ""
"对于开发，我们建议使用 `Microsoft Visual Studio Code (VSCode) "
"<https://code.visualstudio.com/>`__ 。 NVIDIA "
"Omniverse也建议使用此方法，并且存在有关如何使用VSCode进行 `调试Omniverse扩展 "
"<https://www.youtube.com/watch?v=Vr1bLtF1f4U&ab_channel=NVIDIAOmniverse>`__ 的教程。"

#: ../../source/setup/developer.rst:12
msgid "Setting up Visual Studio Code"
msgstr "设置Visual Studio Code"

#: ../../source/setup/developer.rst:14
msgid ""
"The following is only applicable for Isaac Sim installed via the Omniverse "
"Launcher. The ``Isaac Lab`` repository includes the VSCode settings to "
"easily allow setting up your development environment. These are included in "
"the ``.vscode`` directory and include the following files:"
msgstr ""
"以下仅适用于通过Omniverse Launcher安装的Isaac Sim。 ``Isaac "
"Lab`` 存储库包括VSCode设置，可以轻松设置开发环境。 这些设置包含在 ``.vscode`` 目录中，并包括以下文件："

#: ../../source/setup/developer.rst:32
msgid "To setup the IDE, please follow these instructions:"
msgstr "设置IDE，请按照以下说明进行操作："

#: ../../source/setup/developer.rst:34
msgid "Open the ``Isaac Lab`` directory on Visual Studio Code IDE"
msgstr "在Visual Studio Code IDE中打开 ``Isaac Lab`` 目录"

#: ../../source/setup/developer.rst:35
msgid ""
"Run VSCode `Tasks <https://code.visualstudio.com/docs/editor/tasks>`__, by "
"pressing ``Ctrl+Shift+P``, selecting ``Tasks: Run Task`` and running the "
"``setup_python_env`` in the drop down menu."
msgstr ""
"通过按下 ``Ctrl+Shift+P`` ，选择 ``Tasks: Run "
"Task`` 并运行下拉菜单中的 ``setup_python_env`` 来运行VSCode `Tasks "
"<https://code.visualstudio.com/docs/editor/tasks>`__。"

#: ../../source/setup/developer.rst
msgid "VSCode Tasks"
msgstr "VSCode任务"

#: ../../source/setup/developer.rst:44
msgid ""
"If everything executes correctly, it should create the following files:"
msgstr "如果一切正常执行，它应该创建以下文件："

#: ../../source/setup/developer.rst:46
msgid ""
"``.vscode/launch.json``: Contains the launch configurations for debugging "
"python code."
msgstr "``.vscode/launch.json``: 包含用于调试 Python 代码的启动配置。"

#: ../../source/setup/developer.rst:47
msgid ""
"``.vscode/settings.json``: Contains the settings for the python interpreter "
"and the python environment."
msgstr "``.vscode/settings.json``: 包含 Python 解释器和 Python 环境的设置。"

#: ../../source/setup/developer.rst:49
msgid ""
"For more information on VSCode support for Omniverse, please refer to the "
"following links:"
msgstr "有关Omniverse的VSCode支持的更多信息，请参阅以下链接："

#: ../../source/setup/developer.rst:52
msgid ""
"`Isaac Sim VSCode support "
"<https://docs.omniverse.nvidia.com/app_isaacsim/app_isaacsim/manual_standalone_python.html#isaac-"
"sim-python-vscode>`__"
msgstr ""
"`Isaac Sim VSCode支持 "
"<https://docs.omniverse.nvidia.com/app_isaacsim/app_isaacsim/manual_standalone_python.html#isaac-"
"sim-python-vscode>`__"

#: ../../source/setup/developer.rst:53
msgid ""
"`Debugging with VSCode "
"<https://docs.omniverse.nvidia.com/isaacsim/latest/advanced_tutorials/tutorial_advanced_python_debugging.html>`__"
msgstr ""
"`使用VSCode进行调试 "
"<https://docs.omniverse.nvidia.com/isaacsim/latest/advanced_tutorials/tutorial_advanced_python_debugging.html>`__"

#: ../../source/setup/developer.rst:57
msgid "Configuring the python interpreter"
msgstr "配置Python解释器"

#: ../../source/setup/developer.rst:59
msgid ""
"In the provided configuration, we set the default python interpreter to use "
"the python executable provided by Omniverse. This is specified in the "
"``.vscode/settings.json`` file:"
msgstr ""
"在提供的配置中，我们将默认Python解释器设置为使用Omniverse提供的Python可执行文件。 "
"这在 ``.vscode/settings.json`` 文件中指定："

#: ../../source/setup/developer.rst:69
msgid ""
"If you want to use a different python interpreter (for instance, from your "
"conda environment), you need to change the python interpreter used by "
"selecting and activating the python interpreter of your choice in the bottom"
" left corner of VSCode, or opening the command palette (``Ctrl+Shift+P``) "
"and selecting ``Python: Select Interpreter``."
msgstr ""
"如果您想要使用不同的Python解释器（例如，来自您的conda环境），则需要通过选择和激活您选择的Python解释器来更改所使用的Python解释器VSCode的左下角，或者打开命令面板（``Ctrl+Shift+P``）并选择 ``Python:"
" Select Interpreter`` 。"

#: ../../source/setup/developer.rst:74
msgid ""
"For more information on how to set python interpreter for VSCode, please "
"refer to the `VSCode documentation "
"<https://code.visualstudio.com/docs/python/environments#_working-with-"
"python-interpreters>`_."
msgstr ""
"有关如何为VSCode设置Python解释器的更多信息，请参阅 `VSCode文档 "
"<https://code.visualstudio.com/docs/python/environments#_working-with-"
"python-interpreters>`_ 。"

#: ../../source/setup/developer.rst:78
msgid "Repository organization"
msgstr "存储库组织"

#: ../../source/setup/developer.rst:80
msgid "The ``Isaac Lab`` repository is structured as follows:"
msgstr " ``Isaac Lab`` 存储库的结构如下："

#: ../../source/setup/developer.rst:105
msgid ""
"The ``source`` directory contains the source code for all ``Isaac Lab`` "
"*extensions* and *standalone applications*. The two are the different "
"development workflows supported in `Isaac Sim "
"<https://docs.omniverse.nvidia.com/isaacsim/latest/introductory_tutorials/tutorial_intro_workflows.html>`__."
" These are described in the following sections."
msgstr ""
" ``source`` 目录包含所有 ``Isaac Lab`` *扩展* 和 *独立应用程序* 的源代码。 这两种开发工作流受到了 `Isaac Sim "
"<https://docs.omniverse.nvidia.com/isaacsim/latest/introductory_tutorials/tutorial_intro_workflows.html>`__ 的支持。"
" 这些在以下章节中有所描述。"

#: ../../source/setup/developer.rst:111
msgid "Extensions"
msgstr "扩展"

#: ../../source/setup/developer.rst:113
msgid ""
"Extensions are the recommended way to develop applications in Isaac Sim. "
"They are modularized packages that formulate the Omniverse ecosystem. Each "
"extension provides a set of functionalities that can be used by other "
"extensions or standalone applications. A folder is recognized as an "
"extension if it contains an ``extension.toml`` file in the ``config`` "
"directory. More information on extensions can be found in the `Omniverse "
"documentation <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
"推荐的方法是在Isaac Sim中开发应用程序的扩展。它们是模块化的软件包，构成了Omniverse生态系统。 "
"每个扩展都提供一组功能，可供其他扩展或独立应用程序使用。 "
"如果包含 ``config`` 目录中的 ``extension.toml`` 文件，则将一个文件夹识别为扩展。 "
"有关扩展的更多信息，请参阅 `Omniverse文档 <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__ 。"

#: ../../source/setup/developer.rst:120
msgid ""
"Isaac Lab in itself provides extensions for robot learning. These are "
"written into the ``source/extensions`` directory. Each extension is written "
"as a python package and follows the following structure:"
msgstr ""
"Isaac Lab本身提供了用于机器人学习的扩展。 这些扩展写入 ``source/extensions`` 目录。 "
"每个扩展都以Python包的形式编写，并遵循以下结构："

#: ../../source/setup/developer.rst:139
msgid ""
"The ``config/extension.toml`` file contains the metadata of the extension. "
"This includes the name, version, description, dependencies, etc. This "
"information is used by Omniverse to load the extension. The ``docs`` "
"directory contains the documentation for the extension with more detailed "
"information about the extension and a CHANGELOG file that contains the "
"changes made to the extension in each version."
msgstr ""
" ``config/extension.toml`` 文件包含扩展的元数据。 这包括名称，版本，描述，依赖关系等。 "
"Omniverse使用这些信息来加载扩展。 ``docs`` 目录包含有关扩展的具有更多详细信息的文档以及包含扩展每个版本更改的CHANGELOG文件。"

#: ../../source/setup/developer.rst:145
msgid ""
"The ``<extension-name>`` directory contains the main python package for the "
"extension. It may also contains the ``scripts`` directory for keeping "
"python-based applications that are loaded into Omniverse when then extension"
" is enabled using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
" ``<extension-name>`` 文件夹包含扩展的主Python包。 "
"它还可能包含 ``scripts`` 目录，用于保存在启用扩展时加载到Omniverse中的基于Python的应用程序的文件。使用 `扩展管理器 "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__ 。"

#: ../../source/setup/developer.rst:150
msgid ""
"More specifically, when an extension is enabled, the python module specified"
" in the ``config/extension.toml`` file is loaded and scripts that contains "
"children of the :class:`omni.ext.IExt` class are executed."
msgstr ""
"更具体地说，启用扩展时， ``config/extension.toml`` 文件中指定的Python模块被加载，并且包含：omni.ext.IExt类的子级的脚本会被执行。"

#: ../../source/setup/developer.rst:172
msgid ""
"While loading extensions into Omniverse happens automatically, using the "
"python package in standalone applications requires additional steps. To "
"simplify the build process and avoiding the need to understand the `premake "
"<https://premake.github.io/>`__ build system used by Omniverse, we directly "
"use the `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ python"
" package to build the python module provided by the extensions. This is done"
" by the ``setup.py`` file in the extension directory."
msgstr ""
"将扩展加载到Omniverse中是自动进行的，但是在独立应用程序中使用Python包需要额外的步骤。 "
"为了简化构建过程并避免需要了解Omniverse使用的 `premake "
"<https://premake.github.io/>`__ 构建系统，我们直接使用 `setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ Python软件包来构建扩展的Python模块。 "
"这是通过扩展目录中的 ``setup.py`` 文件完成的。"

#: ../../source/setup/developer.rst:181
msgid ""
"The ``setup.py`` file is not required for extensions that are only loaded "
"into Omniverse using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__."
msgstr ""
" ``setup.py`` 文件不适用于只使用 `扩展管理器 "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__ 加载到Omniverse中的扩展。"

#: ../../source/setup/developer.rst:184
msgid ""
"Lastly, the ``tests`` directory contains the unit tests for the extension. "
"These are written using the `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ framework. It is "
"important to note that Omniverse also provides a similar `testing framework "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__. However, it requires going "
"through the build process and does not support testing of the python module "
"in standalone applications."
msgstr ""
"最后， ``tests`` 目录包含扩展的单元测试。 这是使用 `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ 框架编写的。 "
"需要注意的是Omniverse还提供了类似的 `测试框架 <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__ 。 "
"但是，它需要经过构建过程，并且不支持独立应用程序中Python模块的测试。"

#: ../../source/setup/developer.rst:192
msgid "Extension Dependency Management"
msgstr "扩展依赖管理"

#: ../../source/setup/developer.rst:194
msgid ""
"Certain extensions may have dependencies which need to be installed before "
"the extension can be run. While Python dependencies can be expressed via the"
" ``INSTALL_REQUIRES`` array in ``setup.py``, we need a separate installation"
" pipeline to handle non-Python dependencies. We have therefore created an "
"additional setup procedure, ``python tools/install_deps.py {dep_type} "
"{extensions_dir}``, which scans the ``extension.toml`` file of the "
"directories under the ``{extensions_dir}`` (such as "
"``${ISAACLAB_PATH}/source/extensions``) for ``apt`` and ``rosdep`` "
"dependencies."
msgstr ""
"某些扩展可能具有依赖关系，需要在扩展可以运行之前进行安装。 "
"尽管可以通过 ``setup.py`` 中的 ``INSTALL_REQUIRES`` 数组来指定Python依赖项，但是我们需要一个单独的安装流程来处理非Python依赖项。"
" 因此，我们创建了一个额外的设置过程，``python tools/install_deps.py {dep_type} "
"{extensions_dir}``，它会扫描 ``{extensions_dir}`` （例如 ``${ISAACLAB_PATH}/source/extensions`` ）下的目录的 ``extension.toml`` 文件，以扫描出 ``apt`` 和 ``rosdep`` 依赖项。"

#: ../../source/setup/developer.rst:200
msgid ""
"This example ``extension.toml`` has both ``apt_deps`` and ``ros_ws`` "
"specified, so both ``apt`` and ``rosdep`` packages will be installed if "
"``python tools/install_deps.py all ${ISAACLAB_PATH}/source/extensions`` is "
"passed:"
msgstr ""
"在上例的 ``extension.toml`` 中，指定了 ``apt_deps`` 和 ``ros_ws`` ，因此如果传递 ``python "
"tools/install_deps.py all "
"${ISAACLAB_PATH}/source/extensions`` ，则会安装 ``apt`` 和 ``rosdep`` 包："

#: ../../source/setup/developer.rst:210
msgid ""
"From the ``apt_deps`` in the above example, the package ``example_package`` "
"would be installed via ``apt``. From the ``ros_ws``, a ``rosdep install "
"--from-paths {ros_ws}/src --ignore-src`` command will be called. This will "
"install all the `ROS package.xml dependencies "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ in "
"the directory structure below. Currently the ROS distro is assumed to be "
"``humble``."
msgstr ""
"从上例的 ``apt_deps`` 中，将通过 ``apt`` 安装包 ``example_package`` 。 从 ``ros_ws`` 中，将调用 ``rosdep"
" install --from-paths {ros_ws}/src --ignore-src`` 命令。 这将安装以下目录结构中的所有 `ROS "
"package.xml依赖项 "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ 。当前假定ROS版本为 ``humble`` 。"

#: ../../source/setup/developer.rst:215
msgid ""
"``apt`` deps are automatically installed this way during the build process "
"of the ``Dockerfile.base``, and ``rosdep`` deps during the build process of "
"``Dockerfile.ros2``."
msgstr ""
" ``apt`` deps 在 ``Dockerfile.base`` 的构建过程中将自动以这种方式进行安装， ``rosdep`` "
"deps 在 ``Dockerfile.ros2`` 的构建过程中进行安装。"

#: ../../source/setup/developer.rst:220
msgid "Standalone applications"
msgstr "独立应用程序"

#: ../../source/setup/developer.rst:222
msgid ""
"In a typical Omniverse workflow, the simulator is launched first, after "
"which the extensions are enabled that load the python module and run the "
"python application. While this is a recommended workflow, it is not always "
"possible to use this workflow. For example, for robot learning, it is "
"essential to have complete control over simulation stepping and all the "
"other functionalities instead of asynchronously waiting for the simulator to"
" step. In such cases, it is necessary to write a standalone application that"
" launches the simulator using :class:`~omni.isaac.lab.app.AppLauncher` and "
"allows complete control over the simulation through the "
":class:`~omni.isaac.lab.sim.SimulationContext` class."
msgstr ""
"在典型的Omniverse工作流程中，首先启动模拟器，然后启用扩展以加载Python模块并运行Python应用程序。 "
"尽管这是一种推荐的工作流程，但并非总是可以使用此工作流程。 例如，对于机器人学习，需要对模拟器进行完全控制，而不是异步等待模拟器进行操作的所有其他功能。"
" "
"在这种情况下，有必要编写一个独立应用程序，该应用程序使用:class: `~omni.isaac.lab.app.AppLauncher` 启动模拟器，并通过:class: `~omni.isaac.lab.sim.SimulationContext` 类对模拟进行完全控制。"

#: ../../source/setup/developer.rst:260
msgid ""
"The ``source/standalone`` directory contains various standalone applications"
" designed using the extensions provided by ``Isaac Lab``. These applications"
" are written in python and are structured as follows:"
msgstr ""
" ``source/standalone`` 目录包含使用 ``Isaac Lab`` 提供的扩展设计的各种独立应用程序。 "
"这些应用程序以Python编写，并且拥有以下结构："

#: ../../source/setup/developer.rst:263
msgid ""
"**demos**: Contains various demo applications that showcase the core "
"framework ``omni.isaac.lab``."
msgstr "**演示**：包含展示核心框架 ``omni.isaac.lab`` 的各种演示应用程序。"

#: ../../source/setup/developer.rst:264
msgid ""
"**environments**: Contains applications for running environments defined in "
"``omni.isaac.lab_tasks`` with different agents. These include a random "
"policy, zero-action policy, teleoperation or scripted state machines."
msgstr ""
"**环境**：包含用于运行 ``omni.isaac.lab_tasks`` 中定义的具有不同代理的环境的应用程序。 "
"这些包括随机策略，零动作策略，遥操作或脚本状态机。"

#: ../../source/setup/developer.rst:266
msgid ""
"**tools**: Contains applications for using the tools provided by the "
"framework. These include converting assets, generating datasets, etc."
msgstr "**工具**：包含用于使用框架提供的工具的应用程序。 这些包括转换资产，生成数据集等。"

#: ../../source/setup/developer.rst:268
msgid ""
"**tutorials**: Contains step-by-step tutorials for using the APIs provided "
"by the framework."
msgstr "**教程**：包含使用框架提供的API的分步教程。"

#: ../../source/setup/developer.rst:269
msgid ""
"**workflows**: Contains applications for using environments with various "
"learning-based frameworks. These include different reinforcement learning or"
" imitation learning libraries."
msgstr "**工作流程**：包含使用各种基于学习的框架的环境的应用程序。 这些包括不同的强化学习或模拟学习库。"

#~ msgid ""
#~ "If everything executes correctly, it should create a file ``.python.env`` in"
#~ " the ``.vscode`` directory. The file contains the python paths to all the "
#~ "extensions provided by Isaac Sim and Omniverse. This helps in indexing all "
#~ "the python modules for intelligent suggestions while writing code."
#~ msgstr ""
#~ "如果一切执行正确，则它应该在``.vscode``目录中创建一个名为``.python.env``的文件。 该文件包含Isaac "
#~ "Sim和Omniverse提供的所有扩展的Python路径。 这有助于在编写代码时对所有Python模块进行索引以获取智能建议。"
