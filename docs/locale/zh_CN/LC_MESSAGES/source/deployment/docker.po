# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-05 20:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/deployment/docker.rst:5
msgid "Docker Guide"
msgstr "Docker 指南"

#: ../../source/deployment/docker.rst:9
msgid ""
"Due to the dependency on Isaac Sim docker image, by running this container "
"you are implicitly agreeing to the `NVIDIA Software License Agreement`_. If "
"you do not agree to the EULA, do not run this container."
msgstr ""
"由于依赖于 Isaac Sim docker 镜像，通过运行此容器，您隐含地同意 `NVIDIA软件许可协议`_ "
"。如果您不同意该最终用户许可协议，请不要运行此容器。"

#: ../../source/deployment/docker.rst:13
msgid "Setup Instructions"
msgstr "设置说明"

#: ../../source/deployment/docker.rst:17
msgid ""
"The following steps are taken from the Isaac Sim documentation on `container"
" installation`_. They have been added here for the sake of completeness."
msgstr "以下步骤取自Isaac Sim文档中的 `container installation`_ 。它们被添加在这里是为了完整起见。"

#: ../../source/deployment/docker.rst:22
msgid "Docker and Docker Compose"
msgstr "Docker 和 Docker Compose"

#: ../../source/deployment/docker.rst:24
msgid ""
"We have tested the container using Docker Engine version 26.0.0 and Docker "
"Compose version 2.25.0 We recommend using these versions or newer."
msgstr ""
"我们已经测试了 Docker Engine 版本26.0.0 和 Docker Compose 版本2.25.0。我们建议使用这些版本或更新版本。"

#: ../../source/deployment/docker.rst:27
msgid ""
"To install Docker, please follow the instructions for your operating system "
"on the `Docker website`_."
msgstr "安装 Docker，请按照 `Docker website`_ 上您操作系统的说明进行操作。"

#: ../../source/deployment/docker.rst:28
msgid ""
"To install Docker Compose, please follow the instructions for your operating"
" system on the `docker compose`_ page."
msgstr "要安装 Docker Compose，请按照 `docker compose`_ 页面上您操作系统的说明进行操作。"

#: ../../source/deployment/docker.rst:29
msgid ""
"Follow the post-installation steps for Docker on the `post-installation "
"steps`_ page. These steps allow you to run Docker without using ``sudo``."
msgstr ""
"按照 `post-installation steps`_ 页面上的后续步骤进行Docker的安装。这些步骤允许您在不使用 ``sudo`` "
"的情况下运行 Docker。"

#: ../../source/deployment/docker.rst:31
msgid ""
"To build and run GPU-accelerated containers, you also need install the "
"`NVIDIA Container Toolkit`_. Please follow the instructions on the "
"`Container Toolkit website`_ for installation steps."
msgstr ""
"要构建和运行 GPU加速容器，您还需要安装 `NVIDIA Container Toolkit`_ 。请按照 `Container Toolkit "
"website`_ 上的说明进行安装。"

#: ../../source/deployment/docker.rst:36
msgid ""
"Due to limitations with `snap <https://snapcraft.io/docs/home-outside-"
"home>`_, please make sure the Isaac Lab directory is placed under the "
"``/home`` directory tree when using docker."
msgstr ""
"由于对 `snap <https://snapcraft.io/docs/home-outside-home>`_ 的限制，请确保Isaac "
"Lab目录位于 ``/home`` 目录树下使用docker时。"

#: ../../source/deployment/docker.rst:41
msgid "Directory Organization"
msgstr "目录组织"

#: ../../source/deployment/docker.rst:43
msgid ""
"The root of the Isaac Lab repository contains the ``docker`` directory that "
"has various files and scripts needed to run Isaac Lab inside a Docker "
"container. A subset of these are summarized below:"
msgstr ""
"Isaac Lab存储库的根目录包含名为 ``docker`` 的目录，其中包含运行Isaac Lab所需的各种文件和脚本。以下是其中的一部分摘要 :"

#: ../../source/deployment/docker.rst:46
msgid ""
"**Dockerfile.base**: Defines the base Isaac Lab image by overlaying its "
"dependencies onto the Isaac Sim Docker image. Dockerfiles which end with "
"something else, (i.e. ``Dockerfile.ros2``) build an `image extension "
"<#isaac-lab-image-extensions>`_."
msgstr ""
"**Dockerfile.base**: 定义了基础 Isaac Lab 镜像，通过将其依赖项叠加到 Isaac Sim Docker "
"镜像上。以其他名称结尾的 Dockerfile（即 ``Dockerfile.ros2`` ）构建 `image extension <#isaac-"
"lab-image-extensions>`_ 。"

#: ../../source/deployment/docker.rst:48
msgid ""
"**docker-compose.yaml**: Creates mounts to allow direct editing of Isaac Lab"
" code from the host machine that runs the container. It also creates several"
" named volumes such as ``isaac-cache-kit`` to store frequently re-used "
"resources compiled by Isaac Sim, such as shaders, and to retain logs, data, "
"and documents."
msgstr ""
"**docker-compose.yaml**: 创建挂载以允许从运行容器的主机直接编辑 Isaac Lab 代码。它还创建了几个命名卷，例如 "
"``isaac-cache-kit`` ，用于存储 Isaac Sim 编译的频繁重用的资源，如着色器，并保留日志、数据和文档。"

#: ../../source/deployment/docker.rst:51
msgid ""
"**.env.base**: Stores environment variables required for the ``base`` build "
"process and the container itself. ``.env`` files which end with something "
"else (i.e. ``.env.ros2``) define these for `image extension <#isaac-lab-"
"image-extensions>`_."
msgstr ""
"**.env.base**: 存储 ``base`` 构建过程和容器本身所需的环境变量。以其他内容结尾的 ``.env`` 文件（即 "
"``.env.ros2`` ）为 `image extension <#isaac-lab-image-extensions>`_ 定义这些变量。"

#: ../../source/deployment/docker.rst:53
msgid ""
"**docker-compose.cloudxr-runtime.patch.yaml**: A patch file that is applied "
"to enable CloudXR Runtime support for streaming to compatible XR devices. It"
" defines services and volumes for CloudXR Runtime and the base."
msgstr ""
"**docker-compose.cloudxr-runtime.patch.yaml**: 一个补丁文件，用于启用流媒体到兼容 XR 设备的 "
"CloudXR Runtime 支持。它为 CloudXR Runtime 和基础定义了服务和卷。"

#: ../../source/deployment/docker.rst:55
msgid ""
"**.env.cloudxr-runtime**: Environment variables for the CloudXR Runtime "
"support."
msgstr "**.env.cloudxr-runtime**: 用于 CloudXR Runtime 支持的环境变量。"

#: ../../source/deployment/docker.rst:56
msgid ""
"**container.py**: A utility script that interfaces with tools in ``utils`` "
"to configure and build the image, and run and interact with the container."
msgstr "**container.py**: 一个实用脚本，它与 ``utils`` 中的工具接口，配置和构建镜像，并运行和交互容器。"

#: ../../source/deployment/docker.rst:60
msgid "Running the Container"
msgstr "运行容器"

#: ../../source/deployment/docker.rst:64
msgid ""
"The docker container copies all the files from the repository into the "
"container at the location ``/workspace/isaaclab`` at build time. This means "
"that any changes made to the files in the container would not normally be "
"reflected in the repository after the image has been built, i.e. after "
"``./container.py start`` is run."
msgstr ""
"Docker容器在构建时将所有文件从仓库复制到容器中的 ``/workspace/isaaclab`` 路径。这意味着在构建完成后，即在运行 "
"``./container.py start`` 后，对容器中的文件所做的任何更改通常不会反映到仓库中。"

#: ../../source/deployment/docker.rst:68
msgid ""
"For a faster development cycle, we mount the following directories in the "
"Isaac Lab repository into the container so that you can edit their files "
"from the host machine:"
msgstr "为了使开发周期更快，我们将Isaac Lab存储库中的以下目录挂载到容器中，以便您可以从主机编辑其文件 :"

#: ../../source/deployment/docker.rst:71
msgid ""
"**IsaacLab/source**: This is the directory that contains the Isaac Lab "
"source code."
msgstr "**IsaacLab/source**: 这是包含 Isaac Lab 源代码的目录。"

#: ../../source/deployment/docker.rst:72
msgid ""
"**IsaacLab/docs**: This is the directory that contains the source code for "
"Isaac Lab documentation. This is overlaid except for the ``_build`` "
"subdirectory where build artifacts are stored."
msgstr ""
"**IsaacLab/docs**: 这是包含 Isaac Lab 文档源代码的目录。这个目录会被覆盖，但 ``_build`` "
"子目录除外，后者存储了构建生成的工件。"

#: ../../source/deployment/docker.rst:76
msgid ""
"The script ``container.py`` parallels basic ``docker compose`` commands. "
"Each can accept an `image extension argument <#isaac-lab-image-"
"extensions>`_, or else they will default to the ``base`` image extension. "
"These commands are:"
msgstr ""
"脚本 ``container.py`` 与基本的 ``docker compose`` 命令相对应。每个命令都可以接受一个 `image "
"extension argument <#isaac-lab-image-extensions>`_ ，否则它们将默认为 ``base`` "
"镜像扩展。这些命令是:"

#: ../../source/deployment/docker.rst:79
msgid ""
"**start**: This builds the image and brings up the container in detached "
"mode (i.e. in the background)."
msgstr "这会构建镜像并以分离模式（即在后台）启动容器。"

#: ../../source/deployment/docker.rst:80
msgid ""
"**enter**: This begins a new bash process in an existing Isaac Lab "
"container, and which can be exited without bringing down the container."
msgstr "**enter**: 这会在现有的 Isaac Lab 容器中开始一个新的 bash 进程，并且可以退出而不会关闭容器。"

#: ../../source/deployment/docker.rst:82
msgid ""
"**config**: This outputs the compose.yaml which would be result from the "
"inputs given to ``container.py start``. This command is useful for debugging"
" a compose configuration."
msgstr ""
"**config**: 这会输出 compose.yaml，该文件是根据提供给 ``container.py start`` "
"的输入生成的。此命令对于调试 `compose` 配置非常有用。"

#: ../../source/deployment/docker.rst:84
msgid ""
"**copy**: This copies the ``logs``, ``data_storage`` and ``docs/_build`` "
"artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-"
"docs`` volumes respectively, to the ``docker/artifacts`` directory. These "
"artifacts persist between docker container instances and are shared between "
"image extensions."
msgstr ""
"**copy**: 这会将 ``logs`` 、 ``data_storage`` 和 ``docs/_build`` 文件从 ``isaac-lab-"
"logs`` 、 ``isaac-lab-data`` 和 ``isaac-lab-docs`` 卷中分别复制到 "
"``docker/artifacts`` 目录。这些文件在 docker 容器实例之间保持不变，并在镜像扩展之间共享。"

#: ../../source/deployment/docker.rst:86
msgid "**stop**: This brings down the container and removes it."
msgstr "**stop**: 这会关闭容器并将其删除。"

#: ../../source/deployment/docker.rst:88
msgid ""
"The following shows how to launch the container in a detached state and "
"enter it:"
msgstr "以下显示了如何在分离状态下启动容器并进入它 :"

#: ../../source/deployment/docker.rst:104
msgid ""
"To copy files from the base container to the host machine, you can use the "
"following command:"
msgstr "要将文件从基础容器复制到主机，您可以使用以下命令: "

#: ../../source/deployment/docker.rst:111
msgid ""
"The script ``container.py`` provides a wrapper around this command to copy "
"the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the "
"``docker/artifacts`` directory. This is useful for copying the logs, data "
"and documentation:"
msgstr ""
"脚本 ``container.py`` 提供了一个封装此命令的方式，将 ``logs`` 、 ``data_storage`` 和 "
"``docs/_build`` 目录复制到 ``docker/artifacts`` 目录。这对于复制日志、数据和文档非常有用: "

#: ../../source/deployment/docker.rst:121
msgid "CloudXR Runtime Support"
msgstr "CloudXR Runtime Support"

#: ../../source/deployment/docker.rst:123
msgid ""
"To enable CloudXR Runtime for streaming to compatible XR devices, you need "
"to apply the patch file ``docker-compose.cloudxr-runtime.patch.yaml`` to run"
" CloudXR Runtime container. The patch file defines services and volumes for "
"CloudXR Runtime and base. The environment variables required for CloudXR "
"Runtime are specified in the ``.env.cloudxr-runtime`` file. To start or stop"
" the CloudXR runtime container with base, use the following command:"
msgstr ""
"为了启用流媒体到兼容 XR 设备的 CloudXR Runtime，您需要应用补丁文件 ``docker-compose.cloudxr-"
"runtime.patch.yaml`` 来运行 CloudXR Runtime 容器。此补丁文件定义了 CloudXR Runtime "
"和基础的服务和卷。CloudXR Runtime 需要的环境变量在 ``.env.cloudxr-runtime`` 文件中指定。要启动或停止与基本的 "
"CloudXR Runtime 容器，请使用以下命令: "

#: ../../source/deployment/docker.rst:138
msgid "X11 forwarding"
msgstr "X11 转发"

#: ../../source/deployment/docker.rst:140
msgid ""
"The container supports X11 forwarding, which allows the user to run GUI "
"applications from the container and display them on the host machine."
msgstr "容器支持 X11 转发，允许用户在容器中运行 GUI 应用程序，并在主机上显示它们。"

#: ../../source/deployment/docker.rst:143
msgid ""
"The first time a container is started with ``./docker/container.py start``, "
"the script prompts the user whether to activate X11 forwarding. This will "
"create a file at ``docker/.container.cfg`` to store the user's choice for "
"future runs."
msgstr ""
"第一次使用 ``./docker/container.py start`` 启动容器时，脚本会提示用户是否激活 X11 转发。这将创建一个位于 "
"``docker/.container.cfg`` 的文件，以存储用户的选择以供将来使用。"

#: ../../source/deployment/docker.rst:147
msgid ""
"If you want to change the choice, you can set the parameter "
"``X11_FORWARDING_ENABLED`` to '0' or '1' in the ``docker/.container.cfg`` "
"file to disable or enable X11 forwarding, respectively. After that, you need"
" to re-build the container by running ``./docker/container.py start``. The "
"rebuilding process ensures that the changes are applied to the container. "
"Otherwise, the changes will not take effect."
msgstr ""
"如果你想更改选择，可以在 ``docker/.container.cfg`` 文件中将参数 ``X11_FORWARDING_ENABLED`` 设置为"
" '0' 或 '1'，以分别禁用或启用 X11 转发。之后，你需要通过运行 ``./docker/container.py start`` "
"来重新构建容器。重新构建过程确保更改应用到容器中。否则，更改将不会生效。"

#: ../../source/deployment/docker.rst:152
msgid ""
"After the container is started, you can enter the container and run GUI "
"applications from it with X11 forwarding enabled. The display will be "
"forwarded to the host machine."
msgstr "容器启动后，您可以进入容器并启用 X11 转发运行 GUI 应用程序。显示将被转发到主机机器。"

#: ../../source/deployment/docker.rst:157
msgid "Python Interpreter"
msgstr "Python 解释器"

#: ../../source/deployment/docker.rst:159
msgid ""
"The container uses the Python interpreter provided by Isaac Sim. This "
"interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside "
"the container to make it easier to run the Python interpreter. You can use "
"the following commands to run the Python interpreter:"
msgstr ""
"容器使用Isaac Sim提供的Python解释器。此解释器位于 ``/isaac-sim/python.sh`` "
"。我们在容器内设置别名，以便更容易地运行Python解释器。您可以使用以下命令运行Python解释器 :"

#: ../../source/deployment/docker.rst:170
msgid "Understanding the mounted volumes"
msgstr "理解挂载卷"

#: ../../source/deployment/docker.rst:172
msgid ""
"The ``docker-compose.yaml`` file creates several named volumes that are "
"mounted to the container. These are summarized below:"
msgstr "``docker-compose.yaml`` 文件创建了几个命名卷，它们被挂载到容器。以下是这些卷的摘要 :"

#: ../../source/deployment/docker.rst:179
msgid "Volume Name"
msgstr "卷名"

#: ../../source/deployment/docker.rst:180
msgid "Description"
msgstr "描述"

#: ../../source/deployment/docker.rst:181
msgid "Container Path"
msgstr "容器路径"

#: ../../source/deployment/docker.rst:182
msgid "isaac-cache-kit"
msgstr "isaac-cache-kit"

#: ../../source/deployment/docker.rst:183
msgid "Stores cached Kit resources"
msgstr "存储缓存的 Kit 资源"

#: ../../source/deployment/docker.rst:184
msgid "/isaac-sim/kit/cache"
msgstr "/isaac-sim/kit/cache"

#: ../../source/deployment/docker.rst:185
msgid "isaac-cache-ov"
msgstr "isaac-cache-ov"

#: ../../source/deployment/docker.rst:186
msgid "Stores cached OV resources"
msgstr "存储缓存的 OV 资源"

#: ../../source/deployment/docker.rst:187
msgid "/root/.cache/ov"
msgstr "/root/.cache/ov"

#: ../../source/deployment/docker.rst:188
msgid "isaac-cache-pip"
msgstr "isaac-cache-pip"

#: ../../source/deployment/docker.rst:189
msgid "Stores cached pip resources"
msgstr "存储缓存的 pip 资源"

#: ../../source/deployment/docker.rst:190
msgid "/root/.cache/pip"
msgstr "/root/.cache/pip"

#: ../../source/deployment/docker.rst:191
msgid "isaac-cache-gl"
msgstr "isaac-cache-gl"

#: ../../source/deployment/docker.rst:192
msgid "Stores cached GLCache resources"
msgstr "存储缓存的 GLCache 资源"

#: ../../source/deployment/docker.rst:193
msgid "/root/.cache/nvidia/GLCache"
msgstr "/root/.cache/nvidia/GLCache"

#: ../../source/deployment/docker.rst:194
msgid "isaac-cache-compute"
msgstr "isaac-cache-compute"

#: ../../source/deployment/docker.rst:195
msgid "Stores cached compute resources"
msgstr "存储缓存的计算资源"

#: ../../source/deployment/docker.rst:196
msgid "/root/.nv/ComputeCache"
msgstr "/root/.nv/ComputeCache"

#: ../../source/deployment/docker.rst:197
msgid "isaac-logs"
msgstr "isaac-logs"

#: ../../source/deployment/docker.rst:198
msgid "Stores logs generated by Omniverse"
msgstr "存储由 Omniverse 生成的日志"

#: ../../source/deployment/docker.rst:199
msgid "/root/.nvidia-omniverse/logs"
msgstr "/root/.nvidia-omniverse/logs"

#: ../../source/deployment/docker.rst:200
msgid "isaac-carb-logs"
msgstr "isaac-carb-logs"

#: ../../source/deployment/docker.rst:201
msgid "Stores logs generated by carb"
msgstr "存储由 carb 生成的日志"

#: ../../source/deployment/docker.rst:202
msgid "/isaac-sim/kit/logs/Kit/Isaac-Sim"
msgstr "/isaac-sim/kit/logs/Kit/Isaac-Sim"

#: ../../source/deployment/docker.rst:203
msgid "isaac-data"
msgstr "isaac-data"

#: ../../source/deployment/docker.rst:204
msgid "Stores data generated by Omniverse"
msgstr "存储由 Omniverse 生成的数据"

#: ../../source/deployment/docker.rst:205
msgid "/root/.local/share/ov/data"
msgstr "/root/.local/share/ov/data"

#: ../../source/deployment/docker.rst:206
msgid "isaac-docs"
msgstr "isaac-docs"

#: ../../source/deployment/docker.rst:207
msgid "Stores documents generated by Omniverse"
msgstr "存储由 Omniverse 生成的文档"

#: ../../source/deployment/docker.rst:208
msgid "/root/Documents"
msgstr "/root/Documents"

#: ../../source/deployment/docker.rst:209
msgid "isaac-lab-docs"
msgstr "isaac-lab-docs"

#: ../../source/deployment/docker.rst:210
msgid "Stores documentation of Isaac Lab when built inside the container"
msgstr "存储 Isaac Lab 的文档，当在容器内构建时"

#: ../../source/deployment/docker.rst:211
msgid "/workspace/isaaclab/docs/_build"
msgstr "/workspace/isaaclab/docs/_build"

#: ../../source/deployment/docker.rst:212
msgid "isaac-lab-logs"
msgstr "isaac-lab-logs"

#: ../../source/deployment/docker.rst:213
msgid ""
"Stores logs generated by Isaac Lab workflows when run inside the container"
msgstr "存储由 Isaac Lab 工作流生成的日志，当它们在容器内运行时"

#: ../../source/deployment/docker.rst:214
msgid "/workspace/isaaclab/logs"
msgstr "/workspace/isaaclab/logs"

#: ../../source/deployment/docker.rst:215
msgid "isaac-lab-data"
msgstr "isaac-lab-data"

#: ../../source/deployment/docker.rst:216
msgid "Stores whatever data users may want to preserve between container runs"
msgstr "存储用户可能希望在容器运行之间保留的所有数据"

#: ../../source/deployment/docker.rst:217
msgid "/workspace/isaaclab/data_storage"
msgstr "/workspace/isaaclab/data_storage"

#: ../../source/deployment/docker.rst:219
msgid ""
"To view the contents of these volumes, you can use the following command:"
msgstr "要查看这些卷的内容，您可以使用以下命令: "

#: ../../source/deployment/docker.rst:231
msgid "Isaac Lab Image Extensions"
msgstr "Isaac Lab 镜像扩展"

#: ../../source/deployment/docker.rst:233
#, python-brace-format
msgid ""
"The produced image depends on the arguments passed to ``container.py start``"
" and ``container.py stop``. These commands accept an image extension "
"parameter as an additional argument. If no argument is passed, then this "
"parameter defaults to ``base``. Currently, the only valid values are "
"(``base``, ``ros2``). Only one image extension can be passed at a time.  The"
" produced image and container will be named ``isaac-lab-${profile}``, where "
"``${profile}`` is the image extension name."
msgstr ""
"生成的镜像取决于传递给 ``container.py start`` 和 ``container.py stop`` "
"的参数。这些命令接受一个镜像扩展参数作为附加参数。如果没有传递参数，则该参数默认为 ``base`` 。目前，唯一有效的值是 (``base``, "
"``ros2`` )。一次只能传递一个镜像扩展。生成的镜像和容器将被命名为 ``isaac-lab-${profile}`` ，其中 "
"``${profile}`` 是镜像扩展名。"

#: ../../source/deployment/docker.rst:239
#, python-brace-format
msgid ""
"``suffix`` is an optional string argument to ``container.py`` that specifies"
" a docker image and container name suffix, which can be useful for "
"development purposes. By default ``${suffix}`` is the empty string. If "
"``${suffix}`` is a nonempty string, then the produced docker image and "
"container will be named ``isaac-lab-${profile}-${suffix}``, where a hyphen "
"is inserted between ``${profile}`` and ``${suffix}`` in the name. ``suffix``"
" should not be used with cluster deployments."
msgstr ""
"``suffix`` 是 ``container.py`` 的可选字符串参数，用于指定 Docker "
"镜像和容器名称的后缀，这在开发场景中很有用。默认情况下 ``${suffix}`` 为空字符串。如果 ``${suffix}`` 是非空字符串，生成的 "
"Docker 镜像和容器将被命名为 ``isaac-lab-${profile}-${suffix}`` ，其中名称的 ``${profile}`` 和"
" ``${suffix}`` 之间会插入连字符。注意 ``suffix`` 不应在集群部署中使用。"

#: ../../source/deployment/docker.rst:265
#, python-brace-format
msgid ""
"The passed image extension argument will build the image defined in "
"``Dockerfile.${image_extension}``, with the corresponding `profile`_ in the "
"``docker-compose.yaml`` and the envars from ``.env.${image_extension}`` in "
"addition to the ``.env.base``, if any."
msgstr ""
"传递的镜像扩展名参数将构建在 ``Dockerfile.${image_extension}`` 中定义的镜像，使用 ``docker-"
"compose.yaml`` 中的对应 `profile`_ 和来自 ``.env.${image_extension}`` 的环境变量，以及 "
"``.env.base`` ，如果有的话。"

#: ../../source/deployment/docker.rst:270
msgid "ROS2 Image Extension"
msgstr "ROS2 镜像扩展"

#: ../../source/deployment/docker.rst:272
msgid ""
"In ``Dockerfile.ros2``, the container installs ROS2 Humble via an `apt "
"package`_, and it is sourced in the ``.bashrc``. The exact version is "
"specified by the variable ``ROS_APT_PACKAGE`` in the ``.env.ros2`` file, "
"defaulting to ``ros-base``. Other relevant ROS2 variables are also specified"
" in the ``.env.ros2`` file, including variables defining the `various "
"middleware`_ options."
msgstr ""
"在 ``Dockerfile.ros2`` 中，容器通过 `apt package`_ 安装 ROS2 Humble，并在 ``.bashrc`` "
"中进行了源配置。具体版本由 ``.env.ros2`` 文件中的变量 ``ROS_APT_PACKAGE`` 指定，默认为 ``ros-base`` "
"。其他相关的 ROS2 变量也在 ``.env.ros2`` 文件中指定，包括定义 `various middleware`_ 选项的变量。"

#: ../../source/deployment/docker.rst:277
msgid ""
"The container defaults to ``FastRTPS``, but ``CylconeDDS`` is also "
"supported. Each of these middlewares can be `tuned`_ using their "
"corresponding ``.xml`` files under ``docker/.ros``."
msgstr ""
"容器默认使用 ``FastRTPS`` ，但也支持 ``CycloneDDS`` 。这些中间件中的每一个都可以通过其对应的 ``.xml`` 文件在 "
"``docker/.ros`` 下进行 `tuned`_ 。"

#: ../../source/deployment/docker.rst
msgid "Parameters for ROS2 Image Extension"
msgstr "ROS2 镜像扩展的参数"

#: ../../source/deployment/docker.rst:289
msgid "Running Pre-Built Isaac Lab Container"
msgstr "运行预构建的Isaac Lab容器"

#: ../../source/deployment/docker.rst:291
msgid ""
"In Isaac Lab 2.0 release, we introduced a minimal pre-built container that "
"contains a very minimal set of Isaac Sim and Omniverse dependencies, along "
"with Isaac Lab 2.0 pre-built into the container. This container allows users"
" to pull the container directly from NGC without requiring a local build of "
"the docker image. The Isaac Lab 2.0 source code will be available in this "
"container under ``/workspace/IsaacLab``."
msgstr ""
"在 Isaac Lab 2.0 版本中，我们引入了一个最小化的预构建容器，容器内包含了一组非常基础的 Isaac Sim 和 Omniverse "
"依赖项，以及已经预构建好的 Isaac Lab 2.0。这个容器允许用户直接从 NGC 拉取容器，而不需要在本地构建 docker 镜像。Isaac "
"Lab 2.0 的源代码将可以在这个容器内的 ``/workspace/IsaacLab`` 路径下找到。"

#: ../../source/deployment/docker.rst:296
msgid ""
"This container is designed for running **headless** only and does not allow "
"for X11 forwarding or running with the GUI. Please only use this container "
"for headless training. For other use cases, we recommend following the above"
" steps to build your own Isaac Lab docker image."
msgstr ""
"这个容器仅设计用于运行 **headless** ，不允许进行 X11 转发或以 GUI "
"方式运行。请仅将此容器用于无头训练。对于其他使用场景，我们建议按照上述步骤构建您自己的 Isaac Lab docker 镜像。"

#: ../../source/deployment/docker.rst:300
msgid "To pull the minimal Isaac Lab container, run:"
msgstr "要拉取最小的 Isaac Lab 容器，请运行:"

#: ../../source/deployment/docker.rst:306
msgid "To run the Isaac Lab container with an interactive bash session, run:"
msgstr "要运行带有交互式 bash 会话的 Isaac Lab 容器，请运行:"

#: ../../source/deployment/docker.rst:322
msgid "To enable rendering through X11 forwarding, run:"
msgstr "为了通过 X11 转发启用渲染，请运行:"

#: ../../source/deployment/docker.rst:341
msgid "To run an example within the container, run:"
msgstr "要在容器中运行示例，请运行:"
