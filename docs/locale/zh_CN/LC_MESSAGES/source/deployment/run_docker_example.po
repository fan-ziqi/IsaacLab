# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 20:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/deployment/run_docker_example.rst:2
msgid "Running an example with Docker"
msgstr "使用 Docker 运行示例"

#: ../../source/deployment/run_docker_example.rst:4
msgid ""
"From the root of the Isaac Lab repository,  the ``docker`` directory "
"contains all the Docker relevant files. These include the three files "
"(**Dockerfile**, **docker-compose.yaml**, **.env**) which are used by "
"Docker, and an additional script that we use to interface with them, "
"**container.py**."
msgstr ""
"从 Isaac Lab 仓库的根目录开始， ``docker`` 目录包含所有与 Docker 相关的文件。这些文件包括三个文件（ "
"**Dockerfile** ， **docker-compose.yaml** ， **.env** ），这些文件由 Docker "
"使用，以及我们用来与它们交互的附加脚本， **container.sh** 。"

#: ../../source/deployment/run_docker_example.rst:8
msgid ""
"In this tutorial, we will learn how to use the Isaac Lab Docker container "
"for development. For a detailed description of the Docker setup, including "
"installation and obtaining access to an Isaac Sim image, please reference "
"the :ref:`deployment-docker`. For a description of Docker in general, please"
" refer to `their official documentation <https://docs.docker.com/get-"
"started/overview/>`_."
msgstr ""
"在本教程中，我们将学习如何使用 Isaac Lab Docker 容器进行开发。有关 Docker 设置的详细说明，包括安装和获取对 Isaac Sim"
" 图像的访问权限，请参考 :ref:`deployment-docker` 。有关 Docker 的一般说明，请参阅 `官方文档 "
"<https://docs.docker.com/get-started/overview/>`_ 。"

#: ../../source/deployment/run_docker_example.rst:14
msgid "Building the Container"
msgstr "构建容器"

#: ../../source/deployment/run_docker_example.rst:16
msgid ""
"To build the Isaac Lab container from the root of the Isaac Lab repository, "
"we will run the following:"
msgstr "从 Isaac Lab 仓库的根目录构建 Isaac Lab 容器，我们将运行以下命令: "

#: ../../source/deployment/run_docker_example.rst:24
msgid ""
"The terminal will first pull the base IsaacSim image, build the Isaac Lab "
"image's additional layers on top of it, and run the Isaac Lab container. "
"This should take several minutes upon the first build but will be shorter in"
" subsequent runs as Docker's caching prevents repeated work. If we run the "
"command ``docker container ls`` on the terminal, the output will list the "
"containers that are running on the system. If everything has been set up "
"correctly, a container with the ``NAME`` **isaac-lab-base** should appear, "
"similar to below:"
msgstr ""
"终端将首先拉取基础 IsaacSim 镜像，在其上构建 Isaac Lab 镜像的附加层，然后运行 Isaac Lab "
"容器。首次构建可能需要几分钟，但后续运行时间会更短，因为 Docker 的缓存可防止重复工作。如果在终端上运行命令 ``docker container"
" ls`` ，输出将列出当前系统上运行的容器。如果一切设置正确，将会出现一个名为 ``NAME`` **isaac-lab-base** "
"的容器，类似于下面的内容: "

#: ../../source/deployment/run_docker_example.rst:36
msgid ""
"Once the container is up and running, we can enter it from our terminal."
msgstr "容器启动后，我们可以从终端进入其中。"

#: ../../source/deployment/run_docker_example.rst:43
msgid ""
"On entering the Isaac Lab container, we are in the terminal as the "
"superuser, ``root``. This environment contains a copy of the Isaac Lab "
"repository, but also has access to the directories and libraries of Isaac "
"Sim. We can run experiments from this environment using a few convenient "
"aliases that have been put into the ``root`` **.bashrc**. For instance, we "
"have made the **isaaclab.sh** script usable from anywhere by typing its "
"alias ``isaaclab``."
msgstr ""
"进入 Isaac Lab 容器后，我们以超级用户 ``root`` 的身份在终端中。这个环境包含一个 Isaac Lab 仓库的副本，但也可以访问 "
"Isaac Sim 的目录和库。我们可以使用一些很方便的别名在这个环境中运行实验，这些别名已经放入了超级用户 ``root`` 的 "
"**.bashrc** 中。例如，我们可以通过输入别名 ``isaaclab`` 来任意地从任何地方使用 **isaaclab.sh** 脚本。"

#: ../../source/deployment/run_docker_example.rst:48
msgid ""
"Additionally in the container, we have `bind mounted`_ the "
"``IsaacLab/source`` directory from the host machine. This means that if we "
"modify files under this directory from an editor on the host machine, the "
"changes are reflected immediately within the container without requiring us "
"to rebuild the Docker image."
msgstr ""
"除了在容器中，我们还将 ``IsaacLab/source`` 目录从主机机器进行了 `绑定挂载`_ "
"。这意味着，如果我们在主机机器上的编辑器中修改了该目录下的文件，不需要重新构建 Docker 镜像，容器中的更改会立即反映出来。"

#: ../../source/deployment/run_docker_example.rst:52
msgid ""
"We will now run a sample script from within the container to demonstrate how"
" to extract artifacts from the Isaac Lab Docker container."
msgstr "现在，我们将在容器中运行一个示例脚本，以演示如何从 Isaac Lab Docker 容器中提取输出。"

#: ../../source/deployment/run_docker_example.rst:56
msgid "The Code"
msgstr "代码"

#: ../../source/deployment/run_docker_example.rst:58
msgid ""
"The tutorial corresponds to the ``log_time.py`` script in the "
"``IsaacLab/source/standalone/tutorials/00_sim`` directory."
msgstr ""
"该教程对应的是 ``IsaacLab/source/standalone/tutorials/00_sim`` 目录中的 ``log_time.py``"
" 脚本。"

#: ../../source/deployment/run_docker_example.rst
msgid "Code for log_time.py"
msgstr "log_time.py 的代码"

#: ../../source/deployment/run_docker_example.rst:70
msgid "The Code Explained"
msgstr "代码说明"

#: ../../source/deployment/run_docker_example.rst:72
msgid ""
"The Isaac Lab Docker container has several `volumes`_ to facilitate "
"persistent storage between the host computer and the container. One such "
"volume is the ``/workspace/isaaclab/logs`` directory. The ``log_time.py`` "
"script designates this directory as the location to which a ``log.txt`` "
"should be written:"
msgstr ""
"Isaac Lab Docker 容器具有几个 `数据卷`_ ，以便在主机计算机和容器之间实现持久存储。其中一个数据卷是 "
"``/workspace/isaaclab/logs`` 目录。 ``log_time.py`` 脚本指定该目录作为应该写入 ``log.txt`` "
"的位置: "

#: ../../source/deployment/run_docker_example.rst:82
msgid ""
"As the comments note, :func:`os.path.abspath()` will prepend "
"``/workspace/isaaclab`` because in the Docker container all python execution"
" is done through ``/workspace/isaaclab/isaaclab.sh``. The output will be a "
"file, ``log.txt``, with the ``sim_time`` written on a newline at every "
"simulation step:"
msgstr ""
"正如注释中所述， :func:`os.path.abspath()` 将在前面添加 ``/workspace/isaaclab`` ，因为在 "
"Docker 容器中，所有的 Python 执行都是通过 ``/workspace/isaaclab/isaaclab.sh`` "
"进行的。结果将是一个名为 ``log.txt`` 的文件，在每个模拟步骤上， ``sim_time`` 将被写入一行: "

#: ../../source/deployment/run_docker_example.rst:93
msgid "Executing the Script"
msgstr "执行脚本"

#: ../../source/deployment/run_docker_example.rst:95
msgid ""
"We will execute the script to produce a log, adding a ``--headless`` flag to"
" our execution to prevent a GUI:"
msgstr "我们将执行脚本以生成一个日志，在我们的执行中添加 ``--headless`` 标志以防止 GUI: "

#: ../../source/deployment/run_docker_example.rst:102
msgid ""
"Now ``log.txt`` will have been produced at "
"``/workspace/isaaclab/logs/docker_tutorial``. If we exit the container by "
"typing ``exit``, we will return to ``IsaacLab/docker`` in our host terminal "
"environment. We can then enter the following command to retrieve our logs "
"from the Docker container and put them on our host machine:"
msgstr ""
"现在， ``log.txt`` 将在 ``/workspace/isaaclab/logs/docker_tutorial`` "
"中生成。如果我们在容器中输入 ``exit`` 以退出，我们将返回到主机终端环境中的 ``IsaacLab/docker`` "
"中。然后，我们可以输入以下命令，从 Docker 容器中检索日志并将它们放在主机上: "

#: ../../source/deployment/run_docker_example.rst:111
msgid ""
"We will see a terminal readout reporting the artifacts we have retrieved "
"from the container. If we navigate to "
"``/isaaclab/docker/artifacts/logs/docker_tutorial``, we will see a copy of "
"the ``log.txt`` file which was produced by the script above."
msgstr ""
"我们将看到一个终端输出报告，报告了我们从容器中检索出的输出物。如果我们转到 "
"``/isaaclab/docker/artifacts/logs/docker_tutorial`` ，我们将看到上面由脚本生成的 "
"``log.txt`` 文件的副本。"

#: ../../source/deployment/run_docker_example.rst:115
msgid ""
"Each of the directories under ``artifacts`` corresponds to Docker `volumes`_"
" mapped to directories within the container and the ``container.py copy`` "
"command copies them from those `volumes`_ to these directories."
msgstr ""
"``artifacts`` 下的每个目录对应于容器中与 `数据卷`_ 映射的 Docker 目录， ``container.sh copy`` "
"命令将它们从这些 `数据卷`_ 中复制到这些目录中。"

#: ../../source/deployment/run_docker_example.rst:118
msgid ""
"We could return to the Isaac Lab Docker terminal environment by running "
"``container.py enter`` again, but we have retrieved our logs and wish to go "
"inspect them. We can stop the Isaac Lab Docker container with the following "
"command:"
msgstr ""
"我们可以再次运行 ``container.sh enter`` 来返回 Isaac Lab Docker "
"终端环境，但是我们已经检索到了日志并希望去检查它们。我们可以使用以下命令停止 Isaac Lab Docker 容器: "

#: ../../source/deployment/run_docker_example.rst:126
msgid ""
"This will bring down the Docker Isaac Lab container. The image will persist "
"and remain available for further use, as will the contents of any "
"`volumes`_. If we wish to free up the disk space taken by the image, "
"(~20.1GB), and do not mind repeating the build process when we next run "
"``./container.py start``, we may enter the following command to delete the "
"**isaac-lab-base** image:"
msgstr ""
"这将关闭 Docker Isaac Lab 容器。镜像将保留并保持可用供进一步使用， `数据卷`_ "
"的内容也将保留。如果我们希望释放镜像占用的磁盘空间，（~20.1GB），并且不介意下次运行 ``./container.sh start`` "
"时重复构建过程，我们可以输入以下命令来删除 **isaac-lab-base** 镜像: "

#: ../../source/deployment/run_docker_example.rst:134
msgid ""
"A subsequent run of ``docker image ls`` will show that the image tagged "
"**isaac-lab-base** is now gone. We can repeat the process for the underlying"
" NVIDIA container if we wish to free up more space. If a more powerful "
"method of freeing resources from Docker is desired, please consult the "
"documentation for the `docker prune`_ commands."
msgstr ""
"随后运行 ``docker image ls`` 将会显示标记为 **isaac-lab-base** "
"的镜像已经不存在。如果我们希望释放更多空间，我们可以对底层 NVIDIA 容器重复该过程。如果需要更强大的从 Docker 释放资源的方法，请查阅 "
"`docker prune`_命令的文档。"
