# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-27 02:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:4
msgid "From IsaacGymEnvs"
msgstr "从IsaacGymEnvs迁移"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:9
msgid ""
"`IsaacGymEnvs`_ was a reinforcement learning framework designed for the "
"`Isaac Gym Preview Release`_. As both IsaacGymEnvs and the Isaac Gym Preview"
" Release are now deprecated, the following guide walks through the key "
"differences between IsaacGymEnvs and Isaac Lab, as well as differences in "
"APIs between Isaac Gym Preview Release and Isaac Sim."
msgstr ""
"`IsaacGymEnvs`_ 是一个为 `Isaac Gym 预览版`_ 设计的强化学习框架。由于 IsaacGymEnvs 和 Isaac Gym "
"预览版目前已经弃用，以下指南将介绍 IsaacGymEnvs 和 Isaac Lab 之间的主要区别，以及 Isaac Gym 预览版和 Isaac "
"Sim 之间 API 的不同之处。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:16
msgid ""
"The following changes are with respect to Isaac Lab 1.0 release. Please "
"refer to the `release notes`_ for any changes in the future releases."
msgstr "以下更改是针对Isaac Lab 1.0版本的发布。请参考 `release notes`_ 查看未来版本的任何更改。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:21
msgid "Task Config Setup"
msgstr "任务配置设置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:23
msgid ""
"In IsaacGymEnvs, task config files were defined in ``.yaml`` format. With "
"Isaac Lab, configs are now specified using a specialized Python class "
":class:`~omni.isaac.lab.utils.configclass`. The "
":class:`~omni.isaac.lab.utils.configclass` module provides a wrapper on top "
"of Python's ``dataclasses`` module. Each environment should specify its own "
"config class annotated by ``@configclass`` that inherits from "
":class:`~envs.DirectRLEnvCfg`, which can include simulation parameters, "
"environment scene parameters, robot parameters, and task-specific "
"parameters."
msgstr ""
"在 IsaacGymEnvs 中，任务配置文件是以 ``.yaml`` 格式定义的。在 Isaac Lab 中，现在使用专门的 Python 类 "
":class:`~omni.isaac.lab.utils.configclass` 来指定配置。 "
":class:`~omni.isaac.lab.utils.configclass` 模块提供了一个包装器，位于 Python 的 "
"``dataclasses`` 模块之上。每个环境应指定其自己的配置类，该类被 ``@configclass`` 注释，其继承自 "
":class:`~envs.DirectRLEnvCfg` ，其中可以包括模拟参数、环境场景参数、机器人参数和任务特定参数。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:29
msgid "Below is an example skeleton of a task config class:"
msgstr "以下是一个任务配置类的示例骨架: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:55
msgid "Simulation Config"
msgstr "模拟配置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:57
msgid ""
"Simulation related parameters are defined as part of the "
":class:`~omni.isaac.lab.sim.SimulationCfg` class, which is a "
":class:`~omni.isaac.lab.utils.configclass` module that holds simulation "
"parameters such as ``dt``, ``device``, and ``gravity``. Each task config "
"must have a variable named ``sim`` defined that holds the type "
":class:`~omni.isaac.lab.sim.SimulationCfg`."
msgstr ""
"与模拟有关的参数被定义为 :class:`~omni.isaac.lab.sim.SimulationCfg` 类的一部分，这是一个 "
":class:`~omni.isaac.lab.utils.configclass` 模块，包含诸如 ``dt``、``device`` 和 "
"``gravity`` 等模拟参数。每个任务配置都必须有一个名为 ``sim`` 的变量，其类型为 "
":class:`~omni.isaac.lab.sim.SimulationCfg` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:62
msgid ""
"In Isaac Lab, the use of ``substeps`` has been replaced by a combination of "
"the simulation ``dt`` and the ``decimation`` parameters. For example, in "
"IsaacGymEnvs, having ``dt=1/60`` and ``substeps=2`` is equivalent to taking "
"2 simulation steps with ``dt=1/120``, but running the task step at ``1/60`` "
"seconds. The ``decimation`` parameter is a task parameter that controls the "
"number of simulation steps to take for each task (or RL) step, replacing the"
" ``controlFrequencyInv`` parameter in IsaacGymEnvs. Thus, the same setup in "
"Isaac Lab will become ``dt=1/120`` and ``decimation=2``."
msgstr ""
"在 Isaac Lab 中， ``substeps`` 的使用已被模拟 ``dt`` 和 ``decimation`` 参数的组合取代。例如，在 "
"IsaacGymEnvs 中，具有 ``dt=1/60`` 和 ``substeps=2`` 等效于使用 ``dt=1/120`` 进行 2 "
"次模拟步骤，但在 ``1/60`` 秒运行任务步骤。 ``decimation`` 参数是一个任务参数，控制每个任务（或 "
"RL）步骤所需的模拟步骤数量，取代了 IsaacGymEnvs 中的 ``controlFrequencyInv`` 参数。因此，在 Isaac Lab"
" 中，相同的设置将变为 ``dt=1/120`` 和 ``decimation=2`` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:69
msgid ""
"In Isaac Sim, physx simulation parameters such as "
"``num_position_iterations``, ``num_velocity_iterations``, "
"``contact_offset``, ``rest_offset``, ``bounce_threshold_velocity``, "
"``max_depenetration_velocity`` can all be specified on a per-actor basis. "
"These parameters have been moved from the physx simulation config to each "
"individual articulation and rigid body config."
msgstr ""
"在 Isaac Sim 中，物理模拟参数，例如 "
"``num_position_iterations``、``num_velocity_iterations``、``contact_offset``、``rest_offset``、``bounce_threshold_velocity``、``max_depenetration_velocity``"
" 等都可以针对每个角色进行指定。这些参数已从 physx 模拟配置移到每个单独的关节和刚体配置中。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:74
msgid ""
"When running simulation on the GPU, buffers in PhysX require pre-allocation "
"for computing and storing information such as contacts, collisions and "
"aggregate pairs. These buffers may need to be adjusted depending on the "
"complexity of the environment, the number of expected contacts and "
"collisions, and the number of actors in the environment. The "
":class:`~omni.isaac.lab.sim.PhysxCfg` class provides access for setting the "
"GPU buffer dimensions."
msgstr ""
"当在 GPU 上运行模拟时，PhysX "
"中的缓冲区需要预先分配以计算和存储诸如接触、碰撞和汇总对等信息。这些缓冲区可能需要根据环境的复杂性、预期接触和碰撞数量以及环境中的角色数量进行调整。 "
":class:`~omni.isaac.lab.sim.PhysxCfg` 类提供了访问设置 GPU 缓冲区维度的功能。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:109
msgid "Scene Config"
msgstr "场景配置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:111
msgid ""
"The :class:`~omni.isaac.lab.scene.InteractiveSceneCfg` class can be used to "
"specify parameters related to the scene, such as the number of environments "
"and the spacing between environments. Each task config must have a variable "
"named ``scene`` defined that holds the type "
":class:`~omni.isaac.lab.scene.InteractiveSceneCfg`."
msgstr ""
":class:`~omni.isaac.lab.scene.InteractiveSceneCfg` "
"类可用于指定与场景相关的参数，例如环境数量和环境之间的间距。每个任务配置必须有一个名为 ``scene`` 的变量，其类型为 "
":class:`~omni.isaac.lab.scene.InteractiveSceneCfg` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:126
#: ../../source/migration/migrating_from_isaacgymenvs.rst:547
msgid "Task Config"
msgstr "任务配置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:128
msgid ""
"Each environment should specify its own config class that holds task "
"specific parameters, such as the dimensions of the observation and action "
"buffers. Reward term scaling parameters can also be specified in the config "
"class."
msgstr "每个环境应指定其自己的配置类，其中包含任务特定参数，例如观察和动作缓冲区的维度。奖励项缩放参数也可以在配置类中指定。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:131
msgid "The following parameters must be set for each environment config:"
msgstr "每个环境配置必须设置以下参数: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:141
msgid ""
"Note that the maximum episode length parameter (now ``episode_length_s``) is"
" in seconds instead of steps as it was in IsaacGymEnvs. To convert between "
"step count to seconds, use the equation: ``episode_length_s = dt * "
"decimation * num_steps``"
msgstr ""
"请注意，最大剧集长度参数（现在为 ``episode_length_s`` ）是以秒为单位，而不是 IsaacGymEnvs "
"中的步数。要在步数和秒之间转换，请使用以下方程式:``episode_length_s = dt * decimation * num_steps``"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:147
msgid "RL Config Setup"
msgstr "RL 配置设置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:149
msgid ""
"RL config files for the rl_games library can continue to be defined in "
"``.yaml`` files in Isaac Lab. Most of the content of the config file can be "
"copied directly from IsaacGymEnvs. Note that in Isaac Lab, we do not use "
"hydra to resolve relative paths in config files. Please replace any relative"
" paths such as ``${....device}`` with the actual values of the parameters."
msgstr ""
"rl_games 库的 RL 配置文件可以继续在 Isaac Lab 中的 ``.yaml`` 文件中定义。配置文件的大部分内容可以直接从 "
"IsaacGymEnvs 复制过来。请注意，在 Isaac Lab 中，我们不使用 hydra 来解决配置文件中的相对路径。请将任何相对路径（例如 "
"``${....device}`` ）替换为参数的实际值。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:154
msgid ""
"Additionally, the observation and action clip ranges have been moved to the "
"RL config file. For any ``clipObservations`` and ``clipActions`` parameters "
"that were defined in the IsaacGymEnvs task config file, they should be moved"
" to the RL config file in Isaac Lab."
msgstr ""
"此外，观察和动作的剪裁范围已移动到 RL 配置文件中。所有在 IsaacGymEnvs 任务配置文件中定义的 ``clipObservations`` "
"和 ``clipActions`` 参数都应在 Isaac Lab 的 RL 配置文件中进行移动。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:160
msgid "IsaacGymEnvs Task Config"
msgstr "IsaacGymEnvs 任务配置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:160
msgid "Isaac Lab RL Config"
msgstr "Isaac Lab RL 配置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:172
msgid "Environment Creation"
msgstr "环境创建"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:174
msgid ""
"In IsaacGymEnvs, environment creation generally included four components: "
"creating the sim object with ``create_sim()``, creating the ground plane, "
"importing the assets from MJCF or URDF files, and finally creating the "
"environments by looping through each environment and adding actors into the "
"environments."
msgstr ""
"在 IsaacGymEnvs 中，环境创建通常包括四个组件: 使用 ``create_sim()`` 创建 sim 对象，创建地面平面，从 MJCF 或"
" URDF 文件导入资产，最后通过循环遍历每个环境并将演员添加到环境中创建环境。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:178
msgid ""
"Isaac Lab no longer requires calling the ``create_sim()`` method to retrieve"
" the sim object. Instead, the simulation context is retrieved automatically "
"by the framework. It is also no longer required to use the ``sim`` as an "
"argument for the simulation APIs."
msgstr ""
"Isaac Lab 不再需要调用 ``create_sim()`` 方法来检索 sim 对象。相反，仿真上下文会自动由框架检索。也不再需要将 "
"``sim`` 作为仿真 API 的参数使用。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:182
msgid ""
"In replacement of ``create_sim()``, tasks can implement the "
"``_setup_scene()`` method in Isaac Lab. This method can be used for adding "
"actors into the scene, adding ground plane, cloning the actors, and adding "
"any other optional objects into the scene, such as lights."
msgstr ""
"在 Isaac Lab 中，可以通过实现 ``_setup_scene()`` 方法来替代 ``create_sim()`` "
"。这种方法可用于向场景中添加演员、添加地面平面、克隆演员，并添加任何其他可选对象到场景中，如灯光。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:187
#: ../../source/migration/migrating_from_isaacgymenvs.rst:404
#: ../../source/migration/migrating_from_isaacgymenvs.rst:424
#: ../../source/migration/migrating_from_isaacgymenvs.rst:506
#: ../../source/migration/migrating_from_isaacgymenvs.rst:550
#: ../../source/migration/migrating_from_isaacgymenvs.rst:606
#: ../../source/migration/migrating_from_isaacgymenvs.rst:648
#: ../../source/migration/migrating_from_isaacgymenvs.rst:745
#: ../../source/migration/migrating_from_isaacgymenvs.rst:780
#: ../../source/migration/migrating_from_isaacgymenvs.rst:833
#: ../../source/migration/migrating_from_isaacgymenvs.rst:860
msgid "IsaacGymEnvs"
msgstr "IsaacGymEnvs"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:187
#: ../../source/migration/migrating_from_isaacgymenvs.rst:404
#: ../../source/migration/migrating_from_isaacgymenvs.rst:424
#: ../../source/migration/migrating_from_isaacgymenvs.rst:506
#: ../../source/migration/migrating_from_isaacgymenvs.rst:550
#: ../../source/migration/migrating_from_isaacgymenvs.rst:606
#: ../../source/migration/migrating_from_isaacgymenvs.rst:648
#: ../../source/migration/migrating_from_isaacgymenvs.rst:780
#: ../../source/migration/migrating_from_isaacgymenvs.rst:833
#: ../../source/migration/migrating_from_isaacgymenvs.rst:860
msgid "Isaac Lab"
msgstr "Isaac Lab"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:207
msgid "Ground Plane"
msgstr "地面平面"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:209
msgid ""
"In Isaac Lab, most of the environment creation process has been simplified "
"into configs with the :class:`~omni.isaac.lab.utils.configclass` module."
msgstr ""
"在 Isaac Lab 中，大多数环境创建过程已简化为使用 :class:`~omni.isaac.lab.utils.configclass` "
"模块中的配置。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:211
msgid ""
"The ground plane can be defined using the "
":class:`~terrains.TerrainImporterCfg` class."
msgstr "可以使用 :class:`~terrains.TerrainImporterCfg` 类来定义地面平面。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:230
msgid ""
"The terrain can then be added to the scene in ``_setup_scene(self)`` by "
"referencing the ``TerrainImporterCfg`` object:"
msgstr ""
"然后，可以通过引用 ``TerrainImporterCfg`` 对象将地形添加到场景中的 ``_setup_scene(self)`` 中: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:242
msgid "Actors"
msgstr "演员"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:244
msgid ""
"Isaac Lab and Isaac Sim both use the `USD (Universal Scene Description) "
"<https://github.com/PixarAnimationStudios/OpenUSD>`_ library for describing "
"the scene. Assets defined in MJCF and URDF formats can be imported to USD "
"using importer tools described in the `Importing a New Asset <../how-"
"to/import_new_asset.html>`_ tutorial."
msgstr ""
"Isaac Lab 和 Isaac Sim 都使用 `USD（Universal Scene Description） "
"<https://github.com/PixarAnimationStudios/OpenUSD>`_ 库来描述场景。在 MJCF 和 URDF "
"格式中定义的资产可以使用导入工具导入到 USD，导入工具的使用方法请参见 `导入新资产 <../how-"
"to/import_new_asset.html>`_ 教程。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:248
msgid ""
"Each Articulation and Rigid Body actor can also have its own config class. "
"The :class:`~omni.isaac.lab.assets.ArticulationCfg` class can be used to "
"define parameters for articulation actors, including file path, simulation "
"parameters, actuator properties, and initial states."
msgstr ""
"每个关节和刚体演员都可以有自己的配置类。 :class:`~omni.isaac.lab.assets.ArticulationCfg` "
"类可用于定义关节演员的参数，包括文件路径、模拟参数、执行器属性和初始状态。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:292
msgid ""
"Within the :class:`~assets.ArticulationCfg`, the ``spawn`` attribute can be "
"used to add the robot to the scene by specifying the path to the robot file."
" In addition, :class:`~omni.isaac.lab.sim.schemas.RigidBodyPropertiesCfg` "
"can be used to specify simulation properties for the rigid bodies in the "
"articulation. Similarly, the "
":class:`~omni.isaac.lab.sim.schemas.ArticulationRootPropertiesCfg` class can"
" be used to specify simulation properties for the articulation. Joint "
"properties are now specified as part of the ``actuators`` dictionary using "
":class:`~actuators.ImplicitActuatorCfg`. Joints with the same properties can"
" be grouped into regex expressions or provided as a list of names or "
"expressions."
msgstr ""
"在 :class:`~assets.ArticulationCfg` 中，可以使用 ``spawn`` "
"属性通过指定机器人文件的路径将机器人添加到场景中。此外，可以使用 "
":class:`~omni.isaac.lab.sim.schemas.RigidBodyPropertiesCfg` "
"来为关节中的刚体指定模拟属性。类似地，可以使用 "
":class:`~omni.isaac.lab.sim.schemas.ArticulationRootPropertiesCfg` "
"类为关节指定模拟属性。关节属性现在作为 ``actuators`` 字典的一部分进行指定，其中使用 "
":class:`~actuators.ImplicitActuatorCfg` 。具有相同属性的关节可以分组为正则表达式或作为名称或表达式列表提供。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:300
msgid ""
"Actors are added to the scene by simply calling ``self.cartpole = "
"Articulation(self.cfg.robot_cfg)``, where ``self.cfg.robot_cfg`` is an "
":class:`~assets.ArticulationCfg` object. Once initialized, they should also "
"be added to the :class:`~scene.InteractiveScene` by calling "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` so that the "
":class:`~scene.InteractiveScene` can traverse through actors in the scene "
"for writing values to the simulation and resetting."
msgstr ""
"通过简单调用 ``self.cartpole = Articulation(self.cfg.robot_cfg)`` 将演员添加到场景，其中 "
"``self.cfg.robot_cfg`` 是一个 :class:`~assets.ArticulationCfg` 对象。初始化后，还应通过调用 "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` 将其添加到 "
":class:`~scene.InteractiveScene` 中，以便 :class:`~scene.InteractiveScene` "
"可以在场景中遍历演员以向仿真写入值并重置。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:307
msgid "Simulation Parameters for Actors"
msgstr "演员的模拟参数"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:309
msgid ""
"Some simulation parameters related to Rigid Bodies and Articulations may "
"have different default values between Isaac Gym Preview Release and Isaac "
"Sim. It may be helpful to double check the USD assets to ensure that the "
"default values are applicable for the asset."
msgstr ""
"在 Isaac Gym 预览版和 Isaac Sim 之间，与刚体和关节相关的一些模拟参数可能具有不同的默认值。建议确保 USD "
"资产的默认值适用于资产。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:314
msgid ""
"For instance, the following parameters in the ``RigidBodyAPI`` could be "
"different between Isaac Gym Preview Release and Isaac Sim:"
msgstr "例如， ``RigidBodyAPI`` 中以下参数可能在 Isaac Gym 预览版和 Isaac Sim 中不同: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:321
msgid "RigidBodyAPI Parameter"
msgstr "RigidBodyAPI 参数"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:322
#: ../../source/migration/migrating_from_isaacgymenvs.rst:350
msgid "Default Value in Isaac Sim"
msgstr "Isaac Sim 中的默认值"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:323
msgid "Default Value in Isaac Gym Preview Release"
msgstr "Isaac Gym 预览版中的默认值"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:324
msgid "Linear Damping"
msgstr "线性阻尼"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:325
#: ../../source/migration/migrating_from_isaacgymenvs.rst:326
msgid "0.00"
msgstr "0.00"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:327
msgid "Angular Damping"
msgstr "角阻尼"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:328
msgid "0.05"
msgstr "0.05"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:329
msgid "0.0"
msgstr "0.0"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:330
msgid "Max Linear Velocity"
msgstr "最大线性速度"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:331
#: ../../source/migration/migrating_from_isaacgymenvs.rst:337
msgid "inf"
msgstr "inf"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:332
msgid "1000"
msgstr "1000"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:333
msgid "Max Angular Velocity"
msgstr "最大角速度"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:334
msgid "5729.58008 (degree/s)"
msgstr "5729.58008 (度/秒)"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:335
msgid "64.0 (rad/s)"
msgstr "64.0 (弧度/秒)"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:336
msgid "Max Contact Impulse"
msgstr "最大接触冲量"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:338
msgid "1e32"
msgstr "1e32"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:340
msgid ""
"Articulation parameters for the ``JointAPI`` and ``DriveAPI`` could be "
"altered as well. Note that the Isaac Sim UI assumes the unit of angle to be "
"degrees. It is particularly worth noting that the ``Damping`` and "
"``Stiffness`` parameters in the ``DriveAPI`` have the unit of ``1/deg`` in "
"the Isaac Sim UI but ``1/rad`` in Isaac Gym Preview Release."
msgstr ""
"``JointAPI`` 和 ``DriveAPI`` 的关节参数可以进行修改。请注意，Isaac Sim "
"UI假定角度的单位为度。特别值得注意的是，在Isaac Sim UI中， ``DriveAPI`` 中的 ``Damping`` 和 "
"``Stiffness`` 参数的单位为 ``1/deg`` ，但在Isaac Gym Preview Release中为 ``1/rad`` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:349
msgid "Joint Parameter"
msgstr "关节参数"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:351
msgid "Default Value in Isaac Gym Preview Releases"
msgstr "Isaac Gym Preview Releases中的默认值"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:352
msgid "Maximum Joint Velocity"
msgstr "最大关节速度"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:353
msgid "1000000.0 (deg)"
msgstr "1000000.0 (度)"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:354
msgid "100.0 (rad)"
msgstr "100.0 (弧度)"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:358
msgid "Cloner"
msgstr "克隆器"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:360
msgid ""
"Isaac Sim introduced a concept of ``Cloner``, which is a class designed for "
"replication during the scene creation process. In IsaacGymEnvs, scenes had "
"to be created by looping through the number of environments. Within each "
"iteration, actors were added to each environment and their handles had to be"
" cached. Isaac Lab eliminates the need for looping through the environments "
"by using the ``Cloner`` APIs. The scene creation process is as follow:"
msgstr ""
"Isaac Sim引入了 ``克隆器`` "
"概念，这是一个专为在场景创建过程中复制而设计的类。在IsaacGymEnvs中，必须通过循环遍历环境的数量来创建场景。在每次迭代中，将演员添加到每个环境中，并需要缓存它们的句柄。Isaac"
" Lab通过使用 ``克隆器`` API来消除循环遍历环境的需求。场景创建过程如下: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:366
msgid ""
"Construct a single environment (what the scene would look like if number of "
"environments = 1)"
msgstr "构建单个环境（如果环境数量=1，则场景将是什么样子）"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:367
msgid "Call ``clone_environments()`` to replicate the single environment"
msgstr "调用 ``clone_environments()`` 来复制单个环境"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:368
msgid ""
"Call ``filter_collisions()`` to filter out collision between environments "
"(if required)"
msgstr "调用 ``filter_collisions()`` 来过滤环境之间的碰撞（如果需要）"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:382
msgid "Accessing States from Simulation"
msgstr "从模拟中访问状态"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:384
msgid ""
"APIs for accessing physics states in Isaac Lab require the creation of an "
":class:`~assets.Articulation` or :class:`~assets.RigidObject` object. "
"Multiple objects can be initialized for different articulations or rigid "
"bodies in the scene by defining corresponding "
":class:`~assets.ArticulationCfg` or :class:`~assets.RigidObjectCfg` config  "
"as outlined in the section above. This approach eliminates the need of "
"retrieving body handles to slice states for specific bodies in the scene."
msgstr ""
"Isaac Lab中访问物理状态的API需要创建 :class:`~assets.Articulation` 或 "
":class:`~assets.RigidObject` 对象。可以通过在上面部分概述的相应 "
":class:`~assets.ArticulationCfg` 或 :class:`~assets.RigidObjectCfg` "
"配置来初始化不同关节或刚体的多个对象，以定义场景中的关节或刚体。这种方法消除了检索体句柄以为场景中的特定体片段状态的需要。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:397
msgid ""
"We have also removed ``acquire`` and ``refresh`` APIs in Isaac Lab. Physics "
"states can be directly applied or retrieved using APIs defined for the "
"articulations and rigid objects."
msgstr ""
"在Isaac Lab中，我们还移除了 ``acquire`` 和 ``refresh`` "
"APIs。物理状态可以直接使用定义为关节和刚体对象的API进行应用或检索。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:400
msgid ""
"APIs provided in Isaac Lab no longer require explicit wrapping and un-"
"wrapping of underlying buffers. APIs can now work with tensors directly for "
"reading and writing data."
msgstr "在Isaac Lab中提供的API现在不再需要显式地包装和解包底层缓冲区。API现在可以直接使用张量来读取和写入数据。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:413
msgid ""
"Note some naming differences between APIs in Isaac Gym Preview Release and "
"Isaac Lab. Most ``dof`` related APIs have been named to ``joint`` in Isaac "
"Lab. APIs in Isaac Lab also no longer follow the explicit ``_tensors`` or "
"``_tensor_indexed`` suffixes in naming. Indexed versions of APIs now happen "
"implicitly through the optional ``indices`` parameter."
msgstr ""
"请注意Isaac Gym Preview Release和Isaac Lab中API之间的一些命名差异。大多数与 ``自由度`` "
"有关的API在Isaac Lab中已更名为 ``joint`` 。在Isaac Lab中，API也不再遵循在命名中明确的 `` _tensors`` 或"
" ``_tensor_indexed`` 后缀。API的索引版本现在通过可选的 ``indices`` 参数隐式发生。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:418
msgid ""
"Most APIs in Isaac Lab also provide the option to specify an ``indices`` "
"parameter, which can be used when reading or writing data for a subset of "
"environments. Note that when setting states with the ``indices`` parameter, "
"the shape of the states buffer should match with the dimension of the "
"``indices`` list."
msgstr ""
"Isaac Lab中的大多数API还提供了指定 ``indices`` 参数的选项，该参数可在为一些环境的子集读取或写入数据时使用。请注意，使用 "
"``indices`` 参数设置状态时，状态缓冲区的形状应与 ``indices`` 列表的维度相匹配。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:435
msgid "Quaternion Convention"
msgstr "四元数约定"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:437
msgid ""
"Isaac Lab and Isaac Sim both adopt ``wxyz`` as the quaternion convention. "
"However, the quaternion convention used in Isaac Gym Preview Release was "
"``xyzw``. Remember to switch all quaternions to use the ``xyzw`` convention "
"when working indexing rotation data. Similarly, please ensure all "
"quaternions are in ``wxyz`` before passing them to Isaac Lab APIs."
msgstr ""
"Isaac Lab和Isaac Sim都采用 ``wxyz`` 作为四元数约定。但是，Isaac Gym Preview "
"Release中使用的四元数约定是 ``xyzw`` 。请记住，在索引旋转数据时，将所有四元数切换为使用 ``xyzw`` "
"约定。类似地，在传递给Isaac Lab API之前，请确保所有四元数均为 ``wxyz`` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:444
msgid "Articulation Joint Order"
msgstr "关节顺序"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:446
msgid ""
"Physics simulation in Isaac Sim and Isaac Lab assumes a breadth-first "
"ordering for the joints in a given kinematic tree. However, Isaac Gym "
"Preview Release assumed a depth-first ordering for joints in the kinematic "
"tree. This means that indexing joints based on their ordering may be "
"different in IsaacGymEnvs and Isaac Lab."
msgstr ""
"Isaac Sim和Isaac Lab中的物理模拟假定给定运动树中关节的顺序是广度优先顺序。然而，Isaac Gym Preview "
"Release中假定关节运动树中关节的顺序是深度优先顺序。这意味着根据它们的顺序对关节进行索引在IsaacGymEnvs和Isaac Lab中可能不同。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:451
msgid ""
"In Isaac Lab, the list of joint names can be retrieved with "
"``Articulation.data.joint_names``, which will also correspond to the "
"ordering of the joints in the Articulation."
msgstr ""
"在Isaac Lab中，可以使用 ``Articulation.data.joint_names`` "
"获取关节名称列表，这也将与Articulation中关节的顺序对应。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:456
msgid "Creating a New Environment"
msgstr "创建新环境"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:458
msgid ""
"Each environment in Isaac Lab should be in its own directory following this "
"structure:"
msgstr "Isaac Lab中的每个环境都应位于其自己的目录中，遵循以下结构: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:469
msgid "``my_environment`` is the root directory of the task."
msgstr "``my_environment`` 是任务的根目录。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:470
msgid ""
"``my_environment/agents`` is the directory containing all RL config files "
"for the task. Isaac Lab supports multiple RL libraries that can each have "
"its own individual config file."
msgstr ""
"``my_environment/agents`` 是包含任务的所有RL配置文件的目录。Isaac Lab支持多个RL库，每个库都可以有自己的配置文件。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:471
msgid ""
"``my_environment/__init__.py`` is the main file that registers the "
"environment with the Gymnasium interface. This allows the training and "
"inferencing scripts to find the task by its name. The content of this file "
"should be as follow:"
msgstr ""
"``my_environment/__init__.py`` "
"是注册环境到Gymnasium接口的主文件。这允许训练和推理脚本通过名称找到任务。此文件的内容应如下所示: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:494
msgid ""
"``my_environment/my_env.py`` is the main python script that implements the "
"task logic and task config class for the environment."
msgstr "``my_environment/my_env.py`` 是实现任务逻辑和环境的任务配置类的主要Python脚本。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:498
msgid "Task Logic"
msgstr "任务逻辑"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:500
msgid ""
"In Isaac Lab, the ``post_physics_step`` function has been moved to the "
"framework in the base class. Tasks are not required to implement this "
"method, but can choose to override it if a different workflow is desired."
msgstr ""
"在Isaac Lab中， ``post_physics_step`` "
"函数已移至基类中的框架。任务不需要实现此方法，但如果需要不同的工作流程，则可以选择覆盖它。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:503
msgid "By default, Isaac Lab follows the following flow in logic:"
msgstr "默认情况下，Isaac Lab遵循以下逻辑流程: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:521
msgid ""
"In Isaac Lab, we also separate the ``pre_physics_step`` API for processing "
"actions from the policy with the ``apply_action`` API, which sets the "
"actions into the simulation. This provides more flexibility in controlling "
"when actions should be written to simulation when ``decimation`` is used. "
"``pre_physics_step`` will be called once per step before stepping "
"simulation. ``apply_actions`` will be called ``decimation`` number of times "
"for each RL step, once before each simulation step call."
msgstr ""
"在Isaac Lab中，我们还将 ``pre_physics_step`` API与从策略中处理操作的 ``apply_action`` "
"API分开，后者将操作设置到模拟中。当使用 ``decimation`` 时，这样可以更灵活地控制何时将操作写入模拟。每步之前将调用一次 "
"``pre_physics_step`` 来处理每个RL步骤， ``apply_actions`` 将在每个仿真步骤调用 ``decimation`` "
"次。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:527
msgid ""
"With this approach, resets are performed based on actions from the current "
"step instead of the previous step. Observations will also be computed with "
"the correct states after resets."
msgstr "采用这种方法，重置是根据当前步骤的操作执行的，而不是前一步骤。在重置后，观察也将使用正确的状态计算。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:530
msgid "We have also performed some renamings of APIs:"
msgstr "我们还进行了一些API的重命名: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:532
msgid "``create_sim(self)`` --> ``_setup_scene(self)``"
msgstr "``create_sim(self)`` --> ``_setup_scene(self)``"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:533
msgid ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, actions)``"
" and ``_apply_action(self)``"
msgstr ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, actions)``"
" 和 ``_apply_action(self)``"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:534
msgid "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"
msgstr "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:535
msgid ""
"``compute_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()`` should now return a dictionary ``{\"policy\": obs}``"
msgstr ""
"``compute_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()`` 现在应返回一个字典 ``{\"policy\": obs}``"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:536
msgid ""
"``compute_reward(self)`` --> ``_get_rewards(self)`` - ``_get_rewards()`` "
"should now return the reward buffer"
msgstr ""
"``compute_reward(self)`` --> ``_get_rewards(self)`` - ``_get_rewards()`` "
"现在应返回奖励缓冲区"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:537
msgid "``post_physics_step(self)`` --> moved to the base class"
msgstr "``post_physics_step(self)`` --> 移至基类"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:538
msgid ""
"In addition, Isaac Lab requires the implementation of ``_is_done(self)``, "
"which should return two buffers: the ``reset`` buffer and the ``time_out`` "
"buffer."
msgstr "此外，Isaac Lab要求实现 ``_is_done(self)`` ，它应返回两个缓冲区: 重置缓冲区和超时缓冲区。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:542
msgid "Putting It All Together"
msgstr "将所有内容整合"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:544
msgid ""
"The Cartpole environment is shown here in completion to fully show the "
"comparison between the IsaacGymEnvs implementation and the Isaac Lab "
"implementation."
msgstr "Cartpole环境在此处完整展示，以充分显示IsaacGymEnvs实现与Isaac Lab实现之间的比较。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:600
msgid "Task Setup"
msgstr "任务设置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:602
msgid ""
"Isaac Lab no longer requires pre-initialization of buffers through the "
"``acquire_*`` APIs that were used in IsaacGymEnvs. It is also no longer "
"necessary to ``wrap`` and ``unwrap`` tensors."
msgstr ""
"Isaac Lab不再需要通过在IsaacGymEnvs中使用的 ``acquire_*`` APIs预初始化缓冲区。也不再需要 ``wrap`` 和 "
"``unwrap`` 张量。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:641
msgid "Scene Setup"
msgstr "场景设置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:643
msgid ""
"Scene setup is now done through the ``Cloner`` API and by specifying actor "
"attributes in config objects. This eliminates the need to loop through the "
"number of environments to set up the environments and avoids the need to set"
" simulation parameters for actors in the task implementation."
msgstr "现在通过 ``Cloner`` API和在配置对象中指定角色属性来设置场景，以替代循环设置环境数量和设置任务实施中角色仿真参数的需求。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:736
msgid "Pre and Post Physics Step"
msgstr "物理步骤前后"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:738
msgid ""
"In IsaacGymEnvs, due to limitations of the GPU APIs, observations had stale "
"data when environments had to perform resets. This restriction has been "
"eliminated in Isaac Lab, and thus, tasks follow the correct workflow of "
"applying actions, stepping simulation, collecting states, computing dones, "
"calculating rewards, performing resets, and finally computing observations. "
"This workflow is done automatically by the framework such that a "
"``post_physics_step`` API is not required in the task. However, individual "
"tasks can override the ``step()`` API to control the workflow."
msgstr ""
"在IsaacGymEnvs中，由于GPU API的限制，当环境执行重置时，观测数据变得陈旧。在Isaac "
"Lab中消除了这一限制，因此，任务遵循正确的工作流程，即应用行动、模拟步进、收集状态、计算结束、计算奖励、执行重置，最后计算观测。这个工作流程由框架自动完成，因此任务中不需要"
" ``post_physics_step`` API。但是，单个任务可以重写 ``step()`` API以控制工作流程。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:745
msgid "IsaacLab"
msgstr "IsaacLab"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:773
msgid "Dones and Resets"
msgstr "结束和重置"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:775
msgid ""
"In Isaac Lab, ``dones`` are computed in the ``_get_dones()`` method and "
"should return two variables: ``resets`` and ``time_out``. Tracking of the "
"``progress_buf`` has been moved to the base class and is now automatically "
"incremented and reset by the framework. The ``progress_buf`` variable has "
"also been renamed to ``episode_length_buf``."
msgstr ""
"在Isaac Lab中， ``dones`` 在 ``_get_dones()`` 方法中计算，应返回两个变量:``resets`` 和 "
"``time_out`` 。跟踪 ``progress_buf`` 已经移动到基类，并且现在被框架自动递增和重置。 ``progress_buf`` "
"变量也已重命名为 ``episode_length_buf`` 。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:826
msgid "Observations"
msgstr "观察"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:828
msgid ""
"In Isaac Lab, the ``_get_observations()`` API should now return a dictionary"
" containing the ``policy`` key with the observation buffer as the value. For"
" asymmetric policies, the dictionary should also include a ``critic`` key "
"that holds the state buffer."
msgstr ""
"在Isaac Lab中， ``_get_observations()`` API现在应返回一个包含 ``policy`` "
"键及观测缓冲为值的字典。对于非对称策略，字典还应包括一个包含状态缓冲的 ``critic`` 键。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:853
msgid "Rewards"
msgstr "奖励"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:855
msgid ""
"In Isaac Lab, the reward method ``_get_rewards`` should return the reward "
"buffer as a return value. Similar to IsaacGymEnvs, computations in the "
"reward function can also be performed using pytorch jit by adding the "
"``@torch.jit.script`` annotation."
msgstr ""
"在Isaac Lab中，奖励方法 ``_get_rewards`` "
"应返回奖励缓冲区作为返回值。与IsaacGymEnvs类似，奖励函数中的计算也可以通过添加 ``@torch.jit.script`` "
"注释来使用pytorch jit执行。"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:908
msgid "Launching Training"
msgstr "启动训练"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:910
msgid "To launch a training in Isaac Lab, use the command:"
msgstr "在Isaac Lab中启动训练，请使用以下命令: "

#: ../../source/migration/migrating_from_isaacgymenvs.rst:917
msgid "Launching Inferencing"
msgstr "启动推理"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:919
msgid "To launch inferencing in Isaac Lab, use the command:"
msgstr "在Isaac Lab中启动推理，请使用以下命令: "
