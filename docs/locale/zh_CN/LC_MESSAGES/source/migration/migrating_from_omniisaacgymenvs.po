# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:4
msgid "From OmniIsaacGymEnvs"
msgstr "从OmniIsaacGymEnvs迁移"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:9
msgid ""
"`OmniIsaacGymEnvs`_ was a reinforcement learning framework using the "
"Isaac Sim platform. Features from OmniIsaacGymEnvs have been integrated "
"into the Isaac Lab framework. We have updated OmniIsaacGymEnvs to Isaac "
"Sim version 4.0.0 to support the migration process to Isaac Lab. Moving "
"forward, OmniIsaacGymEnvs will be deprecated and future development will "
"continue in Isaac Lab."
msgstr ""
"`OmniIsaacGymEnvs`_ 是一个使用 Isaac Sim 平台的强化学习框架。来自 OmniIsaacGymEnvs "
"的功能已经整合到 Isaac Lab 框架中。我们已经更新了 OmniIsaacGymEnvs 到 Isaac Sim 版本 "
"4.0.0，以支持迁移到 Isaac Lab 的过程。今后，OmniIsaacGymEnvs 将被弃用，未来的开发将继续在 Isaac Lab "
"中进行。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:17
msgid ""
"The following changes are with respect to Isaac Lab 1.0 release. Please "
"refer to the `release notes`_ for any changes in the future releases."
msgstr "以下更改针对于 Isaac Lab 1.0 发布版本。请参考 `release notes`_ 以获取未来发布版本的任何更改信息。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:21
msgid "Task Config Setup"
msgstr "任务配置设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:23
msgid ""
"In OmniIsaacGymEnvs, task config files were defined in ``.yaml`` format. "
"With Isaac Lab, configs are now specified using a specialized Python "
"class :class:`~isaaclab.utils.configclass`. The "
":class:`~isaaclab.utils.configclass` module provides a wrapper on top of "
"Python's ``dataclasses`` module. Each environment should specify its own "
"config class annotated by ``@configclass`` that inherits from the "
":class:`~envs.DirectRLEnvCfg` class, which can include simulation "
"parameters, environment scene parameters, robot parameters, and task-"
"specific parameters."
msgstr ""
"在 OmniIsaacGymEnvs中，任务配置文件是以 ``.yaml`` 格式定义的。而使用 Isaac Lab，配置现在使用专门的 "
"Python 类 :class:`~isaaclab.utils.configclass` 来指定。 "
":class:`~isaaclab.utils.configclass` 模块提供了对 Python 的 "
"``dataclasses`` 模块的包装。每个环境都应该指定自己的配置类，配置类使用 ``@configclass`` 注释，并继承自 "
":class:`~envs.DirectRLEnvCfg` 类，其中可以包括模拟参数、环境场景参数、机器人参数和特定于任务的参数。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:30
msgid "Below is an example skeleton of a task config class:"
msgstr "下面是任务配置类的示例骨架: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:56
msgid "Simulation Config"
msgstr "模拟配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:58
msgid ""
"Simulation related parameters are defined as part of the "
":class:`~isaaclab.sim.SimulationCfg` class, which is a "
":class:`~isaaclab.utils.configclass` module that holds simulation "
"parameters such as ``dt``, ``device``, and ``gravity``. Each task config "
"must have a variable named ``sim`` defined that holds the type "
":class:`~isaaclab.sim.SimulationCfg`."
msgstr ""
"与模拟相关的参数是作为 :class:`~isaaclab.sim.SimulationCfg` 类的一部分进行定义的，这是一个 "
":class:`~isaaclab.utils.configclass` 模块，包含模拟参数，如 ``dt`` ， "
"``device`` 和 ``gravity`` 。每个任务配置必须定义一个名为 ``sim`` 的变量，它包含类型 "
":class:`~isaaclab.sim.SimulationCfg` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:63
msgid ""
"Simulation parameters for articulations and rigid bodies such as "
"``num_position_iterations``, ``num_velocity_iterations``, "
"``contact_offset``, ``rest_offset``, ``bounce_threshold_velocity``, "
"``max_depenetration_velocity`` can all be specified on a per-actor basis "
"in the config class for each individual articulation and rigid body."
msgstr ""
"关节和刚体的仿真参数，例如 ``num_position_iterations`` 、 ``num_velocity_iterations`` 、"
" ``contact_offset`` 、 ``rest_offset`` 、 ``bounce_threshold_velocity`` 和 "
"``max_depenetration_velocity`` ，可以在每个单独的关节和刚体的配置类中以每个角色为基础进行指定。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:67
msgid ""
"When running simulation on the GPU, buffers in PhysX require pre-"
"allocation for computing and storing information such as contacts, "
"collisions and aggregate pairs. These buffers may need to be adjusted "
"depending on the complexity of the environment, the number of expected "
"contacts and collisions, and the number of actors in the environment. The"
" :class:`~isaaclab.sim.PhysxCfg` class provides access for setting the "
"GPU buffer dimensions."
msgstr ""
"在使用 GPU 运行仿真时，PhysX "
"中的缓冲区需要预先分配，用于计算和存储诸如接触、碰撞和聚合对等信息。这些缓冲区可能需要根据环境复杂性、预期接触和碰撞数量以及环境中的演员数量进行调整。:class:`~isaaclab.sim.PhysxCfg`"
" 类提供了设置 GPU 缓冲区尺寸的访问功能。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:121
msgid ""
"Parameters such as ``add_ground_plane`` and ``add_distant_light`` are now"
" part of the task logic when creating the scene. ``enable_cameras`` is "
"now a command line argument ``--enable_cameras`` that can be passed "
"directly to the training script."
msgstr ""
"以下参数，如 ``add_ground_plane`` 和 "
"``add_distant_light``，现在在创建场景时已成为任务逻辑的一部分。``enable_cameras`` 现在作为命令行参数 "
"``--enable_cameras`` 存在，可以直接传递给训练脚本。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:126
msgid "Scene Config"
msgstr "场景配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:128
msgid ""
"The :class:`~isaaclab.scene.InteractiveSceneCfg` class can be used to "
"specify parameters related to the scene, such as the number of "
"environments and the spacing between environments. Each task config must "
"have a variable named ``scene`` defined that holds the type "
":class:`~isaaclab.scene.InteractiveSceneCfg`."
msgstr ""
":class:`~isaaclab.scene.InteractiveSceneCfg` "
"类可用于指定与场景相关的参数，比如环境数量和环境之间的间距。每个任务配置必须定义一个名为 ``scene`` 的变量，其中包含类型 "
":class:`~isaaclab.scene.InteractiveSceneCfg` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:143
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:478
msgid "Task Config"
msgstr "任务配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:145
msgid ""
"Each environment should specify its own config class that holds task "
"specific parameters, such as the dimensions of the observation and action"
" buffers. Reward term scaling parameters can also be specified in the "
"config class."
msgstr "每个环境都应该指定自己的配置类，该类包含特定于任务的参数，比如观察和行动缓冲区的维度。奖励项缩放参数也可以在配置类中进行指定。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:148
msgid ""
"In Isaac Lab, the ``controlFrequencyInv`` parameter has been renamed to "
"``decimation``, which must be specified as a parameter in the config "
"class."
msgstr ""
"在Isaac Lab中， ``controlFrequencyInv`` 参数已更名为 ``decimation`` "
"，必须在配置类中作为参数进行指定。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:151
msgid ""
"In addition, the maximum episode length parameter (now "
"``episode_length_s``) is in seconds instead of steps as it was in "
"OmniIsaacGymEnvs. To convert between step count to seconds, use the "
"equation: ``episode_length_s = dt * decimation * num_steps``."
msgstr ""
"此外，最大的episode长度参数（现在是 ``episode_length_s`` "
"）以秒为单位，而不是作为在OmniIsaacGymEnvs中的步数。要在步数和秒数之间转换，使用以下方程:``episode_length_s ="
" dt * decimation * num_steps`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:155
msgid "The following parameters must be set for each environment config:"
msgstr "下面的参数必须为每个环境配置设置: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:167
msgid "RL Config Setup"
msgstr "RL配置设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:169
msgid ""
"RL config files for the rl_games library can continue to be defined in "
"``.yaml`` files in Isaac Lab. Most of the content of the config file can "
"be copied directly from OmniIsaacGymEnvs. Note that in Isaac Lab, we do "
"not use hydra to resolve relative paths in config files. Please replace "
"any relative paths such as ``${....device}`` with the actual values of "
"the parameters."
msgstr ""
"RL游戏库的rl配置文件在Isaac Lab中可以继续使用 ``.yaml`` "
"文件进行定义。配置文件的大部分内容可以直接从OmniIsaacGymEnvs中复制。请注意，在Isaac "
"Lab中，我们不使用hydra来解析配置文件中的相对路径。请用参数的实际值替换任何相对路径，如 ``${....device}`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:174
msgid ""
"Additionally, the observation and action clip ranges have been moved to "
"the RL config file. For any ``clipObservations`` and ``clipActions`` "
"parameters that were defined in the IsaacGymEnvs task config file, they "
"should be moved to the RL config file in Isaac Lab."
msgstr ""
"此外，观察和行动裁剪范围已经移到RL配置文件中。对于在IsaacGymEnvs任务配置文件中定义的 ``clipObservations`` 和 "
"``clipActions`` 参数，它们应该被移到Isaac Lab的RL配置文件中。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:180
msgid "IsaacGymEnvs Task Config"
msgstr "IsaacGymEnvs任务配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:180
msgid "Isaac Lab RL Config"
msgstr "Isaac Lab RL配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:192
msgid "Environment Creation"
msgstr "环境创建"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:194
msgid ""
"In OmniIsaacGymEnvs, environment creation generally happened in the "
"``set_up_scene()`` API, which involved creating the initial environment, "
"cloning the environment, filtering collisions, adding the ground plane "
"and lights, and creating the ``View`` classes for the actors."
msgstr ""
"在OmniIsaacGymEnvs中，环境创建通常发生在 ``set_up_scene()`` "
"API中，其中涉及创建初始环境、克隆环境、过滤碰撞、添加地面和光线，并创建角色的 ``View`` 类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:198
msgid ""
"Similar functionality is performed in Isaac Lab in the ``_setup_scene()``"
" API. The main difference is that the base class ``_setup_scene()`` no "
"longer performs operations for cloning the environment and adding ground "
"plane and lights. Instead, these operations should now be implemented in "
"individual tasks' ``_setup_scene`` implementations to provide more "
"flexibility around the scene setup process."
msgstr ""
"在Isaac Lab中，类似的功能在 ``_setup_scene()`` API中执行。主要区别在于基类 ``_setup_scene()`` "
"不再执行克隆环境和添加地面和光线的操作。相反，现在这些操作应该在各个任务的 ``_setup_scene`` "
"实现中进行，以提供更灵活的场景设置过程。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:204
msgid ""
"Also note that by defining an ``Articulation`` or ``RigidObject`` object,"
" the actors will be added to the scene by parsing the ``spawn`` parameter"
" in the actor config and a ``View`` class will automatically be created "
"for the actor. This avoids the need to separately define an "
"``ArticulationView`` or ``RigidPrimView`` object for the actors."
msgstr ""
"还要注意的是，通过定义 ``Articulation`` 或 ``RigidObject`` 对象，将根据角色配置中的 ``spawn`` "
"参数将角色添加到场景中，并且 ``View`` 类将自动为角色创建。这样可以避免需要单独为角色定义 ``ArticulationView`` 或 "
"``RigidPrimView`` 对象。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:211
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:337
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:353
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:441
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:483
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:574
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:627
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:666
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:704
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:761
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:815
msgid "OmniIsaacGymEnvs"
msgstr "OmniIsaacGymEnvs"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:211
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:337
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:353
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:441
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:483
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:574
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:627
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:704
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:761
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:815
msgid "Isaac Lab"
msgstr "Isaac Lab"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:231
msgid "Ground Plane"
msgstr "地面"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:233
msgid ""
"In addition to the above example, more sophisticated ground planes can be"
" defined using the :class:`~terrains.TerrainImporterCfg` class."
msgstr "除了以上示例外，还可以使用 :class:`~terrains.TerrainImporterCfg` 类定义更复杂的地面。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:252
msgid ""
"The terrain can then be added to the scene in ``_setup_scene(self)`` by "
"referencing the ``TerrainImporterCfg`` object:"
msgstr "然后，在 ``_setup_scene(self)`` 中，通过引用 ``TerrainImporterCfg`` 对象将地形添加到场景中: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:264
msgid "Actors"
msgstr "角色"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:266
msgid ""
"In Isaac Lab, each Articulation and Rigid Body actor can have its own "
"config class. The :class:`~isaaclab.assets.ArticulationCfg` class can be "
"used to define parameters for articulation actors, including file path, "
"simulation parameters, actuator properties, and initial states."
msgstr ""
"在Isaac Lab中，每个关节和刚体角色都可以有自己的配置类。 "
":class:`~isaaclab.assets.ArticulationCfg` "
"类可用于定义关节角色的参数，包括文件路径、模拟参数、执行器属性和初始状态。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:310
msgid ""
"Within the :class:`~assets.ArticulationCfg`, the ``spawn`` attribute can "
"be used to add the robot to the scene by specifying the path to the robot"
" file. In addition, the "
":class:`~isaaclab.sim.schemas.RigidBodyPropertiesCfg` class can be used "
"to specify simulation properties for the rigid bodies in the "
"articulation. Similarly, the "
":class:`~isaaclab.sim.schemas.ArticulationRootPropertiesCfg` class can be"
" used to specify simulation properties for the articulation. The joint "
"properties are now specified as part of the ``actuators`` dictionary "
"using :class:`~actuators.ImplicitActuatorCfg`. Joints with the same "
"properties can be grouped into regex expressions or provided as a list of"
" names or expressions."
msgstr ""
"在 :class:`~assets.ArticulationCfg` 中， ``spawn`` "
"属性可用于通过指定机器人文件的路径将机器人添加到场景中。此外， "
":class:`~isaaclab.sim.schemas.RigidBodyPropertiesCfg` "
"类可用于为关节中的刚体指定模拟属性。同样， "
":class:`~isaaclab.sim.schemas.ArticulationRootPropertiesCfg` "
"类可用于指定关节的模拟属性。使用 :class:`~actuators.ImplicitActuatorCfg` ，关节属性现在作为 "
"``actuators`` 字典的一部分进行指定。具有相同属性的关节可以被分组成正则表达式或提供为名称或表达式的列表。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:318
msgid ""
"Actors are added to the scene by simply calling ``self.cartpole = "
"Articulation(self.cfg.robot_cfg)``, where ``self.cfg.robot_cfg`` is an "
":class:`~assets.ArticulationCfg` object. Once initialized, they should "
"also be added to the :class:`~scene.InteractiveScene` by calling "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` so that the "
":class:`~scene.InteractiveScene` can traverse through actors in the scene"
" for writing values to the simulation and resetting."
msgstr ""
"角色是通过简单地调用 ``self.cartpole = Articulation(self.cfg.robot_cfg)`` "
"进行添加到场景的，其中 ``self.cfg.robot_cfg`` 是一个 :class:`~assets.ArticulationCfg` "
"对象。初始化后，它们也应该被添加到 :class:`~scene.InteractiveScene` 中，通过调用 "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` ，以便 "
":class:`~scene.InteractiveScene` 可以遍历场景中的角色，以便向模拟写入值并进行重置。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:326
msgid "Accessing States from Simulation"
msgstr "从模拟中获取状态"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:328
msgid ""
"APIs for accessing physics states in Isaac Lab require the creation of an"
" :class:`~assets.Articulation` or :class:`~assets.RigidObject` object. "
"Multiple objects can be initialized for different articulations or rigid "
"bodies in the scene by defining corresponding "
":class:`~assets.ArticulationCfg` or :class:`~assets.RigidObjectCfg` "
"config, as outlined in the section above. This replaces the previously "
"used :class:`~omni.isaac.core.articulations.ArticulationView` and "
":class:`omni.isaac.core.prims.RigidPrimView` classes used in "
"OmniIsaacGymEnvs."
msgstr ""
"在Isaac Lab中，访问物理状态的API需要创建一个 :class:`~assets.Articulation` 或 "
":class:`~assets.RigidObject` 对象。可以通过定义相应的 "
":class:`~assets.ArticulationCfg` 或 :class:`~assets.RigidObjectCfg` "
"配置来为场景中的不同关节或刚体初始化多个对象，就像在上面的部分中所述的。这取代了以前在OmniIsaacGymEnvs中使用的 "
":class:`~omni.isaac.core.articulations.ArticulationView` 和 "
":class:`omni.isaac.core.prims.RigidPrimView` 类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:334
msgid "However, functionality between the classes are similar:"
msgstr "然而，这些类之间的功能是类似的: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:345
msgid ""
"In Isaac Lab, :class:`~assets.Articulation` and "
":class:`~assets.RigidObject` classes both have a ``data`` class. The data"
" classes (:class:`~assets.ArticulationData` and "
":class:`~assets.RigidObjectData`) contain buffers that hold the states "
"for the articulation and rigid objects and provide a more performant way "
"of retrieving states from the actors."
msgstr ""
"在Isaac Lab中， :class:`~assets.Articulation` 和 :class:`~assets.RigidObject`"
" 类都有一个 ``data`` 类。数据类（ :class:`~assets.ArticulationData` 和 "
":class:`~assets.RigidObjectData` ）包含用于保存关节和刚体状态的缓冲区，并提供了一种更高效的方式从角色获取状态。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:350
msgid ""
"Apart from some renamings of APIs, setting states for actors can also be "
"performed similarly between OmniIsaacGymEnvs and Isaac Lab."
msgstr "除了一些API的重命名外，设置角色状态的功能在OmniIsaacGymEnvs和Isaac Lab之间也可以进行类似的操作。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:362
msgid ""
"In Isaac Lab, ``root_pose`` and ``root_velocity`` have been combined into"
" single buffers and no longer split between ``root_position``, "
"``root_orientation``, ``root_linear_velocity`` and "
"``root_angular_velocity``."
msgstr ""
"在Isaac Lab中， ``root_pose`` 和 ``root_velocity`` 已合并为单个缓冲区，并且不再分割为 "
"``root_position`` ， ``root_orientation`` ， ``root_linear_velocity`` 和 "
"``root_angular_velocity`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:372
msgid "Creating a New Environment"
msgstr "创建一个新环境"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:374
msgid ""
"Each environment in Isaac Lab should be in its own directory following "
"this structure:"
msgstr "Isaac Lab中的每个环境应该在自己的目录中，遵循以下结构: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:385
msgid "``my_environment`` is the root directory of the task."
msgstr "``my_environment`` 是任务的根目录。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:386
msgid ""
"``my_environment/agents`` is the directory containing all RL config files"
" for the task. Isaac Lab supports multiple RL libraries that can each "
"have its own individual config file."
msgstr ""
"``my_environment/agents`` 是包含任务的所有RL配置文件的目录。Isaac "
"Lab支持多个RL库，每个库可以有自己的配置文件。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:388
msgid ""
"``my_environment/__init__.py`` is the main file that registers the "
"environment with the Gymnasium interface. This allows the training and "
"inferencing scripts to find the task by its name. The content of this "
"file should be as follow:"
msgstr ""
"``my_environment/__init__.py`` "
"是通过Gymnasium接口将环境注册到Gymnasium接口的主文件。这允许训练和推断脚本通过名称找到任务。此文件的内容应该是如下所示: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:413
msgid ""
"``my_environment/my_env.py`` is the main python script that implements "
"the task logic and task config class for the environment."
msgstr "``my_environment/my_env.py`` 是实现任务逻辑和环境的任务配置类的主要python脚本。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:418
msgid "Task Logic"
msgstr "任务逻辑"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:420
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:569
msgid ""
"The ``post_reset`` API in OmniIsaacGymEnvs is no longer required in Isaac"
" Lab. Everything that was previously done in ``post_reset`` can be done "
"in the ``__init__`` method after executing the base class's ``__init__``."
" At this point, simulation has already started."
msgstr ""
"在Isaac Lab中，不再需要 ``post_reset`` API。以前在 ``post_reset`` 中完成的所有操作都可以在执行基类的 "
"``__init__`` 方法后在 ``__init__`` 方法中完成。此时，模拟已经开始。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:424
msgid ""
"In OmniIsaacGymEnvs, due to limitations of the GPU APIs, resets could not"
" be performed based on states of the current step. Instead, resets have "
"to be performed at the beginning of the next time step. This restriction "
"has been eliminated in Isaac Lab, and thus, tasks follow the correct "
"workflow of applying actions, stepping simulation, collecting states, "
"computing dones, calculating rewards, performing resets, and finally "
"computing observations. This workflow is done automatically by the "
"framework such that a ``post_physics_step`` API is not required in the "
"task. However, individual tasks can override the ``step()`` API to "
"control the workflow."
msgstr ""
"在OmniIsaacGymEnvs中，由于GPU "
"API的限制，不能根据当前步骤的状态进行重置。所以，重置必须在下一个时间步骤的开始时执行。在Isaac "
"Lab中，这个限制被消除了，因此这些任务可以按照正确的工作流程进行操作，包括应用动作、模拟步进、收集状态、计算完成标志、计算奖励、执行重置，最后计算观察。这个工作流程可以被框架自动执行，因此任务不需要"
" ``post_physics_step`` API。但是，各个任务可以覆盖 ``step()`` API以控制工作流程。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:431
msgid ""
"In Isaac Lab, we also separate the ``pre_physics_step`` API for "
"processing actions from the policy with the ``apply_action`` API, which "
"sets the actions into the simulation. This provides more flexibility in "
"controlling when actions should be written to simulation when "
"``decimation`` is used. The ``pre_physics_step`` method will be called "
"once per step before stepping simulation. The ``apply_actions`` method "
"will be called ``decimation`` number of times for each RL step, once "
"before each simulation step call."
msgstr ""
"在 Isaac Lab 中，我们还将 ``pre_physics_step`` API 与 ``apply_action`` API "
"分开，用于处理来自策略的动作，后者将动作设置到仿真中。这样可以更灵活地控制在使用 ``decimation`` 时何时将动作写入仿真。 "
"``pre_physics_step`` 方法将在每个步骤之前调用一次，在仿真步骤之前。 ``apply_actions`` 方法将在每个 RL "
"步骤中调用 ``decimation`` 次，即在每个仿真步骤调用之前各一次。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:438
msgid "The ordering of the calls are as follow:"
msgstr "调用的顺序如下: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:456
msgid ""
"With this approach, resets are performed based on actions from the "
"current step instead of the previous step. Observations will also be "
"computed with the correct states after resets."
msgstr "通过这种方法，重置是基于当前步骤的动作而不是上一个步骤执行的。观察还将根据重置后的正确状态进行计算。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:459
msgid "We have also performed some renamings of APIs:"
msgstr "我们还进行了一些API的重命名: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:461
msgid "``set_up_scene(self, scene)`` --> ``_setup_scene(self)``"
msgstr "``set_up_scene(self, scene)`` --> ``_setup_scene(self)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:462
msgid "``post_reset(self)`` --> ``__init__(...)``"
msgstr "``post_reset(self)`` --> ``__init__(...)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:463
msgid ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, "
"actions)`` and ``_apply_action(self)``"
msgstr ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, "
"actions)`` 和 ``_apply_action(self)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:464
msgid "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"
msgstr "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:465
msgid ""
"``get_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()`` should now return a dictionary ``{\"policy\": "
"obs}``"
msgstr ""
"``get_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()`` 现在应该返回一个字典 ``{\"policy\": obs}``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:466
msgid ""
"``calculate_metrics(self)`` --> ``_get_rewards(self)`` - "
"``_get_rewards()`` should now return the reward buffer"
msgstr ""
"``calculate_metrics(self)`` --> ``_get_rewards(self)`` - "
"``_get_rewards()`` 现在应该返回奖励缓冲区"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:467
msgid ""
"``is_done(self)`` --> ``_get_dones(self)`` - ``_get_dones()`` should now "
"return 2 buffers: ``reset`` and ``time_out`` buffers"
msgstr ""
"``is_done(self)`` --> ``_get_dones(self)`` - 现在 ``_get_dones()`` 应该返回 2 "
"个缓冲区:``reset`` 和 ``time_out`` 缓冲区"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:472
msgid "Putting It All Together"
msgstr "将所有内容组合在一起"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:474
msgid ""
"The Cartpole environment is shown here in completion to fully show the "
"comparison between the OmniIsaacGymEnvs implementation and the Isaac Lab "
"implementation."
msgstr "Cartpole 环境在这里被完整展示，以充分展示 OmniIsaacGymEnvs 实现和 Isaac Lab 实现之间的比较。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:480
msgid ""
"Task config in Isaac Lab can be split into the main task configuration "
"class and individual config objects for the actors."
msgstr "在 Isaac Lab 中，任务配置可以分为主要任务配置类和用于actor的单独配置对象。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:567
msgid "Task Setup"
msgstr "任务设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:619
msgid "Scene Setup"
msgstr "场景设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:621
msgid ""
"The ``set_up_scene`` method in OmniIsaacGymEnvs has been replaced by the "
"``_setup_scene`` API in the task class in Isaac Lab. Additionally, scene "
"cloning and collision filtering have been provided as APIs for the task "
"class to call when necessary. Similarly, adding ground plane and lights "
"should also be taken care of in the task class. Adding actors to the "
"scene has been replaced by ``self.scene.articulations[\"cartpole\"] = "
"self.cartpole``."
msgstr ""
"在 OmniIsaacGymEnvs 中， ``set_up_scene`` 方法已被 Isaac Lab 中任务类中的 "
"``_setup_scene`` API 替换。此外，还提供了场景克隆和碰撞过滤作为任务类在必要时调用的 "
"API。同样，添加地平面和光源也应在任务类中处理。向场景添加actor已被替换为 "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:659
msgid "Pre-Physics Step"
msgstr "预物理步骤"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:661
msgid ""
"Note that resets are no longer performed in the ``pre_physics_step`` API."
" In addition, the separation of the ``_pre_physics_step`` and "
"``_apply_action`` methods allow for more flexibility in processing the "
"action buffer and setting actions into simulation."
msgstr ""
"请注意，重置不再在 ``pre_physics_step`` API 中执行。此外， ``_pre_physics_step`` 和 "
"``_apply_action`` 方法的分离允许更灵活地处理动作缓冲区并将动作设置到仿真中。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:666
msgid "IsaacLab"
msgstr "IsaacLab"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:695
msgid "Dones and Resets"
msgstr "完成和重置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:697
msgid ""
"In Isaac Lab, the ``dones`` are computed in the ``_get_dones()`` method "
"and should return two variables: ``resets`` and ``time_out``. The "
"``_reset_idx()`` method is also called after stepping simulation instead "
"of before, as it was done in OmniIsaacGymEnvs. The ``progress_buf`` "
"tensor has been renamed to ``episode_length_buf`` in Isaac Lab and the "
"bookkeeping is now done automatically by the framework. Task "
"implementations no longer need to increment or reset the "
"``episode_length_buf`` buffer."
msgstr ""
"在 Isaac Lab 中， ``dones`` 是在 ``_get_dones()`` 方法中计算的，应该返回两个变量:``resets`` 和"
" ``time_out`` 。 ``_reset_idx()`` 方法也在仿真后而不是在 OmniIsaacGymEnvs 中之前调用。 "
"``progress_buf`` 张量在 Isaac Lab 中已更名为 ``episode_length_buf`` "
"，框架现在会自动处理记录。任务实现不再需要递增或重置 ``episode_length_buf`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:754
msgid "Rewards"
msgstr "奖励"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:756
msgid ""
"In Isaac Lab, rewards are implemented in the ``_get_rewards`` API and "
"should return the reward buffer instead of assigning it directly to "
"``self.rew_buf``. Computation in the reward function can also be "
"performed using pytorch jit through defining functions with the "
"``@torch.jit.script`` annotation."
msgstr ""
"在 Isaac Lab 中，奖励是在 ``_get_rewards`` API 中实现的，应该返回奖励缓冲区，而不是直接赋值给 "
"``self.rew_buf`` 。还可以使用 PyTorch jit 通过定义带有 ``@torch.jit.script`` "
"注释的函数来执行奖励函数的计算。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:808
msgid "Observations"
msgstr "观察"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:810
msgid ""
"In Isaac Lab, the ``_get_observations()`` API must return a dictionary "
"with the key ``policy`` that has the observation buffer as the value. "
"When working with asymmetric actor-critic states, the states for the "
"critic should have the key ``critic`` and be returned with the "
"observation buffer in the same dictionary."
msgstr ""
"在 Isaac Lab 中， ``_get_observations()`` API 必须返回一个带有键 ``policy`` "
"且值为观察缓冲区的字典。当使用非对称的actor-critic状态时，评论者的状态应该有键 ``critic`` "
"，并与观察缓冲区一起返回在同一个字典中。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:839
msgid "Domain Randomization"
msgstr "域随机化"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:841
msgid ""
"In OmniIsaacGymEnvs, domain randomization was specified through the task "
"``.yaml`` config file. In Isaac Lab, the domain randomization "
"configuration uses the :class:`~isaaclab.utils.configclass` module to "
"specify a configuration class consisting of "
":class:`~managers.EventTermCfg` variables."
msgstr ""
"在 OmniIsaacGymEnvs 中，域随机化是通过任务的 ``.yaml`` 配置文件指定的。而在 Isaac Lab 中，域随机化配置使用"
" :class:`~isaaclab.utils.configclass` 模块来指定一个由 "
":class:`~managers.EventTermCfg` 变量组成的配置类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:845
msgid "Below is an example of a configuration class for domain randomization:"
msgstr "以下是一个域随机化的配置类示例: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:885
msgid ""
"Each ``EventTerm`` object is of the :class:`~managers.EventTermCfg` class"
" and takes in a ``func`` parameter for specifying the function to call "
"during randomization, a ``mode`` parameter, which can be ``startup``, "
"``reset`` or ``interval``. THe ``params`` dictionary should provide the "
"necessary arguments to the function that is specified in the ``func`` "
"parameter. Functions specified as ``func`` for the ``EventTerm`` can be "
"found in the :class:`~envs.mdp.events` module."
msgstr ""
"每个 ``EventTerm`` 对象都是 :class:`~managers.EventTermCfg` 类的实例，并使用 ``func`` "
"参数来指定在随机化期间调用的函数，使用 ``mode`` 参数来指定 ``startup``、``reset`` 或 ``interval`` 。"
" ``params`` 字典应提供给函数的必要参数，这些函数作为 ``EventTerm`` 的 ``func`` 参数在 "
":class:`~envs.mdp.events` 模块中找到。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:891
msgid ""
"Note that as part of the ``\"asset_cfg\": SceneEntityCfg(\"robot\", "
"body_names=\".*\")`` parameter, the name of the actor ``\"robot\"`` is "
"provided, along with the body or joint names specified as a regex "
"expression, which will be the actors and bodies/joints that will have "
"randomization applied."
msgstr ""
"请注意，在 ``\"asset_cfg\": SceneEntityCfg(\"robot\", body_names=\".*\")`` "
"参数中，提供了actor ``\"robot\"`` "
"的名称，以及作为正则表达式表达的主体或关节名称，这些将是将随机化应用于的actor和主体/关节。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:895
msgid ""
"One difference with OmniIsaacGymEnvs is that ``interval`` randomization "
"is now specified as seconds instead of steps. When ``mode=\"interval\"``,"
" the ``interval_range_s`` parameter must also be provided, which "
"specifies the range of seconds for which randomization should be applied."
" This range will then be randomized to determine a specific time in "
"seconds when the next randomization will occur for the term. To convert "
"between steps to seconds, use the equation ``time_s = num_steps * "
"(decimation * dt)``."
msgstr ""
"与 OmniIsaacGymEnvs 的一个区别是，现在 ``interval`` 随机化是以秒而不是步数指定的。当 "
"``mode=\"interval\"`` 时，还必须提供 ``interval_range_s`` "
"参数，该参数指定应用随机化的秒数范围。然后将随机选择此范围，以确定下一个术语的特定时间。要将步长转换为秒，请使用等式 ``time_s = "
"num_steps * (decimation * dt)`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:901
msgid ""
"Similar to OmniIsaacGymEnvs, randomization APIs are available for "
"randomizing articulation properties, such as joint stiffness and damping,"
" joint limits, rigid body materials, fixed tendon properties, as well as "
"rigid body properties, such as mass and rigid body materials. "
"Randomization of the physics scene gravity is also supported. Note that "
"randomization of scale is current not supported in Isaac Lab. To "
"randomize scale, please set up the scene in a way where each environment "
"holds the actor at a different scale."
msgstr ""
"与 OmniIsaacGymEnvs 类似，随机化 API "
"可用于随机化关节刚度和阻尼、关节限制、刚体材料、固定肌腱属性以及质量和刚体材料等刚体属性。物理场景重力的随机化也受支持。请注意，Isaac Lab"
" 目前不支持scale的随机化。要随机化scale，请以每种环境以不同scale容纳actor的方式设置场景。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:908
msgid ""
"Once the ``configclass`` for the randomization terms have been set up, "
"the class must be added to the base config class for the task and be "
"assigned to the variable ``events``."
msgstr "一旦设置了随机化术语的 ``configclass`` 类，该类必须添加到任务的基本配置类中，并分配给变量 ``events`` 。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:919
msgid "Action and Observation Noise"
msgstr "动作和观察噪声"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:921
msgid ""
"Actions and observation noise can also be added using the "
":class:`~utils.configclass` module. Action and observation noise configs "
"must be added to the main task config using the ``action_noise_model`` "
"and ``observation_noise_model`` variables:"
msgstr ""
"使用 :class:`~utils.configclass` 模块也可以添加动作和观察噪声。必须将动作和观察噪声配置添加到主要任务配置中，使用 "
"``action_noise_model`` 和 ``observation_noise_model`` 变量: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:941
msgid ""
":class:`~.utils.noise.NoiseModelWithAdditiveBiasCfg` can be used to "
"sample both uncorrelated noise per step as well as correlated noise that "
"is re-sampled at reset time. The ``noise_cfg`` term specifies the "
"Gaussian distribution that will be sampled at each step for all "
"environments. This noise will be added to the corresponding actions and "
"observations buffers at every step. The ``bias_noise_cfg`` term specifies"
" the Gaussian distribution for the correlated noise that will be sampled "
"at reset time for the environments being reset. The same noise will be "
"applied each step for the remaining of the episode for the environments "
"and resampled at the next reset."
msgstr ""
":class:`~.utils.noise.NoiseModelWithAdditiveBiasCfg` "
"可以用于每个步骤产生不相关的噪声，以及在重置时重新采样的相关噪声。 ``noise_cfg`` "
"术语指定将在每个步骤为所有环境采样的高斯分布。此噪声将在每一步添加到相应的动作和观察缓冲区中。 ``bias_noise_cfg`` "
"术语指定在被重置的环境的重置时间采样的相关噪声的高斯分布。相同的噪声将在剩余的剧集每一步应用，并在下一次重置时重新采样。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:951
msgid "This replaces the following setup in OmniIsaacGymEnvs:"
msgstr "这取代了 OmniIsaacGymEnvs 中的以下设置: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:981
msgid "Launching Training"
msgstr "启动训练"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:983
msgid "To launch a training in Isaac Lab, use the command:"
msgstr "要在 Isaac Lab 中启动训练，使用该命令: "

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:990
msgid "Launching Inferencing"
msgstr "启动推理"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:992
msgid "To launch inferencing in Isaac Lab, use the command:"
msgstr "要在 Isaac Lab 中启动推理，使用该命令: "
