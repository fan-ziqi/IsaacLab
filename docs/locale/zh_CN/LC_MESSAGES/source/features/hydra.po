# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-22 14:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/features/hydra.rst:2
msgid "Hydra Configuration System"
msgstr "Hydra 配置系统"

#: ../../source/features/hydra.rst:6
msgid ""
"Isaac Lab supports the `Hydra <https://hydra.cc/docs/intro/>`_ configuration"
" system to modify the task's configuration using command line arguments, "
"which can be useful to automate experiments and perform hyperparameter "
"tuning."
msgstr ""
"Isaac Lab 支持 `Hydra <https://hydra.cc/docs/intro/>`_ "
"配置系统，以通过命令行参数修改任务的配置，这对于自动化实验和执行超参数调整非常有用。"

#: ../../source/features/hydra.rst:9
msgid ""
"Any parameter of the environment can be modified by adding one or multiple "
"elements of the form ``env.a.b.param1=value`` to the command line input, "
"where ``a.b.param1`` reflects the parameter's hierarchy, for example "
"``env.actions.joint_effort.scale=10.0``. Similarly, the agent's parameters "
"can be modified by using the ``agent`` prefix, for example "
"``agent.seed=2024``."
msgstr ""
"环境的任何参数都可以通过在命令行输入中添加一个或多个形式为 ``env.a.b.param1=value`` 的元素来修改，其中 "
"``a.b.param1`` 反映了参数的层次结构，例如 ``env.actions.joint_effort.scale=10.0`` "
"。类似地，智能体的参数可以通过使用 ``agent`` 前缀来修改，例如 ``agent.seed=2024`` 。"

#: ../../source/features/hydra.rst:13
msgid ""
"The way these command line arguments are set follow the exact structure of "
"the configuration files. Since the different RL frameworks use different "
"conventions, there might be differences in the way the parameters are set. "
"For example, with *rl_games* the seed will be set with "
"``agent.params.seed``, while with *rsl_rl*, *skrl* and *sb3* it will be set "
"with ``agent.seed``."
msgstr ""
"这些命令行参数的设置方式遵循配置文件的精确结构。由于不同的 RL 框架使用不同的约定，因此参数设置方式可能会有所不同。例如，使用 *rl_games* "
"时，种子将通过 ``agent.params.seed`` 设置，而在 *rsl_rl* 、 *skrl* 和 *sb3* 中，则通过 "
"``agent.seed`` 设置。"

#: ../../source/features/hydra.rst:18
msgid ""
"As a result, training with hydra arguments can be run with the following "
"syntax:"
msgstr "因此，使用 hydra 参数进行训练可以使用以下语法运行: "

#: ../../source/features/hydra.rst
msgid "rsl_rl"
msgstr "rsl_rl"

#: ../../source/features/hydra.rst
msgid "rl_games"
msgstr "`rl_games`"

#: ../../source/features/hydra.rst
msgid "skrl"
msgstr "`skrl`"

#: ../../source/features/hydra.rst
msgid "sb3"
msgstr "sb3"

#: ../../source/features/hydra.rst:51
msgid ""
"The above command will run the training script with the task ``Isaac-"
"Cartpole-v0`` in headless mode, and set the "
"``env.actions.joint_effort.scale`` parameter to 10.0 and the ``agent.seed`` "
"parameter to 2024."
msgstr ""
"上述命令将以无头模式运行任务 ``Isaac-Cartpole-v0`` 的训练脚本，并将 "
"``env.actions.joint_effort.scale`` 参数设置为 10.0，以及将 ``agent.seed`` 参数设置为 2024。"

#: ../../source/features/hydra.rst:56
msgid ""
"To keep backwards compatibility, and to provide a more user-friendly "
"experience, we have kept the old cli arguments of the form ``--param``, for "
"example ``--num_envs``, ``--seed``, ``--max_iterations``. These arguments "
"have precedence over the hydra arguments, and will overwrite the values set "
"by the hydra arguments."
msgstr ""
"为了保持向后兼容性，并提供更友好的用户体验，我们保留了旧的 cli 参数形式 ``--param``，例如 "
"``--num_envs``、``--seed``、``--max_iterations``。这些参数优先于 hydra 参数，并将覆盖由 hydra "
"参数设置的值。"

#: ../../source/features/hydra.rst:62
msgid "Modifying advanced parameters"
msgstr "修改高级参数"

#: ../../source/features/hydra.rst:65
msgid "Callables"
msgstr "可调用对象"

#: ../../source/features/hydra.rst:67
msgid ""
"It is possible to modify functions and classes in the configuration files by"
" using the syntax ``module:attribute_name``. For example, in the Cartpole "
"environment:"
msgstr "可以通过使用语法 ``module:attribute_name`` 修改配置文件中的函数和类。例如，在 Cartpole 环境中: "

#: ../../source/features/hydra.rst:76
msgid ""
"we could modify ``joint_pos_rel`` to compute absolute positions instead of "
"relative positions with "
"``env.observations.policy.joint_pos_rel.func=omni.isaac.lab.envs.mdp:joint_pos``."
msgstr ""
"我们可以修改 ``joint_pos_rel`` 以计算绝对位置，而不是相对位置，使用 "
"``env.observations.policy.joint_pos_rel.func=omni.isaac.lab.envs.mdp:joint_pos``。"

#: ../../source/features/hydra.rst:80
msgid "Setting parameters to None"
msgstr "将参数设置为 None"

#: ../../source/features/hydra.rst:82
msgid ""
"To set parameters to None, use the ``null`` keyword, which is a special "
"keyword in Hydra that is automatically converted to None. In the above "
"example, we could also disable the ``joint_pos_rel`` observation by setting "
"it to None with ``env.observations.policy.joint_pos_rel=null``."
msgstr ""
"要将参数设置为 None，请使用 ``null`` 关键字，这是 Hydra 中的一个特殊关键字，会自动转换为 "
"None。在上面的示例中，我们还可以通过将 ``env.observations.policy.joint_pos_rel=null`` 设置为 "
"None 来禁用 ``joint_pos_rel`` 观察。"

#: ../../source/features/hydra.rst:87
msgid "Dictionaries"
msgstr "字典"

#: ../../source/features/hydra.rst:88
msgid ""
"Elements in dictionaries are handled as a parameters in the hierarchy. For "
"example, in the Cartpole environment:"
msgstr "字典中的元素被作为参数处理在层级结构中。例如，在 Cartpole 环境中: "

#: ../../source/features/hydra.rst:95
msgid ""
"the ``position_range`` parameter can be modified with "
"``env.events.reset_cart_position.params.position_range=\"[-2.0, 2.0]\"``. "
"This example shows two noteworthy points:"
msgstr ""
"``position_range`` 参数可以通过 "
"``env.events.reset_cart_position.params.position_range=\"[-2.0, 2.0]\"`` "
"进行修改。这个例子展示了两个值得注意的点: "

#: ../../source/features/hydra.rst:98
msgid "The parameter we set has a space, so it must be enclosed in quotes."
msgstr "我们设置的参数包含空格，因此必须用引号括起来。"

#: ../../source/features/hydra.rst:99
msgid ""
"The parameter is a list while it is a tuple in the config. This is due to "
"the fact that Hydra does not support tuples."
msgstr "参数是一个列表，而在 config 中它是一个元组。这是因为 Hydra 不支持元组。"

#: ../../source/features/hydra.rst:103
msgid "Modifying inter-dependent parameters"
msgstr "修改高级参数"

#: ../../source/features/hydra.rst:105
msgid ""
"Particular care should be taken when modifying the parameters using command "
"line arguments. Some of the configurations perform intermediate computations"
" based on other parameters. These computations will not be updated when the "
"parameters are modified."
msgstr "在使用命令行参数修改参数时应特别小心。一些配置会根据其他参数执行中间计算。这些计算在参数被修改时不会更新。"

#: ../../source/features/hydra.rst:109
msgid ""
"For example, for the configuration of the Cartpole camera depth environment:"
msgstr "例如，对于 Cartpole 相机深度环境的配置: "

#: ../../source/features/hydra.rst:117
msgid ""
"If the user were to modify the width of the camera, i.e. "
"``env.tiled_camera.width=128``, then the parameter "
"``env.observation_space=[80,128,1]`` must be updated and given as input as "
"well."
msgstr ""
"如果用户修改了相机的宽度，即 ``env.tiled_camera.width=128`` ，那么参数 "
"``env.observation_space=[80,128,1]`` 也必须更新并作为输入提供。"

#: ../../source/features/hydra.rst:120
msgid ""
"Similarly, the ``__post_init__`` method is not updated with the command line"
" inputs. In the ``LocomotionVelocityRoughEnvCfg``, for example, the post "
"init update is as follows:"
msgstr ""
"类似地，``__post_init__`` 方法不会随着命令行输入而更新。在 ``LocomotionVelocityRoughEnvCfg`` "
"中，例如，post init 更新如下: "

#: ../../source/features/hydra.rst:128
msgid ""
"Here, when modifying ``env.decimation`` or ``env.sim.dt``, the user needs to"
" give the updated ``env.sim.render_interval``, "
"``env.scene.height_scanner.update_period``, and "
"``env.scene.contact_forces.update_period`` as input as well."
msgstr ""
"在这里，当修改 ``env.decimation`` 或 ``env.sim.dt`` 时，用户还需要输入更新后的 "
"``env.sim.render_interval`` 、``env.scene.height_scanner.update_period`` 和 "
"``env.scene.contact_forces.update_period`` 。"
