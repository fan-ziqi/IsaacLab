# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 20:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/features/tiled_rendering.rst:2
msgid "Tiled-Camera Rendering"
msgstr "平铺相机渲染"

#: ../../source/features/tiled_rendering.rst:8
msgid "This feature is only available from Isaac Sim version 4.2.0 onwards."
msgstr "此功能仅在Isaac Sim 4.2.0及以上版本可用。"

#: ../../source/features/tiled_rendering.rst:10
msgid ""
"Tiled rendering in combination with image processing networks require heavy "
"memory resources, especially at larger resolutions. We recommend running at "
"512 cameras in the scene on RTX 4090 GPUs or similar."
msgstr ""
"平铺渲染结合图像处理网络需要大量内存资源，尤其是在更大的分辨率下。我们建议在RTX 4090 GPUs或类似设备上在场景中运行512台摄像机。"

#: ../../source/features/tiled_rendering.rst:14
msgid ""
"Tiled rendering APIs provide a vectorized interface for collecting data from"
" camera sensors. This is useful for reinforcement learning environments "
"requiring vision in the loop. Tiled rendering works by concatenating camera "
"outputs from multiple cameras and rendering one single large image instead "
"of multiple smaller images that would have been produced by each individual "
"camera. This reduces the amount of time required for rendering and provides "
"a more efficient API for working with vision data."
msgstr ""
"平铺渲染API提供了一个矢量化接口，用于从摄像头传感器收集数据。这对需要视觉环节的强化学习环境非常有用。平铺渲染通过连接多个摄像头的相机输出并呈现为单个大图像，而不是由每个单独摄像头生成的多个较小图像。这减少了呈现所需的时间，并为处理视觉数据提供了更高效的API。"

#: ../../source/features/tiled_rendering.rst:21
msgid ""
"Isaac Lab provides tiled rendering APIs for RGB, depth, along with other "
"annotators through the :class:`~sensors.TiledCamera` class. Configurations "
"for the tiled rendering APIs can be defined through the "
":class:`~sensors.TiledCameraCfg` class, specifying parameters such as the "
"regex expression for all camera paths, the transform for the cameras, the "
"desired data type, the type of cameras to add to the scene, and the camera "
"resolution."
msgstr ""
"Isaac Lab 提供了用于 RGB、深度以及其他注释器的分块渲染 API，通过 :class:`~sensors.TiledCamera` "
"类。分块渲染 API 的配置可以通过 :class:`~sensors.TiledCameraCfg` "
"类来定义，指定诸如所有相机路径的正则表达式、相机的变换、所需的数据类型、要添加到场景中的相机类型以及相机分辨率等参数。"

#: ../../source/features/tiled_rendering.rst:40
msgid ""
"To access the tiled rendering interface, a :class:`~sensors.TiledCamera` "
"object can be created and used to retrieve data from the cameras."
msgstr "要访问平铺渲染接口，可以创建一个 :class:`~sensors.TiledCamera` 对象，并用于从摄像头获取数据。"

#: ../../source/features/tiled_rendering.rst:49
msgid ""
"The returned data will be transformed into the shape (num_cameras, height, "
"width, num_channels), which can be used directly as observation for "
"reinforcement learning."
msgstr "返回的数据将转换为形状（num_cameras，height，width，num_channels），可以直接用作强化学习的观察数据。"

#: ../../source/features/tiled_rendering.rst:52
msgid ""
"When working with rendering, make sure to add the ``--enable_cameras`` "
"argument when launching the environment. For example:"
msgstr "在处理渲染时，请确保在启动环境时添加 ``--enable_cameras`` 参数。例如："

#: ../../source/features/tiled_rendering.rst:61
msgid "Annotators and Data Types"
msgstr "注释器和数据类型"

#: ../../source/features/tiled_rendering.rst:63
msgid ""
"Both :class:`~sensors.TiledCamera` and :class:`~sensors.Camera` classes "
"provide APIs for retrieving various types annotator data from replicator:"
msgstr ""
"`:class:`~sensors.TiledCamera` 和 :class:`~sensors.Camera` "
"类提供了从复制器中检索各种类型注释器数据的 API："

#: ../../source/features/tiled_rendering.rst:65
msgid "``\"rgb\"``: A 3-channel rendered color image."
msgstr "``\"rgb\"`` ：一个由 3 通道渲染的彩色图像。"

#: ../../source/features/tiled_rendering.rst:66
msgid "``\"rgba\"``: A 4-channel rendered color image with alpha channel."
msgstr "``\"rgba\"`` ：一个由4个通道渲染的带有 Alpha 通道的彩色图像。"

#: ../../source/features/tiled_rendering.rst:67
msgid ""
"``\"distance_to_camera\"``: An image containing the distance to camera "
"optical center."
msgstr "``\"distance_to_camera\"`` ：包含到相机光学中心的距离的图像。"

#: ../../source/features/tiled_rendering.rst:68
msgid ""
"``\"distance_to_image_plane\"``: An image containing distances of 3D points "
"from camera plane along camera's z-axis."
msgstr "``\"distance_to_image_plane\"`` ：包含 3D 点从相机平面沿相机Z轴的距离的图像。"

#: ../../source/features/tiled_rendering.rst:69
msgid "``\"depth\"``: The same as ``\"distance_to_image_plane\"``."
msgstr "``\"depth\"`` ：和 ``\"distance_to_image_plane\"`` 相同。"

#: ../../source/features/tiled_rendering.rst:70
msgid ""
"``\"normals\"``: An image containing the local surface normal vectors at "
"each pixel."
msgstr "``\"normals\"`` ：包含每个像素处的局部表面法线向量的图像。"

#: ../../source/features/tiled_rendering.rst:71
msgid ""
"``\"motion_vectors\"``: An image containing the motion vector data at each "
"pixel."
msgstr "``\"motion_vectors\"`` ：包含每个像素的运动矢量数据的图像。"

#: ../../source/features/tiled_rendering.rst:72
msgid "``\"semantic_segmentation\"``: The semantic segmentation data."
msgstr "``\"semantic_segmentation\"`` ：语义分割数据。"

#: ../../source/features/tiled_rendering.rst:73
msgid "``\"instance_segmentation_fast\"``: The instance segmentation data."
msgstr "``\"instance_segmentation_fast\"`` ：实例分割数据。"

#: ../../source/features/tiled_rendering.rst:74
msgid "``\"instance_id_segmentation_fast\"``: The instance id segmentation data."
msgstr "``\"instance_id_segmentation_fast\"`` ：实例 ID 分割数据。"

#: ../../source/features/tiled_rendering.rst:77
msgid "RGB and RGBA"
msgstr "RGB 和 RGBA"

#: ../../source/features/tiled_rendering.rst:79
msgid ""
"``rgb`` data type returns a 3-channel RGB colored image of type "
"``torch.uint8``, with dimension (B, H, W, 3)."
msgstr "``rgb`` 数据类型返回一个类型为 ``torch.uint8`` 的3通道RGB彩色图像，尺寸为（B，H，W，3）。"

#: ../../source/features/tiled_rendering.rst:81
msgid ""
"``rgba`` data type returns a 4-channel RGBA colored image of type "
"``torch.uint8``, with dimension (B, H, W, 4)."
msgstr "``rgba`` 数据类型返回一个类型为 ``torch.uint8`` 的4通道RGBA彩色图像，尺寸为（B，H，W，4）。"

#: ../../source/features/tiled_rendering.rst:83
msgid ""
"To convert the ``torch.uint8`` data to ``torch.float32``, divide the buffer "
"by 255.0 to obtain a ``torch.float32`` buffer containing data from 0 to 1."
msgstr ""
"要将 ``torch.uint8`` 数据转换为 ``torch.float32`` ，请将缓冲区除以255.0，以获得包含数据0到1的 "
"``torch.float32`` 缓冲区。"

#: ../../source/features/tiled_rendering.rst:86
msgid "Depth and Distances"
msgstr "深度和距离"

#: ../../source/features/tiled_rendering.rst:88
msgid ""
"``distance_to_camera`` returns a single-channel depth image with distance to"
" the camera optical center. The dimension for this annotator is (B, H, W, 1)"
" and has type ``torch.float32``."
msgstr ""
"``distance_to_camera`` 返回一个单通道深度图像，显示到相机光学中心的距离。这个注释器的尺寸为（B，H，W，1），类型为 "
"``torch.float32`` 。"

#: ../../source/features/tiled_rendering.rst:90
msgid ""
"``distance_to_image_plane`` returns a single-channel depth image with "
"distances of 3D points from the camera plane along the camera's Z-axis. The "
"dimension for this annotator is (B, H, W, 1) and has type ``torch.float32``."
msgstr ""
"``distance_to_image_plane`` "
"返回一个单通道深度图像，显示3D点从相机平面沿着相机的Z轴的距离。这个注释器的尺寸为（B，H，W，1），类型为 ``torch.float32`` 。"

#: ../../source/features/tiled_rendering.rst:92
msgid ""
"``depth`` is provided as an alias for ``distance_to_image_plane`` and will "
"return the same data as the ``distance_to_image_plane`` annotator, with "
"dimension (B, H, W, 1) and type ``torch.float32``."
msgstr ""
"``depth`` 提供了 ``distance_to_image_plane`` 的别名，并且会返回与 "
"``distance_to_image_plane`` 注释器相同的数据，尺寸为（B，H，W，1），类型为 ``torch.float32`` 。"

#: ../../source/features/tiled_rendering.rst:95
msgid "Normals"
msgstr "法线"

#: ../../source/features/tiled_rendering.rst:97
msgid ""
"``normals`` returns an image containing the local surface normal vectors at "
"each pixel. The buffer has dimension (B, H, W, 3), containing the (x, y, z) "
"information for each vector, and has data type ``torch.float32``."
msgstr ""
"``normals`` 返回一个包含每个像素处的局部表面法线向量的图像。缓冲区的尺寸为（B，H，W，3），包含每个矢量的（x，y，z）信息，类型为 "
"``torch.float32`` 。"

#: ../../source/features/tiled_rendering.rst:100
msgid "Motion Vectors"
msgstr "运动矢量"

#: ../../source/features/tiled_rendering.rst:102
msgid ""
"``motion_vectors`` returns the per-pixel motion vectors in image space, with"
" a 2D array of motion vectors representing the relative motion of a pixel in"
" the camera’s viewport between frames. The buffer has dimension (B, H, W, "
"2), representing x - the motion distance in the horizontal axis (image "
"width) with movement to the left of the image being positive and movement to"
" the right being negative and y - motion distance in the vertical axis "
"(image height) with movement towards the top of the image being positive and"
" movement to the bottom being negative. The data type is ``torch.float32``."
msgstr ""
"``motion_vectors`` "
"返回图像空间中每个像素的像素运动矢量，用包含相对于帧之间相机视口中像素的相对运动的运动矢量的二维数组表示。缓冲区的尺寸为（B，H，W，2），表示x-"
"水平轴（图像宽度）上的运动距离，左侧图像的移动为正，右侧移动为负，y-垂直轴（图像高度）上的运动距离，图像顶部移动为正，向底部移动为负。数据类型为 "
"``torch.float32`` 。"

#: ../../source/features/tiled_rendering.rst:105
msgid "Semantic Segmentation"
msgstr "语义分割"

#: ../../source/features/tiled_rendering.rst:107
msgid ""
"``semantic_segmentation`` outputs semantic segmentation of each entity in "
"the camera’s viewport that has semantic labels. In addition to the image "
"buffer, an ``info`` dictionary can be retrieved with "
"``tiled_camera.data.info['semantic_segmentation']`` containing ID to labels "
"information."
msgstr ""
"``semantic_segmentation`` 输出相机视口中具有语义标签的每个实体的语义分割。除了图像缓冲区外，还可以使用 "
"``tiled_camera.data.info['semantic_segmentation']`` 检索到包含ID到标签信息的 ``info`` "
"字典。"

#: ../../source/features/tiled_rendering.rst:109
msgid ""
"If ``colorize_semantic_segmentation=True`` in the camera config, a 4-channel"
" RGBA image will be returned with dimension (B, H, W, 4) and type "
"``torch.uint8``. The info ``idToLabels`` dictionary will be the mapping from"
" color to semantic labels."
msgstr ""
"如果相机配置中 ``colorize_semantic_segmentation=True`` "
"，则会返回一个4通道RGBA图像，尺寸为（B，H，W，4），类型为 ``torch.uint8`` 。信息 ``idToLabels`` "
"字典将表示从颜色到语义标签的映射。"

#: ../../source/features/tiled_rendering.rst:111
msgid ""
"If ``colorize_semantic_segmentation=False``, a buffer of dimension (B, H, W,"
" 1) of type ``torch.int32`` will be returned, containing the semantic ID of "
"each pixel. The info ``idToLabels`` dictionary will be the mapping from "
"semantic ID to semantic labels."
msgstr ""
"如果 ``colorize_semantic_segmentation=False`` ，则会返回一个尺寸为（B，H，W，1）的类型为 "
"``torch.int32`` 的缓冲区，其中包含每个像素的语义ID。信息 ``idToLabels`` 字典将表示从语义ID到语义标签的映射。"

#: ../../source/features/tiled_rendering.rst:114
msgid "Instance ID Segmentation"
msgstr "实例ID分割"

#: ../../source/features/tiled_rendering.rst:116
msgid ""
"``instance_id_segmentation_fast`` outputs instance ID segmentation of each "
"entity in the camera’s viewport. The instance ID is unique for each prim in "
"the scene with different paths. In addition to the image buffer, an ``info``"
" dictionary can be retrieved with "
"``tiled_camera.data.info['instance_id_segmentation_fast']`` containing ID to"
" labels information."
msgstr ""
"``instance_id_segmentation_fast`` "
"输出相机视口中每个实体的实例ID分割。每个prim在场景中具有不同路径的实例ID是唯一的。除了图像缓冲区外，还可以使用 "
"``tiled_camera.data.info['instance_id_segmentation_fast']`` 检索到包含ID到标签信息的 "
"``info`` 字典。"

#: ../../source/features/tiled_rendering.rst:118
msgid ""
"The main difference between ``instance_id_segmentation_fast`` and "
"``instance_segmentation_fast`` are that instance segmentation annotator goes"
" down the hierarchy to the lowest level prim which has semantic labels, "
"where instance ID segmentation always goes down to the leaf prim."
msgstr ""
"``instance_id_segmentation_fast`` 和 ``instance_segmentation_fast ``之间的主要区别在于实例分割注释器会向下移动到具有语义标签的最低级别prim，而实例ID分割总会向下移动到叶prim。"

#: ../../source/features/tiled_rendering.rst:120
msgid ""
"If ``colorize_instance_id_segmentation=True`` in the camera config, a "
"4-channel RGBA image will be returned with dimension (B, H, W, 4) and type "
"``torch.uint8``. The info ``idToLabels`` dictionary will be the mapping from"
" color to USD prim path of that entity."
msgstr ""
"如果相机配置中 ``colorize_instance_id_segmentation=True`` "
"，则会返回一个4通道RGBA图像，尺寸为（B，H，W，4），类型为 ``torch.uint8`` 。信息 ``idToLabels`` "
"字典将表示从颜色到该实体的USD prim路径的映射。"

#: ../../source/features/tiled_rendering.rst:122
msgid ""
"If ``colorize_instance_id_segmentation=False``, a buffer of dimension (B, H,"
" W, 1) of type ``torch.int32`` will be returned, containing the instance ID "
"of each pixel. The info ``idToLabels`` dictionary will be the mapping from "
"instance ID to USD prim path of that entity."
msgstr ""
"如果 ``colorize_instance_id_segmentation=False`` ，则会返回一个尺寸为（B，H，W，1）的类型为 "
"``torch.int32`` 的缓冲区，其中包含每个像素的实例ID。信息 ``idToLabels`` 字典将表示从实例ID到该实体的USD "
"prim路径的映射。"

#: ../../source/features/tiled_rendering.rst:125
msgid "Instance Segmentation"
msgstr "实例分割"

#: ../../source/features/tiled_rendering.rst:127
msgid ""
"``instance_segmentation_fast`` outputs instance segmentation of each entity "
"in the camera’s viewport. In addition to the image buffer, an ``info`` "
"dictionary can be retrieved with "
"``tiled_camera.data.info['instance_segmentation_fast']`` containing ID to "
"labels and ID to semantic information."
msgstr ""
"``instance_segmentation_fast`` "
"输出相机视口中每个实体的实例分割。与图像缓冲区一起，还可以检索到包含ID到标签和ID到语义信息的 ``info`` 字典。"

#: ../../source/features/tiled_rendering.rst:129
msgid ""
"If ``colorize_instance_segmentation=True`` in the camera config, a 4-channel"
" RGBA image will be returned with dimension (B, H, W, 4) and type "
"``torch.uint8``. The info ``idToLabels`` dictionary will be the mapping from"
" color to USD prim path of that semantic entity. The info ``idToSemantics`` "
"dictionary will be the mapping from color to semantic labels of that "
"semantic entity."
msgstr ""
"如果相机配置中 ``colorize_instance_segmentation=True`` "
"，则会返回一个4通道RGBA图像，尺寸为（B，H，W，4），类型为 ``torch.uint8`` 。信息 ``idToLabels`` "
"字典表示从颜色到该语义实体的USD prim路径的映射。信息 ``idToSemantics`` 字典表示从颜色到该语义实体的语义标签的映射。"

#: ../../source/features/tiled_rendering.rst:131
msgid ""
"If ``colorize_instance_segmentation=False``, a buffer of dimension (B, H, W,"
" 1) of type ``torch.int32`` will be returned, containing the instance ID of "
"each pixel. The info ``idToLabels`` dictionary will be the mapping from "
"instance ID to USD prim path of that semantic entity. The info "
"``idToSemantics`` dictionary will be the mapping from instance ID to "
"semantic labels of that semantic entity."
msgstr ""
"如果 ``colorize_instance_segmentation=False`` ，则会返回一个尺寸为（B，H，W，1）的类型为 "
"``torch.int32`` 的缓冲区，其中包含每个像素的实例ID。信息 ``idToLabels`` 字典表示从实例ID到该语义实体的USD "
"prim路径的映射。信息 ``idToSemantics`` 字典表示从实例ID到该语义实体的语义标签的映射。"
