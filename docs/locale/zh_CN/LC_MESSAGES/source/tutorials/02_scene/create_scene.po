# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/02_scene/create_scene.rst:4
msgid "Using the Interactive Scene"
msgstr "使用交互式场景"

#: ../../source/tutorials/02_scene/create_scene.rst:8
msgid ""
"So far in the tutorials, we manually spawned assets into the simulation and "
"created object instances to interact with them. However, as the complexity "
"of the scene increases, it becomes tedious to perform these tasks manually. "
"In this tutorial, we will introduce the :class:`scene.InteractiveScene` "
"class, which provides a convenient interface for spawning prims and managing"
" them in the simulation."
msgstr ""
"到目前为止，在教程中，我们手动将资产生成到仿真中，并创建对象实例与之交互。然而，随着场景复杂度的增加，手动执行这些任务变得很繁琐。在本教程中，我们将介绍"
" :class:`scene.InteractiveScene` 类，该类提供了一个方便的接口，用于生成prims并在仿真中管理它们。"

#: ../../source/tutorials/02_scene/create_scene.rst:14
msgid ""
"At a high-level, the interactive scene is a collection of scene entities. "
"Each entity can be either a non-interactive prim (e.g. ground plane, light "
"source), an interactive prim (e.g. articulation, rigid object), or a sensor "
"(e.g. camera, lidar). The interactive scene provides a convenient interface "
"for spawning these entities and managing them in the simulation."
msgstr ""
"在高层次上，交互式场景是场景实体的集合。每个实体可以是不可交互的prim（例如地面平面、光源）、可交互的prim（例如关节、刚体物体）或传感器（例如摄像机、激光雷达）。交互式场景提供了一个便捷的接口，用于生成这些实体并在仿真中管理它们。"

#: ../../source/tutorials/02_scene/create_scene.rst:20
msgid "Compared the manual approach, it provides the following benefits:"
msgstr "相比手动方法，它提供以下优点: "

#: ../../source/tutorials/02_scene/create_scene.rst:22
msgid ""
"Alleviates the user needing to spawn each asset separately as this is "
"handled implicitly."
msgstr "减轻了用户需要单独生成每个资产，因为这是隐含处理的。"

#: ../../source/tutorials/02_scene/create_scene.rst:23
msgid ""
"Enables user-friendly cloning of scene prims for multiple environments."
msgstr "可便于用户友好地克隆场景prims以用于多个环境。"

#: ../../source/tutorials/02_scene/create_scene.rst:24
msgid ""
"Collects all the scene entities into a single object, which makes them "
"easier to manage."
msgstr "将所有场景实体收集到一个单一对象中，这样更易于管理。"

#: ../../source/tutorials/02_scene/create_scene.rst:26
msgid ""
"In this tutorial, we take the cartpole example from the :ref:`tutorial-"
"interact-articulation` tutorial and replace the ``design_scene`` function "
"with an :class:`scene.InteractiveScene` object. While it may seem like "
"overkill to use the interactive scene for this simple example, it will "
"become more useful in the future as more assets and sensors are added to the"
" scene."
msgstr ""
"在这个教程中，我们从 :ref:`tutorial-interact-articulation` 教程中的cartpole示例开始，并用 "
":class:`scene.InteractiveScene` 对象替换 ``design_scene`` "
"函数。虽然在这个简单的例子中使用交互式场景可能看起来有点过分，但随着场景中增加更多的资产和传感器，它将在将来变得更有用。"

#: ../../source/tutorials/02_scene/create_scene.rst:33
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/02_scene/create_scene.rst:35
msgid ""
"This tutorial corresponds to the ``create_scene.py`` script within "
"``scripts/tutorials/02_scene``."
msgstr "该教程对应于 ``scripts/tutorials/02_scene`` 中的 ``create_scene.py`` 脚本。"

#: ../../source/tutorials/02_scene/create_scene.rst
msgid "Code for create_scene.py"
msgstr "create_scene.py的代码"

#: ../../source/tutorials/02_scene/create_scene.rst:48
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/02_scene/create_scene.rst:50
msgid ""
"While the code is similar to the previous tutorial, there are a few key "
"differences that we will go over in detail."
msgstr "虽然代码与上一个教程类似，但有一些关键区别我们将详细介绍。"

#: ../../source/tutorials/02_scene/create_scene.rst:54
msgid "Scene configuration"
msgstr "场景配置"

#: ../../source/tutorials/02_scene/create_scene.rst:56
msgid ""
"The scene is composed of a collection of entities, each with their own "
"configuration. These are specified in a configuration class that inherits "
"from :class:`scene.InteractiveSceneCfg`. The configuration class is then "
"passed to the :class:`scene.InteractiveScene` constructor to create the "
"scene."
msgstr ""
"场景由一系列带有自己配置的实体组成。这些都是在继承自 :class:`scene.InteractiveSceneCfg` "
"的配置类中指定的。然后将配置类传递给 :class:`scene.InteractiveScene` 构造函数以创建场景。"

#: ../../source/tutorials/02_scene/create_scene.rst:61
msgid ""
"For the cartpole example, we specify the same scene as in the previous "
"tutorial, but list them now in the configuration class "
":class:`CartpoleSceneCfg` instead of manually spawning them."
msgstr ""
"对于cartpole示例，我们指定与以前教程中相同的场景，但现在将它们列在配置类 :class:`CartpoleSceneCfg` "
"中，而不是手动生成它们。"

#: ../../source/tutorials/02_scene/create_scene.rst:68
msgid ""
"The variable names in the configuration class are used as keys to access the"
" corresponding entity from the :class:`scene.InteractiveScene` object. For "
"example, the cartpole can be accessed via ``scene[\"cartpole\"]``. However, "
"we will get to that later. First, let's look at how individual scene "
"entities are configured."
msgstr ""
"配置类中的变量名称用作用于从 :class:`scene.InteractiveScene` 对象访问对应实体的键。例如，可以通过 "
"``scene[\"cartpole\"]`` 来访问cartpole。然而，我们会稍后再解释这个。首先，让我们看看如何配置单个场景实体。"

#: ../../source/tutorials/02_scene/create_scene.rst:73
msgid ""
"Similar to how a rigid object and articulation were configured in the "
"previous tutorials, the configurations are specified using a configuration "
"class. However, there is a key difference between the configurations for the"
" ground plane and light source and the configuration for the cartpole. The "
"ground plane and light source are non-interactive prims, while the cartpole "
"is an interactive prim. This distinction is reflected in the configuration "
"classes used to specify them. The configurations for the ground plane and "
"light source are specified using an instance of the "
":class:`assets.AssetBaseCfg` class while the cartpole is configured using an"
" instance of the :class:`assets.ArticulationCfg`. Anything that is not an "
"interactive prim (i.e., neither an asset nor a sensor) is not *handled* by "
"the scene during simulation steps."
msgstr ""
"与先前教程中配置刚体物体和关节类似，配置使用配置类来指定。然而，地面平面和光源的配置与cartpole的配置之间存在一个关键区别。地面平面和光源是不可交互的，而cartpole是可交互的。这种区别在用于指定它们的配置类中得到了体现。地面平面和光源的配置使用"
" :class:`assets.AssetBaseCfg` 的实例来指定，而cartpole使用 "
":class:`assets.ArticulationCfg` "
"的实例来进行配置。在仿真步骤期间，不处理任何不是交互式prim（即既不是资产也不是传感器）。"

#: ../../source/tutorials/02_scene/create_scene.rst:84
msgid ""
"Another key difference to note is in the specification of the prim paths for"
" the different prims:"
msgstr "另一个需要注意的关键区别是不同prim的prim路径的指定方法: "

#: ../../source/tutorials/02_scene/create_scene.rst:87
msgid "Ground plane: ``/World/defaultGroundPlane``"
msgstr "地面平面:``/World/defaultGroundPlane``"

#: ../../source/tutorials/02_scene/create_scene.rst:88
msgid "Light source: ``/World/Light``"
msgstr "光源:``/World/Light``"

#: ../../source/tutorials/02_scene/create_scene.rst:89
msgid "Cartpole: ``{ENV_REGEX_NS}/Robot``"
msgstr "Cartpole:``{ENV_REGEX_NS}/Robot``"

#: ../../source/tutorials/02_scene/create_scene.rst:91
msgid ""
"As we learned earlier, Omniverse creates a graph of prims in the USD stage. "
"The prim paths are used to specify the location of the prim in the graph. "
"The ground plane and light source are specified using absolute paths, while "
"the cartpole is specified using a relative path. The relative path is "
"specified using the ``ENV_REGEX_NS`` variable, which is a special variable "
"that is replaced with the environment name during scene creation. Any entity"
" that has the ``ENV_REGEX_NS`` variable in its prim path will be  cloned for"
" each environment. This path is replaced by the scene object with "
"``/World/envs/env_{i}`` where ``i`` is the environment index."
msgstr ""
"如前所述，Omniverse在USD场景创建了prims的图形。prim路径用于指定图中prim的位置。地面平面和光源使用绝对路径来指定，而cartpole使用相对路径来指定。相对路径使用"
" ``ENV_REGEX_NS`` 变量来进行指定，这是一个特殊的变量，在场景创建期间会被环境名称替换。任何带有 ``ENV_REGEX_NS`` "
"变量的实体的prim路径在每个环境中都会被克隆。这个路径会被场景对象替换为 ``/World/envs/env_{i}`` ，其中 ``i`` "
"是环境索引。"

#: ../../source/tutorials/02_scene/create_scene.rst:101
msgid "Scene instantiation"
msgstr "场景实例化"

#: ../../source/tutorials/02_scene/create_scene.rst:103
msgid ""
"Unlike before where we called the ``design_scene`` function to create the "
"scene, we now create an instance of the :class:`scene.InteractiveScene` "
"class and pass in the configuration object to its constructor. While "
"creating the configuration instance of ``CartpoleSceneCfg`` we specify how "
"many environment copies we want to create using the ``num_envs`` argument. "
"This will be used to clone the scene for each environment."
msgstr ""
"与以前调用 ``design_scene`` 函数来创建场景不同，现在我们创建一个 :class:`scene.InteractiveScene` "
"类的实例，并将配置对象传递给它的构造函数。在创建 ``CartpoleSceneCfg`` 配置实例时，我们使用 ``num_envs`` "
"参数指定要创建多少个环境的副本。这将用于为每个环境克隆场景。"

#: ../../source/tutorials/02_scene/create_scene.rst:115
msgid "Accessing scene elements"
msgstr "访问场景元素"

#: ../../source/tutorials/02_scene/create_scene.rst:117
msgid ""
"Similar to how entities were accessed from a dictionary in the previous "
"tutorials, the scene elements can be accessed from the "
":class:`InteractiveScene` object using the ``[]`` operator. The operator "
"takes in a string key and returns the corresponding entity. The key is "
"specified through the configuration class for each entity. For example, the "
"cartpole is specified using the key ``\"cartpole\"`` in the configuration "
"class."
msgstr ""
"与以前教程中的方法类似，可以使用 :class:`InteractiveScene` 对象从字典中获取场景元素，通过使用 ``[]`` "
"操作符。操作符接受一个字符串键，并返回相应的实体。键是通过每个实体的配置类指定的。例如，cartpole在配置类中使用键 "
"``\"cartpole\"`` 来指定。"

#: ../../source/tutorials/02_scene/create_scene.rst:129
msgid "Running the simulation loop"
msgstr "运行仿真循环"

#: ../../source/tutorials/02_scene/create_scene.rst:131
msgid ""
"The rest of the script looks similar to previous scripts that interfaced "
"with :class:`assets.Articulation`, with a few small differences in the "
"methods called:"
msgstr "脚本的其余部分看起来与先前与 :class:`assets.Articulation` 接口的脚本类似，只是调用的方法有一些小的不同: "

#: ../../source/tutorials/02_scene/create_scene.rst:134
msgid ""
":meth:`assets.Articulation.reset` ⟶ :meth:`scene.InteractiveScene.reset`"
msgstr ""
":meth:`assets.Articulation.reset` ⟶ :meth:`scene.InteractiveScene.reset`"

#: ../../source/tutorials/02_scene/create_scene.rst:135
msgid ""
":meth:`assets.Articulation.write_data_to_sim` ⟶ "
":meth:`scene.InteractiveScene.write_data_to_sim`"
msgstr ""
":meth:`assets.Articulation.write_data_to_sim` ⟶ "
":meth:`scene.InteractiveScene.write_data_to_sim`"

#: ../../source/tutorials/02_scene/create_scene.rst:136
msgid ""
":meth:`assets.Articulation.update` ⟶ :meth:`scene.InteractiveScene.update`"
msgstr ""
":meth:`assets.Articulation.update` ⟶ :meth:`scene.InteractiveScene.update`"

#: ../../source/tutorials/02_scene/create_scene.rst:138
msgid ""
"Under the hood, the methods of :class:`scene.InteractiveScene` call the "
"corresponding methods of the entities in the scene."
msgstr "在幕后， :class:`scene.InteractiveScene` 的方法调用了场景中实体的相应方法。"

#: ../../source/tutorials/02_scene/create_scene.rst:143
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/02_scene/create_scene.rst:147
msgid ""
"Let's run the script to simulate 32 cartpoles in the scene. We can do this "
"by passing the ``--num_envs`` argument to the script."
msgstr "让我们运行脚本以仿真场景中的32个cartpoles。我们可以通过向脚本传递 ``--num_envs`` 参数来实现这一点。"

#: ../../source/tutorials/02_scene/create_scene.rst:154
msgid ""
"This should open a stage with 32 cartpoles swinging around randomly. You can"
" use the mouse to rotate the camera and the arrow keys to move around the "
"scene."
msgstr "这应该会打开一个场景，上面有32个随机摆动的cartpole。您可以使用鼠标旋转摄像机，使用箭头键在场景中移动。"

#: ../../source/tutorials/02_scene/create_scene.rst:-1
msgid "result of create_scene.py"
msgstr "create_scene.py 的结果"

#: ../../source/tutorials/02_scene/create_scene.rst:163
msgid ""
"In this tutorial, we saw how to use :class:`scene.InteractiveScene` to "
"create a scene with multiple assets. We also saw how to use the ``num_envs``"
" argument to clone the scene for multiple environments."
msgstr ""
"在本教程中，我们学习了如何使用 :class:`scene.InteractiveScene` 创建一个带有多个资产的场景。我们还学习了如何使用 "
"``num_envs`` 参数来为多个环境克隆场景。"

#: ../../source/tutorials/02_scene/create_scene.rst:167
msgid ""
"There are many more example usages of the :class:`scene.InteractiveSceneCfg`"
" in the tasks found under the ``isaaclab_tasks`` extension. Please check out"
" the source code to see how they are used for more complex scenes."
msgstr ""
"在 ``isaaclab_tasks`` 扩展中， :class:`scene.InteractiveSceneCfg` "
"还有许多其他示例用法。请查看源代码，了解它们在更复杂的场景中的使用方式。"
