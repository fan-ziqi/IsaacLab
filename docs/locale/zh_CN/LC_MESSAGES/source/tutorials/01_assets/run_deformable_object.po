# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-21 15:29+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:5
msgid "Interacting with a deformable object"
msgstr "与可变形对象交互"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:9
msgid ""
"While deformable objects sometimes refer to a broader class of objects, such"
" as cloths, fluids and soft bodies, in PhysX, deformable objects "
"syntactically correspond to soft bodies. Unlike rigid objects, soft bodies "
"can deform under external forces and collisions."
msgstr ""
"虽然可变形物体有时指的是一个更广泛的物体类别，如衣物、流体和软体，但在 `PhysX` "
"中，可变形物体在语法上对应于软体。与刚体不同，软体在外部力量和碰撞下可以变形。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:13
msgid ""
"Soft bodies are simulated using Finite Element Method (FEM) in PhysX. The "
"soft body comprises of two tetrahedral meshes -- a simulation mesh and a "
"collision mesh. The simulation mesh is used to simulate the deformations of "
"the soft body, while the collision mesh is used to detect collisions with "
"other objects in the scene. For more details, please check the `PhysX "
"documentation`_."
msgstr ""
"软体通过 Finite Element Method (FEM) 在 PhysX 中进行模拟。软体由两个四面体网格组成 -- "
"一个模拟网格和一个碰撞网格。模拟网格用于模拟软体的变形，而碰撞网格用于检测与场景中其他物体的碰撞。有关更多细节，请查看 `PhysX "
"documentation`_ 。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:18
msgid ""
"This tutorial shows how to interact with a deformable object in the "
"simulation. We will spawn a set of soft cubes and see how to set their nodal"
" positions and velocities, along with apply kinematic commands to the mesh "
"nodes to move the soft body."
msgstr ""
"本教程展示了如何在模拟中与可变形对象进行交互。我们将生成一组软体立方体，并了解如何设置它们的节点位置和速度，以及如何对网格节点应用运动学命令以移动软体。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:24
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:26
msgid ""
"The tutorial corresponds to the ``run_deformable_object.py`` script in the "
"``source/standalone/tutorials/01_assets`` directory."
msgstr ""
"该教程对应于 ``run_deformable_object.py`` 脚本，在 "
"``source/standalone/tutorials/01_assets`` 目录中。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst
msgid "Code for run_deformable_object.py"
msgstr "`run_deformable_object.py` 的代码"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:38
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:41
msgid "Designing the scene"
msgstr "设计场景"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:43
msgid ""
"Similar to the :ref:`tutorial-interact-rigid-object` tutorial, we populate "
"the scene with a ground plane and a light source. In addition, we add a "
"deformable object to the scene using the :class:`assets.DeformableObject` "
"class. This class is responsible for spawning the prims at the input path "
"and initializes their corresponding deformable body physics handles."
msgstr ""
"类似于 :ref:`tutorial-interact-rigid-object` 教程，我们用一个地面平面和一个光源填充场景。此外，我们使用 "
":class:`assets.DeformableObject` "
"类向场景中添加一个可变形对象。该类负责在输入路径处生成原始物体，并初始化它们相应的可变形物体物理句柄。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:48
msgid ""
"In this tutorial, we create a cubical soft object using the spawn "
"configuration similar to the deformable cube in the :ref:`Spawn Objects "
"<tutorial-spawn-prims>` tutorial. The only difference is that now we wrap "
"the spawning configuration into the :class:`assets.DeformableObjectCfg` "
"class. This class contains information about the asset's spawning strategy "
"and default initial state. When this class is passed to the "
":class:`assets.DeformableObject` class, it spawns the object and initializes"
" the corresponding physics handles when the simulation is played."
msgstr ""
"在本教程中，我们使用与 :ref:`Spawn Objects <tutorial-spawn-prims>` 教程中的可变立方体类似的 spawn "
"配置来创建一个立方体软体对象。唯一的区别是我们现在将 spawn 配置包装到 :class:`assets.DeformableObjectCfg` "
"类中。这个类包含有关资产的 spawn 策略和默认初始状态的信息。当这个类传递给 :class:`assets.DeformableObject` "
"类时，它会在模拟播放时生成对象并初始化相应的物理句柄。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:56
msgid ""
"The deformable object is only supported in GPU simulation and requires a "
"mesh object to be spawned with the deformable body physics properties on it."
msgstr "可变形对象仅在 GPU 模拟中受支持，并且需要一个网格对象来生成，且该网格对象上必须具有可变形体物理属性。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:60
msgid ""
"As seen in the rigid body tutorial, we can spawn the deformable object into "
"the scene in a similar fashion by creating an instance of the "
":class:`assets.DeformableObject` class by passing the configuration object "
"to its constructor."
msgstr ""
"如在刚体教程中所见，我们可以通过创建 :class:`assets.DeformableObject` "
"类的实例，并将配置对象传递给其构造函数，以类似的方式将可变形对象生成到场景中。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:69
msgid "Running the simulation loop"
msgstr "运行模拟循环"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:71
msgid ""
"Continuing from the rigid body tutorial, we reset the simulation at regular "
"intervals, apply kinematic commands to the deformable body, step the "
"simulation, and update the deformable object's internal buffers."
msgstr "继续刚体教程，我们在定期间隔内重置模拟，对可变形物体应用运动学命令，推进模拟，并更新可变形对象的内部缓冲区。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:75
msgid "Resetting the simulation state"
msgstr "重置模拟状态"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:77
msgid ""
"Unlike rigid bodies and articulations, deformable objects have a different "
"state representation. The state of a deformable object is defined by the "
"nodal positions and velocities of the mesh. The nodal positions and "
"velocities are defined in the **simulation world frame** and are stored in "
"the :attr:`assets.DeformableObject.data` attribute."
msgstr ""
"与刚体和关节不同，可变形物体具有不同的状态表示。可变形物体的状态由网格的节点位置和速度定义。节点位置和速度定义在 **simulation world "
"frame** 中，并存储在 :attr:`assets.DeformableObject.data` 属性中。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:81
msgid ""
"We use the :attr:`assets.DeformableObject.data.default_nodal_state_w` "
"attribute to get the default nodal state of the spawned object prims. This "
"default state can be configured from the "
":attr:`assets.DeformableObjectCfg.init_state` attribute, which we left as "
"identity in this tutorial."
msgstr ""
"我们使用 :attr:`assets.DeformableObject.data.default_nodal_state_w` 属性来获取生成的对象 "
"prims 的默认节点状态。这个默认状态可以通过 :attr:`assets.DeformableObjectCfg.init_state` "
"属性进行配置，在本教程中我们将其保持为身份。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:86
msgid ""
"The initial state in the configuration :attr:`assets.DeformableObjectCfg` "
"specifies the pose of the deformable object at the time of spawning. Based "
"on this initial state, the default nodal state is obtained when the "
"simulation is played for the first time."
msgstr ""
"配置中的初始状态 :attr:`assets.DeformableObjectCfg` "
"指定了在生成时变形对象的姿态。根据这个初始状态，当模拟第一次播放时，会得到默认的节点状态。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:90
msgid ""
"We apply transformations to the nodal positions to randomize the initial "
"state of the deformable object."
msgstr "我们对节点位置应用变换，以随机化可变形物体的初始状态。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:97
msgid ""
"To reset the deformable object, we first set the nodal state by calling the "
":meth:`assets.DeformableObject.write_nodal_state_to_sim` method. This method"
" writes the nodal state of the deformable object prim into the simulation "
"buffer. Additionally, we free all the kinematic targets set for the nodes in"
" the previous simulation step by calling the "
":meth:`assets.DeformableObject.write_nodal_kinematic_target_to_sim` method. "
"We explain the kinematic targets in the next section."
msgstr ""
"要重置可变形对象，我们首先通过调用 :meth:`assets.DeformableObject.write_nodal_state_to_sim` "
"方法来设置节点状态。此方法将可变形对象原始的节点状态写入仿真缓冲区。此外，我们通过调用 "
":meth:`assets.DeformableObject.write_nodal_kinematic_target_to_sim` "
"方法来释放在上一个仿真步骤中为节点设置的所有运动学目标。我们将在下一节中解释运动学目标。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:103
msgid ""
"Finally, we call the :meth:`assets.DeformableObject.reset` method to reset "
"any internal buffers and caches."
msgstr "最后，我们调用 :meth:`assets.DeformableObject.reset` 方法来重置任何内部缓冲区和缓存。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:111
msgid "Stepping the simulation"
msgstr "逐步模拟"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:113
msgid ""
"Deformable bodies support user-driven kinematic control where a user can "
"specify position targets for some of the mesh nodes while the rest of the "
"nodes are simulated using the FEM solver. This `partial kinematic`_ control "
"is useful for applications where the user wants to interact with the "
"deformable object in a controlled manner."
msgstr ""
"可变形体支持用户驱动的运动学控制，其中用户可以为一些网格节点指定位置目标，而其余节点则通过 FEM 求解器进行模拟。这种 `partial "
"kinematic`_ 控制对于用户希望以受控方式与可变形对象交互的应用程序非常有用。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:117
msgid ""
"In this tutorial, we apply kinematic commands to two out of the four cubes "
"in the scene. We set the position targets for the node at index 0 (bottom-"
"left corner) to move the cube along the z-axis."
msgstr "在本教程中，我们将运动学命令应用于场景中的四个立方体中的两个。我们设置索引为 0（左下角）的节点的位置目标，使立方体沿 z 轴移动。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:120
msgid ""
"At every step, we increment the kinematic position target for the node by a "
"small value. Additionally, we set the flag to indicate that the target is a "
"kinematic target for that node in the simulation buffer. These are set into "
"the simulation buffer by calling the "
":meth:`assets.DeformableObject.write_nodal_kinematic_target_to_sim` method."
msgstr ""
"在每一步中，我们通过一个小值来增加节点的运动学位置目标。此外，我们设置标志以指示该目标是仿真缓冲区中该节点的运动学目标。这些设置通过调用 "
":meth:`assets.DeformableObject.write_nodal_kinematic_target_to_sim` "
"方法来写入仿真缓冲区。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:130
msgid ""
"Similar to the rigid object and articulation, we perform the "
":meth:`assets.DeformableObject.write_data_to_sim` method before stepping the"
" simulation. For deformable objects, this method does not apply any external"
" forces to the object. However, we keep this method for completeness and "
"future extensions."
msgstr ""
"类似于刚体和关节，我们在进行仿真步进之前执行 :meth:`assets.DeformableObject.write_data_to_sim` "
"方法。对于可变形对象，此方法不会对对象施加任何外部力。然而，我们保留此方法以便于完整性和未来扩展。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:140
msgid "Updating the state"
msgstr "更新状态"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:142
msgid ""
"After stepping the simulation, we update the internal buffers of the "
"deformable object prims to reflect their new state inside the "
":class:`assets.DeformableObject.data` attribute. This is done using the "
":meth:`assets.DeformableObject.update` method."
msgstr ""
"在运行模拟后，我们更新可变对象 prims 的内部缓冲区，以反映它们在 :class:`assets.DeformableObject.data` "
"属性中的新状态。这是通过 :meth:`assets.DeformableObject.update` 方法完成的。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:145
msgid ""
"At a fixed interval, we print the root position of the deformable object to "
"the terminal. As mentioned earlier, there is no concept of a root state for "
"deformable objects. However, we compute the root position as the average "
"position of all the nodes in the mesh."
msgstr ""
"在固定的间隔下，我们将可变形物体的根位置打印到终端。如前所述，对于可变形物体来说，没有根状态的概念。然而，我们计算根位置的方法是所有网格节点的平均位置。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:156
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:158
msgid ""
"Now that we have gone through the code, let's run the script and see the "
"result:"
msgstr "现在我们已经浏览了代码，接下来运行脚本并查看结果: "

#: ../../source/tutorials/01_assets/run_deformable_object.rst:165
msgid ""
"This should open a stage with a ground plane, lights, and several green "
"cubes. Two of the four cubes must be dropping from a height and settling on "
"to the ground. Meanwhile the other two cubes must be moving along the "
"z-axis. You should see a marker showing the kinematic target position for "
"the nodes at the bottom-left corner of the cubes. To stop the simulation, "
"you can either close the window, or press ``Ctrl+C`` in the terminal"
msgstr ""
"这应该会打开一个包含地面、灯光和几个绿色立方体的场景。其中两个立方体必须从高度上落下并落在地面上。同时，另外两个立方体必须沿 `z` "
"轴移动。你应该会看到一个标记，显示位于立方体左下角的节点的运动学目标位置。要停止仿真，你可以关闭窗口，或在终端中按 ``Ctrl+C`` 。"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:-1
msgid "result of run_deformable_object.py"
msgstr "run_deformable_object.py 的结果"

#: ../../source/tutorials/01_assets/run_deformable_object.rst:175
msgid ""
"This tutorial showed how to spawn deformable objects and wrap them in a "
":class:`DeformableObject` class to initialize their physics handles which "
"allows setting and obtaining their state. We also saw how to apply kinematic"
" commands to the deformable object to move the mesh nodes in a controlled "
"manner. In the next tutorial, we will see how to create a scene using the "
":class:`InteractiveScene` class."
msgstr ""
"本教程展示了如何生成可变形物体并将它们包裹在一个 :class:`DeformableObject` "
"类中，以初始化它们的物理处理器，从而允许设置和获取它们的状态。我们还看到了如何对可变形物体应用运动指令，以控制方式移动网格节点。在接下来的教程中，我们将看到如何使用"
" :class:`InteractiveScene` 类创建场景。"
