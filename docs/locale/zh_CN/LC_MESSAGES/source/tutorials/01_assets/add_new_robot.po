# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-26 11:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/tutorials/01_assets/add_new_robot.rst:4
msgid "Adding a New Robot to Isaac Lab"
msgstr "将新机器人添加到 Isaac Lab"

#: ../../source/tutorials/01_assets/add_new_robot.rst:8
msgid ""
"Simulating and training a new robot is a multi-step process that starts with"
" importing the robot into Isaac Sim. This is covered in depth in the Isaac "
"Sim documentation `here "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/robot_setup/importers_exporters.html>`_."
" Once the robot is imported and tuned for simulation, we must define those "
"interfaces necessary to clone the robot across multiple environments, drive "
"its joints, and properly reset it, regardless of the chosen workflow or "
"training framework."
msgstr ""
"模拟和训练新机器人是一个多步骤的过程，从将机器人导入 Isaac Sim 开始。这在 Isaac Sim 文档 `这里 "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/robot_setup/importers_exporters.html>`_"
" "
"中有详细介绍。一旦机器人被导入并调整进行仿真，我们必须定义那些必要的接口，以便在多个环境中克隆机器人，驱动其关节，并正确地重置它，无论选择了哪种工作流程或训练框架。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:13
msgid ""
"In this tutorial, we will examine how to add a new robot to Isaac Lab. The "
"key step is creating an ``AssetBaseCfg`` that defines the interface between "
"the USD articulation of the robot and the learning algorithms available "
"through Isaac Lab."
msgstr ""
"在本教程中，我们将探讨如何将新机器人添加到 Isaac Lab。关键步骤是创建一个 ``AssetBaseCfg`` ，它定义了机器人的 USD "
"关节和通过 Isaac Lab 可用的学习算法之间的接口。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:17
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/01_assets/add_new_robot.rst:19
msgid ""
"The tutorial corresponds to the ``add_new_robot`` script in the "
"``scripts/tutorials/01_assets`` directory."
msgstr "本教程对应于 ``scripts/tutorials/01_assets`` 目录中的 ``add_new_robot`` 脚本。"

#: ../../source/tutorials/01_assets/add_new_robot.rst
msgid "Code for add_new_robot.py"
msgstr "add_new_robot.py 的代码"

#: ../../source/tutorials/01_assets/add_new_robot.rst:29
msgid "The Code Explained"
msgstr "解释代码"

#: ../../source/tutorials/01_assets/add_new_robot.rst:31
msgid ""
"Fundamentally, a robot is an articulation with joint drives.  To move a "
"robot around in the simulation, we must apply targets to its drives and step"
" the sim forward in time. However, to control a robot strictly through joint"
" drives is tedious, especially if you want to control anything complex, and "
"doubly so if you want to clone the robot across multiple environments."
msgstr ""
"从根本上说，机器人是一个具有关节驱动的关节。要在仿真中移动一个机器人，我们必须对其驱动应用目标，并使仿真向前推进。然而，严格通过关节驱动来控制机器人是很繁琐的，特别是如果您想控制任何复杂的东西，而且如果您想在多个环境中克隆机器人，就更加繁琐了。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:35
msgid ""
"To facilitate this, Isaac Lab provides a collection of ``configuration`` "
"classes that define which parts of the USD need to be cloned, which parts "
"are actuators to be controlled by an agent, how it should be reset, etc... "
"There are many ways you can configure a single robot asset for Isaac Lab "
"depending on how much fine tuning the asset requires. To demonstrate, the "
"tutorial script imports two robots: The first robot, the ``Jetbot``, is "
"configured minimally while the second robot, the ``Dofbot``, is configured "
"with additional parameters."
msgstr ""
"为了简化这个过程，Isaac Lab 提供了一系列 ``配置`` 类，定义了需要被克隆的 USD "
"的哪些部分，哪些部分是需要被智能体控制的执行器，如何进行重置等等... 根据资产需要进行多少精细调整，您可以通过许多方式配置单个机器人资产以用于 "
"Isaac Lab。为了演示，教程脚本导入了两个机器人: 第一个机器人，Jetbot，配置最小，而第二个机器人，Dofbot，附加参数进行了配置。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:40
msgid ""
"The Jetbot is a simple, two wheeled differential base with a camera on top. "
"The asset is used for a number of demonstrations and tutorials in Isaac Sim,"
" so we know it's good to go! To bring it into Isaac lab, we must first "
"define one of these configurations. Because a robot is an articulation with "
"joint drives, we define an ``ArticulationCfg`` that describes the robot."
msgstr ""
"Jetbot 是一个简单的双轮差动底座，顶部带有摄像头。该资产用于 Isaac Sim 中的许多演示和教程，因此我们知道它非常适合！要将其带入 "
"Isaac lab，我们必须首先定义其中一个这些配置。因为一个机器人是一个具有关节驱动的关节，我们定义了一个 ``ArticulationCfg`` "
"来描述机器人。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:48
msgid ""
"This is the minimal configuration for a robot in Isaac Lab. There are only "
"two required parameters: ``spawn`` and ``actuators``."
msgstr "这是在 Isaac Lab 中机器人的最小配置。只有两个必需参数:  ``spawn`` 和 ``actuators`` 。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:50
msgid ""
"The ``spawn`` parameter is looking for a ``SpawnerCfg``, and is used to "
"specify the USD asset that defines the robot in the sim. The Isaac Lab "
"simulation utilities, ``isaaclab.sim``, provides us with a ``USDFileCfg`` "
"class that consumes a path to our USD asset, and generates the "
"``SpawnerCfg`` we need. In this case, the ``jetbot.usd`` is located with the"
" `Isaac Assets "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/assets/usd_assets_overview.html>`_"
" under ``Robots/Jetbot/jetbot.usd``."
msgstr ""
"``spawn`` 参数正在寻找一个 ``SpawnerCfg`` ，用于指定在仿真中定义机器人的 USD 资产。Isaac Lab 仿真实用程序， "
"``isaaclab.sim`` ，为我们提供了一个 ``USDFileCfg`` 类，它接受我们的 USD 资产路径，并生成我们需要的 "
"``SpawnerCfg`` 。在这种情况下， ``jetbot.usd`` 位于 `Isaac Assets "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/assets/usd_assets_overview.html>`_"
" 下的 ``Robots/Jetbot/jetbot.usd`` 。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:55
msgid ""
"The ``actuators`` parameter is a dictionary of Actuator Configs and defines "
"what parts of the robot we intend to control with an agent. There are many "
"different ways to update the state of a joint in time towards some target.  "
"Isaac Lab provides a collection of actuator classes that can be used to "
"match  common actuator models or even implement your own! In this case, we "
"are using the ``ImplicitActuatorCfg`` class to specify the actuators for the"
" robot, because they are simple wheels and the defaults are fine."
msgstr ""
"``actuators`` "
"参数是一个执行器配置的字典，并定义我们打算用智能体控制的机器人的哪些部分。有许多不同的方式可以更新关节的状态以达到某个目标。Isaac Lab "
"提供了一系列可以用于匹配常见执行器模型或甚至实现自己的执行器类。在这种情况下，我们使用 ``ImplicitActuatorCfg`` "
"类来指定机器人的执行器，因为它们是简单的轮子并且默认值是合适的。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:60
msgid ""
"Specifying joint name keys for this dictionary can be done to varying levels"
" of specificity. The jetbot only has a few joints, and we are just going to "
"use the defaults specified in the USD asset, so we can use a simple regex, "
"``.*`` to specify all joints. Other regex can also be used to group joints "
"and associated configurations."
msgstr ""
"为这个字典指定关节名键可以具有不同的特定级别。jetbot 只有几个关节，我们将只使用在 USD 资产中指定的默认值，因此我们可以使用简单的正则表达式，"
" ``.*`` 来指定所有关节。其他正则表达式也可以用于分组关节和相关配置。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:66
msgid ""
"Both stiffness and damping must be specified in the implicit actuator, but a"
" value of ``None`` will use the defaults defined in the USD asset."
msgstr "在隐式执行器中必须指定刚度和阻尼，但 ``None`` 值将使用在 USD 资产中定义的默认值。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:68
msgid ""
"While this is the minimal configuration, there are a number of other "
"parameters we could specify"
msgstr "虽然这是最小配置，但我们可以指定许多其他参数"

#: ../../source/tutorials/01_assets/add_new_robot.rst:74
msgid ""
"This configuration can be used to add a Dofbot to the scene, and it contains"
" some of those parameters. The Dofbot is a hobbiest robot arm with several "
"joints, and so we have more options available for configuration. The two "
"most notable differences though is the addition of configurations for "
"physics properties, and the initial state of the robot, ``init_state``."
msgstr ""
"该配置可用于向场景中添加一个 Dofbot，并包含其中一些参数。Dofbot "
"是一个带有多个关节的业余机械臂机器人，因此我们有更多可用于配置的选项。最显著的两个区别是为物理属性添加配置和机器人的初始状态 "
"``init_state`` 。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:78
msgid ""
"The ``USDFileCfg`` has special parameters for rigid bodies and robots, among"
" others. The ``rigid_props`` parameter expects a ``RigidBodyPropertiesCfg`` "
"that allows you to specify body link properties of the robot being spawned "
"relating to its behavior as a \"physical object\" in the simulation. The "
"``articulation_props`` meanwhile governs the properties relating to the "
"solver being used to step the joints through time, and so it expects an "
"``ArticulationRootPropertiesCfg`` to be configured. There are many other "
"physics properties and parameters that can be specified through "
"configurations provided by :class:`isaaclab.sim.schemas`."
msgstr ""
"``USDFileCfg`` 对刚性体和机器人等具有特殊参数。 ``rigid_props`` 参数需要一个 "
"``RigidBodyPropertiesCfg`` ，允许您指定机器人被生成时关于其行为作为仿真中 \"物理对象\" 的身体链接属性。而 "
"``articulation_props`` 管理与用于通过时间的求解器推进关节相关的属性，因此它期望配置一个 "
"``ArticulationRootPropertiesCfg`` 。提供的其他物理属性和参数可以通过 "
":class:`isaaclab.sim.schemas` 提供的配置指定。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:84
msgid ""
"The ``ArticulationCfg`` can optionally include the ``init_state`` parameter,"
" that defines the initial state of the articulation. The initial state of an"
" articulation is a special, user defined state that is used when the robot "
"is spawned or reset by Isaac Lab. The initial joint state, ``joint_pos``, is"
" specified by a dictionary of floats with the USD joint names as keys "
"(**not** the actuator names). Something else worth noting here is the "
"coordinate system of the initial position, ``pos``, which is that of the "
"environment. In this case, by specifying a position of ``(0.25, -0.25, "
"0.0)`` we are offsetting the spawn position of the robot **from the origin "
"of the environment**, and not the world."
msgstr ""
"``ArticulationCfg`` 可选地包括 ``init_state`` "
"参数，它定义了关节的初始状态。关节的初始状态是一个特殊的，用户定义的状态，当机器人由 Isaac Lab 生成或重置时使用。初始关节状态 "
"``joint_pos`` 由 USD 关节名称作为键指定的浮点数字典来指定( **不是** 执行器名称)。这里值得注意的另一点是初始位置 "
"``pos`` 的坐标系，即环境的坐标系。在这种情况下，通过指定一个位置 ``(0.25, -0.25, 0.0)`` ，我们偏移了机器人的生成位置 "
"**从环境的原点** ，而不是世界的原点。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:90
msgid ""
"Armed with the configurations for these robots, we can now add them to the "
"scene and interact with them in the usual way for the direct workflow: by "
"defining an ``InteractiveSceneCfg`` containing the articulation configs for "
"the robots ..."
msgstr ""
"通过这些机器人的配置，我们现在可以将它们添加到场景中，并以直接工作流程的常规方式与它们进行交互: 通过定义一个包含机器人的关节配置的 "
"``InteractiveSceneCfg`` ..."

#: ../../source/tutorials/01_assets/add_new_robot.rst:99
msgid ""
"...and then stepping the simulation while updating the scene entities "
"appropriately."
msgstr "...然后推进仿真同时适当地更新场景实体。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:108
msgid ""
"You may see a warning that not all actuators are configured! This is "
"expected because we don't handle the gripper for this tutorial."
msgstr "您可能会看到一个警告，表示未配置所有执行器！这是预期的，因为我们在本教程中未处理夹爪。"

#: ../../source/tutorials/01_assets/add_new_robot.rst:-1
msgid "The new robots say hi!"
msgstr "新机器人向您问好！"
