# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-05 17:45+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/01_assets/run_articulation.rst:4
msgid "Interacting with an articulation"
msgstr "与关节交互"

#: ../../source/tutorials/01_assets/run_articulation.rst:9
msgid ""
"This tutorial shows how to interact with an articulated robot in the "
"simulation. It is a continuation of the :ref:`tutorial-interact-rigid-"
"object` tutorial, where we learned how to interact with a rigid object. "
"On top of setting the root state, we will see how to set the joint state "
"and apply commands to the articulated robot."
msgstr ""
"本教程展示了如何与模拟中的关节机器人进行交互。这是 :ref:`tutorial-interact-rigid-object` "
"教程的延续，其中我们学习了如何与刚体对象交互。除了设置根状态外，我们还将看到如何设置关节状态并向关节机器人应用命令。"

#: ../../source/tutorials/01_assets/run_articulation.rst:16
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/01_assets/run_articulation.rst:18
msgid ""
"The tutorial corresponds to the ``run_articulation.py`` script in the "
"``source/standalone/tutorials/01_assets`` directory."
msgstr ""
"该教程对应于 ``source/standalone/tutorials/01_assets`` 目录中的 "
"``run_articulation.py`` 脚本。"

#: ../../source/tutorials/01_assets/run_articulation.rst
msgid "Code for run_articulation.py"
msgstr "代码 `run_articulation.py` 的内容"

#: ../../source/tutorials/01_assets/run_articulation.rst:31
msgid "The Code Explained"
msgstr "代码解析"

#: ../../source/tutorials/01_assets/run_articulation.rst:34
msgid "Designing the scene"
msgstr "场景设计"

#: ../../source/tutorials/01_assets/run_articulation.rst:36
msgid ""
"Similar to the previous tutorial, we populate the scene with a ground "
"plane and a distant light. Instead of spawning rigid objects, we now "
"spawn a cart-pole articulation from its USD file. The cart-pole is a "
"simple robot consisting of a cart and a pole attached to it. The cart is "
"free to move along the x-axis, and the pole is free to rotate about the "
"cart. The USD file for the cart-pole contains the robot's geometry, "
"joints, and other physical properties."
msgstr ""
"与上一个教程相似，我们在场景中添加了地面平面和远程光线。现在，我们不再产生刚性物体，而是从其 USD "
"文件中生成一个车杆关节。车杆是一个简单的机器人，由一个小车和一个连接到它的杆组成。小车可以沿 x 轴自由移动，而杆可以围绕小车自由旋转。车杆的 "
"USD 文件包含了机器人的几何形状、关节和其他物理性质。"

#: ../../source/tutorials/01_assets/run_articulation.rst:42
msgid ""
"For the cart-pole, we use its pre-defined configuration object, which is "
"an instance of the :class:`assets.ArticulationCfg` class. This class "
"contains information about the articulation's spawning strategy, default "
"initial state, actuator models for different joints, and other meta-"
"information. A deeper-dive into how to create this configuration object "
"is provided in the :ref:`how-to-write-articulation-config` tutorial."
msgstr ""
"对于车杆，我们使用其预定义的配置对象，这是 :class:`assets.ArticulationCfg` "
"类的一个实例。这个类包含关于关节产生策略、默认初始状态、不同关节的执行器模型和其他元信息的信息。如何创建这个配置对象的更深入介绍在 :ref"
":`how-to-write-articulation-config` 教程中提供。"

#: ../../source/tutorials/01_assets/run_articulation.rst:47
msgid ""
"As seen in the previous tutorial, we can spawn the articulation into the "
"scene in a similar fashion by creating an instance of the "
":class:`assets.Articulation` class by passing the configuration object to"
" its constructor."
msgstr ""
"正如在上一个教程中看到的，我们可以通过创建 :class:`assets.Articulation` "
"类的实例并将配置对象传递给它的构造函数的方式类似地将关节放入场景中。"

#: ../../source/tutorials/01_assets/run_articulation.rst:57
msgid "Running the simulation loop"
msgstr "运行模拟循环"

#: ../../source/tutorials/01_assets/run_articulation.rst:59
msgid ""
"Continuing from the previous tutorial, we reset the simulation at regular"
" intervals, set commands to the articulation, step the simulation, and "
"update the articulation's internal buffers."
msgstr "从上一个教程中继续，我们定期重置模拟，对关节机器人设置命令，推进模拟，并更新关节机器人的内部缓冲区。"

#: ../../source/tutorials/01_assets/run_articulation.rst:63
msgid "Resetting the simulation"
msgstr "重置模拟"

#: ../../source/tutorials/01_assets/run_articulation.rst:65
msgid ""
"Similar to a rigid object, an articulation also has a root state. This "
"state corresponds to the root body in the articulation tree. On top of "
"the root state, an articulation also has joint states. These states "
"correspond to the joint positions and velocities."
msgstr "与刚体物体类似，关节机器人也有一个根状态。这个状态对应于关节机器人树中的根体。在根状态之上，关节机器人还有关节状态。这些状态对应于关节的位置和速度。"

#: ../../source/tutorials/01_assets/run_articulation.rst:69
msgid ""
"To reset the articulation, we first set the root state by calling the "
":meth:`Articulation.write_root_state_to_sim` method. Similarly, we set "
"the joint states by calling the "
":meth:`Articulation.write_joint_state_to_sim` method. Finally, we call "
"the :meth:`Articulation.reset` method to reset any internal buffers and "
"caches."
msgstr ""
"为了重置关节机器人，我们首先通过调用 :meth:`Articulation.write_root_state_to_sim` "
"方法设置根状态。类似地，我们通过调用 :meth:`Articulation.write_joint_state_to_sim` "
"方法设置关节状态。最后，我们调用 :meth:`Articulation.reset` 方法重置任何内部缓冲区和缓存。"

#: ../../source/tutorials/01_assets/run_articulation.rst:79
msgid "Stepping the simulation"
msgstr "推进模拟"

#: ../../source/tutorials/01_assets/run_articulation.rst:81
msgid "Applying commands to the articulation involves two steps:"
msgstr "向关节机器人应用命令涉及两个步骤: "

#: ../../source/tutorials/01_assets/run_articulation.rst:83
msgid ""
"*Setting the joint targets*: This sets the desired joint position, "
"velocity, or effort targets for the articulation."
msgstr "*设置关节目标*: 这为关节机器人设置期望的关节位置、速度或努力目标。"

#: ../../source/tutorials/01_assets/run_articulation.rst:84
msgid ""
"*Writing the data to the simulation*: Based on the articulation's "
"configuration, this step handles any :ref:`actuation conversions "
"<overview-actuators>` and writes the converted values to the PhysX "
"buffer."
msgstr ""
"*将数据写入模拟*: 根据关节机器人的配置，这一步处理任何 :ref:`动作转换 <overview-actuators>` 并将转换后的值写入 "
"PhysX 缓冲区。"

#: ../../source/tutorials/01_assets/run_articulation.rst:87
msgid ""
"In this tutorial, we control the articulation using joint effort "
"commands. For this to work, we need to set the articulation's stiffness "
"and damping parameters to zero. This is done a-priori inside the cart-"
"pole's pre-defined configuration object."
msgstr "在本教程中，我们使用关节努力命令来控制关节机器人。为此工作，我们需要将关节机器人的刚度和阻尼参数设置为零。这是在车杆的预定义配置对象内部预先完成的。"

#: ../../source/tutorials/01_assets/run_articulation.rst:91
msgid ""
"At every step, we randomly sample joint efforts and set them to the "
"articulation by calling the :meth:`Articulation.set_joint_effort_target` "
"method. After setting the targets, we call the "
":meth:`Articulation.write_data_to_sim` method to write the data to the "
"PhysX buffer. Finally, we step the simulation."
msgstr ""
"在每一步中，我们随机采样关节努力并通过调用 :meth:`Articulation.set_joint_effort_target` "
"方法将它们设置给关节机器人。在设置好目标后，我们通过调用 :meth:`Articulation.write_data_to_sim` "
"方法将数据写入 PhysX 缓冲区。最后，我们推进模拟。"

#: ../../source/tutorials/01_assets/run_articulation.rst:103
msgid "Updating the state"
msgstr "更新状态"

#: ../../source/tutorials/01_assets/run_articulation.rst:105
msgid ""
"Every articulation class contains a :class:`assets.ArticulationData` "
"object. This stores the state of the articulation. To update the state "
"inside the buffer, we call the :meth:`assets.Articulation.update` method."
msgstr ""
"每个关节机器人类包含一个 :class:`assets.ArticulationData` "
"对象。这个对象保存了关节机器人的状态。为了更新缓冲区内的状态，我们调用 :meth:`assets.Articulation.update` "
"方法。"

#: ../../source/tutorials/01_assets/run_articulation.rst:115
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/01_assets/run_articulation.rst:118
msgid ""
"To run the code and see the results, let's run the script from the "
"terminal:"
msgstr "要运行代码并查看结果，让我们从终端运行脚本: "

#: ../../source/tutorials/01_assets/run_articulation.rst:125
msgid ""
"This command should open a stage with a ground plane, lights, and two "
"cart-poles that are moving around randomly. To stop the simulation, you "
"can either close the window, or press ``Ctrl+C`` in the terminal."
msgstr ""
"这个命令应该会打开一个包含地面平面、灯光和两个随机移动的cart-poles的场景。要停止模拟，您可以关闭窗口，或在终端中按 ``Ctrl+C``"
" 。"

#: ../../source/tutorials/01_assets/run_articulation.rst:-1
#, fuzzy
msgid "run_articulation.py 的结果"
msgstr "代码 `run_articulation.py` 的内容"

#: ../../source/tutorials/01_assets/run_articulation.rst:133
msgid ""
"In this tutorial, we learned how to create and interact with a simple "
"articulation. We saw how to set the state of an articulation (its root "
"and joint state) and how to apply commands to it. We also saw how to "
"update its buffers to read the latest state from the simulation."
msgstr "在本教程中，我们学会了如何创建和交互一个简单的关节机器人。我们看到了如何设置关节机器人的状态（其根和关节状态），以及如何对其应用命令。我们还看到了如何更新其缓冲区，以从模拟中读取最新状态。"

#: ../../source/tutorials/01_assets/run_articulation.rst:137
msgid ""
"In addition to this tutorial, we also provide a few other scripts that "
"spawn different robots.These are included in the "
"``source/standalone/demos`` directory. You can run these scripts as:"
msgstr ""
"除了这个教程之外，我们还提供了一些生成不同机器人的其他脚本。这些包括在 ``source/standalone/demos`` "
"目录中。您可以运行这些脚本，比如: "

#~ msgid "result of run_articulation.py"
#~ msgstr "run_articulation.py 的结果"

