# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.

msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:5
msgid "Policy Inference in USD Environment"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:9
msgid ""
"Having learnt how to modify a task in :ref:`tutorial-modify-direct-rl-"
"env`, we will now look at how to run a trained policy in a prebuilt USD "
"scene."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:11
msgid ""
"In this tutorial, we will use the RSL RL library and the trained policy "
"from the Humanoid Rough Terrain ``Isaac-Velocity-Rough-H1-v0`` task in a "
"simple warehouse USD."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:15
msgid "The Tutorial Code"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:17
msgid ""
"For this tutorial, we use the trained policy's checkpoint exported as jit"
" (which is an offline version of the policy)."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:19
msgid ""
"The ``H1RoughEnvCfg_PLAY`` cfg encapsulates the configuration values of "
"the inference environment, including the assets to be instantiated."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:22
msgid ""
"In order to use a prebuilt USD environment instead of the terrain "
"generator specified, we make the following changes to the config before "
"passing it to the ``ManagerBasedRLEnv``."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst
msgid "Code for policy_inference_in_usd.py"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:34
msgid ""
"Note that we have set the device to ``CPU`` and disabled the use of "
"Fabric for inferencing. This is because when simulating a small number of"
" environment, CPU simulation can often perform faster than GPU "
"simulation."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:39
msgid "The Code Execution"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:41
msgid ""
"First, we need to train the ``Isaac-Velocity-Rough-H1-v0`` task by "
"running the following:"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:47
msgid ""
"When the training is finished, we can visualize the result with the "
"following command. To stop the simulation, you can either close the "
"window, or press ``Ctrl+C`` in the terminal where you started the "
"simulation."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:56
msgid ""
"After running the play script, the policy will be exported to jit and "
"onnx files under the experiment logs directory. Note that not all "
"learning libraries support exporting the policy to a jit or onnx file. "
"For libraries that don't currently support this functionality, please "
"refer to the corresponding ``play.py`` script for the library to learn "
"about how to initialize the policy."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:61
msgid ""
"We can then load the warehouse asset and run inference on the H1 robot "
"using the exported jit policy."
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:-1
msgid "result of training Isaac-H1-Direct-v0 task"
msgstr ""

#: ../../source/tutorials/03_envs/policy_inference_in_usd.rst:73
msgid ""
"In this tutorial, we learnt how to make minor modifications to an "
"existing environment config to run policy inference in a prebuilt usd "
"environment."
msgstr ""
