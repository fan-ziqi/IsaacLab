# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:4
msgid "Registering an Environment"
msgstr "注册环境"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:8
msgid ""
"In the previous tutorial, we learned how to create a custom cartpole "
"environment. We manually created an instance of the environment by importing"
" the environment class and its configuration class."
msgstr "在上一个教程中，我们学习了如何创建自定义的cartpole环境。我们通过导入环境类和配置类的方式手动创建了环境的实例。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst
msgid "Environment creation in the previous tutorial"
msgstr "上一个教程中的环境创建"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:20
msgid ""
"While straightforward, this approach is not scalable as we have a large "
"suite of environments. In this tutorial, we will show how to use the "
":meth:`gymnasium.register` method to register environments with the "
"``gymnasium`` registry. This allows us to create the environment through the"
" :meth:`gymnasium.make` function."
msgstr ""
"虽然直接，但这种方法不够可扩展，因为我们有大量的环境套件。在本教程中，我们将展示如何使用 :meth:`gymnasium.register` "
"方法将环境注册到 ``gymnasium`` 注册表中。这使我们可以通过 :meth:`gymnasium.make` 函数创建环境。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst
msgid "Environment creation in this tutorial"
msgstr "本教程中的环境创建"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:35
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:37
msgid ""
"The tutorial corresponds to the ``random_agent.py`` script in the "
"``scripts/environments`` directory."
msgstr "本教程对应 ``scripts/environments`` 目录中的 ``random_agent.py`` 脚本。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst
msgid "Code for random_agent.py"
msgstr "random_agent.py的代码"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:49
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:51
msgid ""
"The :class:`envs.ManagerBasedRLEnv` class inherits from the "
":class:`gymnasium.Env` class to follow a standard interface. However, unlike"
" the traditional Gym environments, the :class:`envs.ManagerBasedRLEnv` "
"implements a *vectorized* environment. This means that multiple environment "
"instances are running simultaneously in the same process, and all the data "
"is returned in a batched fashion."
msgstr ""
":class:`envs.ManagerBasedRLEnv` 类继承自 :class:`gymnasium.Env` "
"类以遵循标准接口。然而，与传统的Gym环境不同， :class:`envs.ManagerBasedRLEnv` "
"实现了*向量化*环境。这意味着多个环境实例同时在同一进程中运行，并且所有数据都以批处理方式返回。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:57
msgid ""
"Similarly, the :class:`envs.DirectRLEnv` class also inherits from the "
":class:`gymnasium.Env` class for the direct workflow. For "
":class:`envs.DirectMARLEnv`, although it does not inherit from Gymnasium, it"
" can be registered and created in the same way."
msgstr ""
"同样， :class:`envs.DirectRLEnv` 类也从 :class:`gymnasium.Env` 类继承以用于直接工作流程。对于 "
":class:`envs.DirectMARLEnv` ，虽然它不是从Gymnasium继承的，但可以以相同的方式注册和创建。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:62
msgid "Using the gym registry"
msgstr "使用gym注册表"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:64
msgid ""
"To register an environment, we use the :meth:`gymnasium.register` method. "
"This method takes in the environment name, the entry point to the "
"environment class, and the entry point to the environment configuration "
"class."
msgstr ""
"要注册一个环境，我们使用 :meth:`gymnasium.register` 方法。此方法接收环境名称、环境类的入口点以及环境配置类的入口点。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:69
msgid ""
"The :mod:`gymnasium` registry is a global registry. Hence, it is important "
"to ensure that the environment names are unique. Otherwise, the registry "
"will throw an error when registering the environment."
msgstr ":mod:`gymnasium` 注册表是一个全局注册表。因此，确保环境名称是唯一的很重要。否则，在注册环境时注册表会抛出错误。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:74
msgid "Manager-Based Environments"
msgstr "基于管理器的环境"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:76
msgid ""
"For manager-based environments, the following shows the registration call "
"for the cartpole environment in the "
"``isaaclab_tasks.manager_based.classic.cartpole`` sub-package:"
msgstr ""
"对于基于管理器的环境，以下显示了在 ``isaaclab_tasks.manager_based.classic.cartpole`` "
"子包中注册cartpole环境的调用: "

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:84
msgid ""
"The ``id`` argument is the name of the environment. As a convention, we name"
" all the environments with the prefix ``Isaac-`` to make it easier to search"
" for them in the registry. The name of the environment is typically followed"
" by the name of the task, and then the name of the robot. For instance, for "
"legged locomotion with ANYmal C on flat terrain, the environment is called "
"``Isaac-Velocity-Flat-Anymal-C-v0``. The version number ``v<N>`` is "
"typically used to specify different variations of the same environment. "
"Otherwise, the names of the environments can become too long and difficult "
"to read."
msgstr ""
"``id`` 参数是环境的名称。作为约定，我们将所有的环境名称以 ``Isaac-`` "
"作为前缀命名，以便在注册表中更容易搜索它们。环境的名称通常后跟任务名称，然后是机器人的名称。例如，对于ANYmal C在平坦地面上的足部运动，环境称为 "
"``Isaac-Velocity-Flat-Anymal-C-v0`` 。版本号 ``v<N>`` "
"通常用于指定相同环境的不同变体。否则，环境的名称会变得太长且难以阅读。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:92
msgid ""
"The ``entry_point`` argument is the entry point to the environment class. "
"The entry point is a string of the form ``<module>:<class>``. In the case of"
" the cartpole environment, the entry point is "
"``isaaclab.envs:ManagerBasedRLEnv``. The entry point is used to import the "
"environment class when creating the environment instance."
msgstr ""
"``entry_point`` 参数是环境类的入口点。入口点是一个 ``<module>:<class>`` "
"形式的字符串。对于cartpole环境，入口点是 ``isaaclab.envs:ManagerBasedRLEnv`` "
"。入口点用于在创建环境实例时导入环境类。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:97
msgid ""
"The ``env_cfg_entry_point`` argument specifies the default configuration for"
" the environment. The default configuration is loaded using the "
":meth:`isaaclab_tasks.utils.parse_env_cfg` function. It is then passed to "
"the :meth:`gymnasium.make` function to create the environment instance. The "
"configuration entry point can be both a YAML file or a python configuration "
"class."
msgstr ""
"``env_cfg_entry_point`` 参数指定了环境的默认配置。默认配置使用 "
":meth:`isaaclab_tasks.utils.parse_env_cfg` 函数加载。然后将其传递给 "
":meth:`gymnasium.make` 函数以创建环境实例。配置入口点可以是YAML文件或Python配置类。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:103
msgid "Direct Environments"
msgstr "直接环境"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:105
msgid ""
"For direct-based environments, the environment registration follows a "
"similar pattern. Instead of registering the environment's entry point as the"
" :class:`~isaaclab.envs.ManagerBasedRLEnv` class, we register the "
"environment's entry point as the implementation class of the environment. "
"Additionally, we add the suffix ``-Direct`` to the environment name to "
"differentiate it from the manager-based environments."
msgstr ""
"对于基于直接的环境，环境注册遵循类似的模式。与将环境的入口点注册为 :class:`~isaaclab.envs.ManagerBasedRLEnv` "
"类不同，我们将环境的入口点注册为环境的实现类。此外，我们将环境名称添加后缀 ``-Direct`` 以区分其与基于管理器的环境。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:111
msgid ""
"As an example, the following shows the registration call for the cartpole "
"environment in the ``isaaclab_tasks.direct.cartpole`` sub-package:"
msgstr "例如，以下显示了在 ``isaaclab_tasks.direct.cartpole`` 子包中注册cartpole环境的调用: "

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:121
msgid "Creating the environment"
msgstr "创建环境"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:123
msgid ""
"To inform the ``gym`` registry with all the environments provided by the "
"``isaaclab_tasks`` extension, we must import the module at the start of the "
"script. This will execute the ``__init__.py`` file which iterates over all "
"the sub-packages and registers their respective environments."
msgstr ""
"要将所有 ``isaaclab_tasks`` 扩展提供的环境通知 ``gym`` 注册表，我们必须在脚本开头导入模块。这将执行 "
"``__init__.py`` 文件，该文件遍历所有子包并注册它们各自的环境。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:132
msgid ""
"In this tutorial, the task name is read from the command line. The task name"
" is used to parse the default configuration as well as to create the "
"environment instance. In addition, other parsed command line arguments such "
"as the number of environments, the simulation device, and whether to render,"
" are used to override the default configuration."
msgstr ""
"在本教程中，任务名称从命令行中读取。任务名称用于解析默认配置以及创建环境实例。此外，其他解析的命令行参数，如环境数量、模拟设备以及是否进行渲染，用于覆盖默认配置。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:142
msgid ""
"Once creating the environment, the rest of the execution follows the "
"standard resetting and stepping."
msgstr "一旦创建环境，其余执行将遇到标准的重置和步进。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:146
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:148
msgid ""
"Now that we have gone through the code, let's run the script and see the "
"result:"
msgstr "现在我们已经阅读了代码，让我们运行脚本并看看结果: "

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:155
msgid ""
"This should open a stage with everything similar to the :ref:`tutorial-"
"create-manager-rl-env` tutorial. To stop the simulation, you can either "
"close the window, or press ``Ctrl+C`` in the terminal."
msgstr ""
"这将打开一个与 :ref:`tutorial-create-manager-rl-env` 教程类似的阶段。要停止模拟，您可以关闭窗口，或在终端中按 "
"``Ctrl+C`` 。"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:-1
msgid "result of random_agent.py"
msgstr "random_agent.py的结果"

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:165
msgid ""
"In addition, you can also change the simulation device from GPU to CPU by "
"setting the value of the ``--device`` flag explicitly:"
msgstr "此外，您还可以通过显式设置 ``--device`` 的值将模拟设备从 GPU 更改为 CPU: "

#: ../../source/tutorials/03_envs/register_rl_env_gym.rst:171
msgid ""
"With the ``--device cpu`` flag, the simulation will run on the CPU. This is "
"useful for debugging the simulation. However, the simulation will run much "
"slower than on the GPU."
msgstr "使用 ``--device cpu`` 标志，模拟将在CPU上运行。这对于调试模拟很有用。但是，与在GPU上运行相比，模拟速度会慢得多。"
