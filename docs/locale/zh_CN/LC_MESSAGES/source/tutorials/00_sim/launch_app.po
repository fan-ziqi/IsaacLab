# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-04 11:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/00_sim/launch_app.rst:2
msgid "Deep-dive into AppLauncher"
msgstr "深入了解AppLauncher"

#: ../../source/tutorials/00_sim/launch_app.rst:6
msgid ""
"In this tutorial, we will dive into the :class:`app.AppLauncher` class to "
"configure the simulator using CLI arguments and environment variables "
"(envars). Particularly, we will demonstrate how to use "
":class:`~app.AppLauncher` to enable livestreaming and configure the "
":class:`omni.isaac.kit.SimulationApp` instance it wraps, while also allowing"
" user-provided options."
msgstr ""
"在本教程中，我们将深入研究 :class:`app.AppLauncher` "
"类，以使用CLI参数和环境变量（envars）配置模拟器。特别地，我们将展示如何使用 :class:`~app.AppLauncher` "
"启用实时流传输，并配置其包装的 :class:`omni.isaac.kit.SimulationApp` 实例，同时也允许用户提供选项。"

#: ../../source/tutorials/00_sim/launch_app.rst:11
msgid ""
"The :class:`~app.AppLauncher` is a wrapper for "
":class:`~omni.isaac.kit.SimulationApp` to simplify its configuration. The "
":class:`~omni.isaac.kit.SimulationApp` has many extensions that must be "
"loaded to enable different capabilities, and some of these extensions are "
"order- and inter-dependent. Additionally, there are startup options such as "
"``headless`` which must be set at instantiation time, and which have an "
"implied relationship with some extensions, e.g. the livestreaming "
"extensions. The :class:`~app.AppLauncher` presents an interface that can "
"handle these extensions and startup options in a portable manner across a "
"variety of use cases. To achieve this, we offer CLI and envar flags which "
"can be merged with user-defined CLI args, while passing forward arguments "
"intended for :class:`~omni.isaac.kit.SimulationApp`."
msgstr ""
":class:`~app.AppLauncher` 是 :class:`~omni.isaac.kit.SimulationApp` "
"的一个包装器，用于简化其配置。 :class:`~omni.isaac.kit.SimulationApp` "
"有许多扩展功能，必须加载才能启用不同的功能，并且其中一些扩展功能是有顺序和相互依赖的。此外，还有启动选项，比如 ``headless`` "
"必须在实例化时设置，并且这些选项与某些扩展功能有暗含的关联，比如实时流传输扩展功能。 :class:`~app.AppLauncher` "
"提供了一个接口，可以以便捷的方式处理这些扩展功能和启动选项，适用于各种用例。为此，我们提供了CLI和envar标志，可以与用户定义的CLI参数合并，同时传递给"
" :class:`~omni.isaac.kit.SimulationApp` 。"

#: ../../source/tutorials/00_sim/launch_app.rst:23
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/00_sim/launch_app.rst:25
msgid ""
"The tutorial corresponds to the ``launch_app.py`` script in the "
"``source/standalone/tutorials/00_sim`` directory."
msgstr ""
"该教程对应于 ``source/standalone/tutorials/00_sim`` 目录中的 ``launch_app.py`` 脚本。"

#: ../../source/tutorials/00_sim/launch_app.rst
msgid "Code for launch_app.py"
msgstr "launch_app.py的代码"

#: ../../source/tutorials/00_sim/launch_app.rst:37
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/00_sim/launch_app.rst:40
msgid "Adding arguments to the argparser"
msgstr "向argparser添加参数"

#: ../../source/tutorials/00_sim/launch_app.rst:42
msgid ""
":class:`~app.AppLauncher` is designed to be compatible with custom CLI args "
"that users need for their own scripts, while still providing a portable CLI "
"interface."
msgstr ":class:`~app.AppLauncher` 旨在与用户自定义脚本需要的自定义CLI参数兼容，同时提供便携CLI界面。"

#: ../../source/tutorials/00_sim/launch_app.rst:45
msgid ""
"In this tutorial, a standard :class:`argparse.ArgumentParser` is "
"instantiated and given the script-specific ``--size`` argument, as well as "
"the arguments ``--height`` and ``--width``. The latter are ingested by "
":class:`~omni.isaac.kit.SimulationApp`."
msgstr ""
"在本教程中，实例化了一个标准的 :class:`argparse.ArgumentParser` ，并赋予了特定脚本的 ``--size`` "
"参数，以及参数 ``--height`` 和 ``--width`` 。后者被 "
":class:`~omni.isaac.kit.SimulationApp` 所列取。"

#: ../../source/tutorials/00_sim/launch_app.rst:49
msgid ""
"The argument ``--size`` is not used by :class:`~app.AppLauncher`, but will "
"merge seamlessly with the :class:`~app.AppLauncher` interface. In-script "
"arguments can be merged with the :class:`~app.AppLauncher` interface via the"
" :meth:`~app.AppLauncher.add_app_launcher_args` method, which will return a "
"modified :class:`~argparse.ArgumentParser` with the "
":class:`~app.AppLauncher` arguments appended. This can then be processed "
"into an :class:`argparse.Namespace` using the standard "
":meth:`argparse.ArgumentParser.parse_args` method and passed directly to "
":class:`~app.AppLauncher` for instantiation."
msgstr ""
"参数 ``--size`` 不被 :class:`~app.AppLauncher` 使用，但会与 :class:`~app.AppLauncher` "
"界面无缝合并。可以通过 :meth:`~app.AppLauncher.add_app_launcher_args` 方法将脚本参数与 "
":class:`~app.AppLauncher` 界面合并，该方法会返回一个修改过的 "
":class:`~argparse.ArgumentParser` ，其中包含 :class:`~app.AppLauncher` "
"参数。然后可以使用标准的 :meth:`argparse.ArgumentParser.parse_args` 方法将其处理为一个 "
":class:`argparse.Namespace` ，并直接传递给 :class:`~app.AppLauncher` 进行实例化。"

#: ../../source/tutorials/00_sim/launch_app.rst:62
msgid ""
"The above only illustrates only one of several ways of passing arguments to "
":class:`~app.AppLauncher`. Please consult its documentation page to see "
"further options."
msgstr "上述仅演示了一种向 :class:`~app.AppLauncher` 传递参数的方式。请查阅其文档页面以获取更多选项。"

#: ../../source/tutorials/00_sim/launch_app.rst:66
msgid "Understanding the output of --help"
msgstr "理解--help的输出"

#: ../../source/tutorials/00_sim/launch_app.rst:68
msgid ""
"While executing the script, we can pass the ``--help`` argument and see the "
"combined outputs of the custom arguments and those from "
":class:`~app.AppLauncher`."
msgstr ""
"在执行脚本时，我们可以传递 ``--help`` 参数，并查看自定义参数和 :class:`~app.AppLauncher` 的合并输出。"

#: ../../source/tutorials/00_sim/launch_app.rst:102
msgid ""
"This readout details the ``--size``, ``--height``, and ``--width`` arguments"
" defined in the script directly, as well as the :class:`~app.AppLauncher` "
"arguments."
msgstr ""
"该输出详细描述了脚本中直接定义的 ``--size``、``--height`` 和 ``--width`` 参数，以及 "
":class:`~app.AppLauncher` 的参数。"

#: ../../source/tutorials/00_sim/launch_app.rst:105
msgid ""
"The ``[INFO]`` messages preceding the help output also reads out which of "
"these arguments are going to be interpreted as arguments to the "
":class:`~omni.isaac.kit.SimulationApp` instance which the "
":class:`~app.AppLauncher` class wraps. In this case, it is ``--height`` and "
"``--width``. These are classified as such because they match the name and "
"type of an argument which can be processed by "
":class:`~omni.isaac.kit.SimulationApp`. Please refer to the `specification`_"
" for such arguments for more examples."
msgstr ""
"在帮助输出之前的 ``[INFO]`` 消息还指出了这些参数将被解释为 :class:`~app.AppLauncher` 类包装的 "
":class:`~omni.isaac.kit.SimulationApp` 实例的参数。在这种情况下，它是 ``--height`` 和 "
"``--width`` 。这两个参数被归类为这样的类别，因为它们与 :class:`~omni.isaac.kit.SimulationApp` "
"可以处理的参数的名称和类型相匹配。请参考 `specification`_ 以获取更多示例。"

#: ../../source/tutorials/00_sim/launch_app.rst:113
msgid "Using environment variables"
msgstr "使用环境变量"

#: ../../source/tutorials/00_sim/launch_app.rst:115
msgid ""
"As noted in the help message, the :class:`~app.AppLauncher` arguments "
"(``--livestream``, ``--headless``) have corresponding environment variables "
"(envar) as well. These are detailed in :mod:`omni.isaac.lab.app` "
"documentation. Providing any of these arguments through CLI is equivalent to"
" running the script in a shell environment where the corresponding envar is "
"set."
msgstr ""
"如帮助信息中所述， :class:`~app.AppLauncher` 的参数（ ``--livestream``、``--headless`` "
"）有相应的环境变量（envar）。这些在 :mod:`omni.isaac.lab.app` "
"文档中详细说明。通过CLI提供这些参数等同于在设置了相应envar的shell环境中运行脚本。"

#: ../../source/tutorials/00_sim/launch_app.rst:120
msgid ""
"The support for :class:`~app.AppLauncher` envars are simply a convenience to"
" provide session-persistent configurations, and can be set in the user's "
"``${HOME}/.bashrc`` for persistent settings between sessions. In the case "
"where these arguments are provided from the CLI, they will override their "
"corresponding envar, as we will demonstrate later in this tutorial."
msgstr ""
"支持 :class:`~app.AppLauncher` envar只是为了提供会话持久性配置的便利，并可以在用户的 "
"``${HOME}/.bashrc`` "
"中设置，以在会话之间保留设置。在这些参数从CLI提供的情况下，它们将覆盖其相应的envar，后面我们将在本教程中演示。"

#: ../../source/tutorials/00_sim/launch_app.rst:125
msgid ""
"These arguments can be used with any script that starts the simulation using"
" :class:`~app.AppLauncher`, with one exception, ``--enable_cameras``. This "
"setting sets the rendering pipeline to use the offscreen renderer. However, "
"this setting is only compatible with the "
":class:`omni.isaac.lab.sim.SimulationContext`. It will not work with Isaac "
"Sim's :class:`omni.isaac.core.simulation_context.SimulationContext` class. "
"For more information on this flag, please see the :class:`~app.AppLauncher` "
"API documentation."
msgstr ""
"这些参数可以与使用 :class:`~app.AppLauncher` 启动模拟的任何脚本一起使用，只有一个例外，即 "
"``--enable_cameras`` 。此设置将设置渲染管线以使用离屏渲染器。但是，这个设置仅与 "
":class:`omni.isaac.lab.sim.SimulationContext` 兼容。它将无法与Isaac Sim的 "
":class:`omni.isaac.core.simulation_context.SimulationContext` "
"类一起使用。有关此标记的更多信息，请参阅 :class:`~app.AppLauncher` 的API文档。"

#: ../../source/tutorials/00_sim/launch_app.rst:133
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/00_sim/launch_app.rst:135
msgid "We will now run the example script:"
msgstr "现在我们将运行示例脚本: "

#: ../../source/tutorials/00_sim/launch_app.rst:141
msgid ""
"This will spawn a 0.5m\\ :sup:`3` volume cuboid in the simulation. No GUI "
"will appear, equivalent to if we had passed the ``--headless`` flag because "
"headlessness is implied by our ``LIVESTREAM`` envar. If a visualization is "
"desired, we could get one via Isaac's `Native Livestreaming`_. Streaming is "
"currently the only supported method of visualization from within the "
"container. The process can be killed by pressing ``Ctrl+C`` in the launching"
" terminal."
msgstr ""
"这将在模拟中生成一个0.5立方米的体积长方体。不会出现GUI，等同于如果我们传递了 ``--headless`` 标志，因为无头模式是由我们的 "
"``LIVESTREAM`` envar隐含的。如果需要可视化，可以通过Isaac的 `Native Livestreaming`_ "
"来实现。目前，流传输是容器内可视化的唯一支持方法。可以通过在启动终端中按 ``Ctrl+C`` 键终止该进程。"

#: ../../source/tutorials/00_sim/launch_app.rst:-1
msgid "result of launch_app.py"
msgstr "launch_app.py的结果"

#: ../../source/tutorials/00_sim/launch_app.rst:152
msgid ""
"Now, let's look at how :class:`~app.AppLauncher` handles conflicting "
"commands:"
msgstr "现在，让我们看看 :class:`~app.AppLauncher` 如何处理冲突命令: "

#: ../../source/tutorials/00_sim/launch_app.rst:158
msgid ""
"This will cause the same behavior as in the previous run, because although "
"we have set ``LIVESTREAM=0`` in our envars, CLI args such as "
"``--livestream`` take precedence in determining behavior. The process can be"
" killed by pressing ``Ctrl+C`` in the launching terminal."
msgstr ""
"这会导致与上次运行相同的行为，因为虽然我们在envars中设置了 ``LIVESTREAM=0`` ，但CLI参数如 ``--livestream`` "
"优先确定行为。可以通过在启动终端中按 ``Ctrl+C`` 键来终止该进程。"

#: ../../source/tutorials/00_sim/launch_app.rst:162
msgid ""
"Finally, we will examine passing arguments to "
":class:`~omni.isaac.kit.SimulationApp` through :class:`~app.AppLauncher`:"
msgstr ""
"最后，我们将研究通过 :class:`~app.AppLauncher` 向 "
":class:`~omni.isaac.kit.SimulationApp` 传递参数: "

#: ../../source/tutorials/00_sim/launch_app.rst:169
msgid ""
"This will cause the same behavior as before, but now the viewport will be "
"rendered at 1920x1080p resolution. This can be useful when we want to gather"
" high-resolution video, or we can specify a lower resolution if we want our "
"simulation to be more performant. The process can be killed by pressing "
"``Ctrl+C`` in the launching terminal."
msgstr ""
"这将导致与之前的行为相同，但现在视口将以1920x1080p分辨率进行渲染。在希望收集高分辨率视频或者希望使模拟更具性能时，这可能非常有用。可以通过在启动终端中按"
" ``Ctrl+C`` 键来终止该进程。"
