# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/tutorials/00_sim/create_empty.rst:2
msgid "Creating an empty scene"
msgstr "创建一个空场景"

#: ../../source/tutorials/00_sim/create_empty.rst:6
msgid ""
"This tutorial shows how to launch and control Isaac Sim simulator from a "
"standalone Python script. It sets up an empty scene in Isaac Lab and "
"introduces the two main classes used in the framework, "
":class:`app.AppLauncher` and :class:`sim.SimulationContext`."
msgstr ""
"本教程展示了如何从独立的 Python 脚本启动和控制 Isaac Sim 模拟器。它在 Isaac Lab "
"中设置了一个空场景，并介绍了框架中使用的两个主要类 :class:`app.AppLauncher` 和 "
":class:`sim.SimulationContext` 。"

#: ../../source/tutorials/00_sim/create_empty.rst:10
msgid ""
"Please review `Isaac Sim Workflows`_ prior to beginning this tutorial to "
"get an initial understanding of working with the simulator."
msgstr "请在开始本教程之前查看 `Isaac Sim 工作流`_ ，以获得对与模拟器一起工作的初步了解。"

#: ../../source/tutorials/00_sim/create_empty.rst:15
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/00_sim/create_empty.rst:17
msgid ""
"The tutorial corresponds to the ``create_empty.py`` script in the "
"``scripts/tutorials/00_sim`` directory."
msgstr "本教程对应于 ``scripts/tutorials/00_sim`` 目录中的 ``create_empty.py`` 脚本。"

#: ../../source/tutorials/00_sim/create_empty.rst
msgid "Code for create_empty.py"
msgstr "create_empty.py的代码"

#: ../../source/tutorials/00_sim/create_empty.rst:29
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/00_sim/create_empty.rst:32
msgid "Launching the simulator"
msgstr "启动模拟器"

#: ../../source/tutorials/00_sim/create_empty.rst:34
msgid ""
"The first step when working with standalone Python scripts is to launch "
"the simulation application. This is necessary to do at the start since "
"various dependency modules of Isaac Sim are only available after the "
"simulation app is running."
msgstr "使用独立的 Python 脚本时的第一步是启动模拟应用程序。这是必要的，因为只有在模拟应用程序运行后，Isaac Sim 的各种依赖模块才可用。"

#: ../../source/tutorials/00_sim/create_empty.rst:38
msgid ""
"This can be done by importing the :class:`app.AppLauncher` class. This "
"utility class wraps around :class:`isaacsim.SimulationApp` class to "
"launch the simulator. It provides mechanisms to configure the simulator "
"using command-line arguments and environment variables."
msgstr ""
"这可以通过导入 :class:`app.AppLauncher` 类来完成。此实用程序类包装了 "
":class:`isaacsim.SimulationApp` 类，以启动模拟器。它提供机制来使用命令行参数和环境变量配置模拟器。"

#: ../../source/tutorials/00_sim/create_empty.rst:42
msgid ""
"For this tutorial, we mainly look at adding the command-line options to a"
" user-defined :class:`argparse.ArgumentParser`. This is done by passing "
"the parser instance to the :meth:`app.AppLauncher.add_app_launcher_args` "
"method, which appends different parameters to it. These include launching"
" the app headless, configuring different Livestream options, and enabling"
" off-screen rendering."
msgstr ""
"对于本教程，我们主要关注将命令行选项添加到用户定义的 :class:`argparse.ArgumentParser` 中。通过将解析器实例传递给"
" :meth:`app.AppLauncher.add_app_launcher_args` "
"方法，并向其附加不同的参数来完成。这些参数包括启动应用程序无头模式、配置不同的实时流选项和启用脱机渲染。"

#: ../../source/tutorials/00_sim/create_empty.rst:54
msgid "Importing python modules"
msgstr "导入 python 模块"

#: ../../source/tutorials/00_sim/create_empty.rst:56
msgid ""
"Once the simulation app is running, it is possible to import different "
"Python modules from Isaac Sim and other libraries. Here we import the "
"following module:"
msgstr "一旦模拟应用程序运行，就可以从 Isaac Sim 和其他库中导入不同的 Python 模块。在这里，我们导入以下模块: "

#: ../../source/tutorials/00_sim/create_empty.rst:59
msgid ""
":mod:`isaaclab.sim`: A sub-package in Isaac Lab for all the core "
"simulator-related operations."
msgstr ":mod:`isaaclab.sim`:Isaac Lab 中用于所有核心模拟器相关操作的子包。"

#: ../../source/tutorials/00_sim/create_empty.rst:68
msgid "Configuring the simulation context"
msgstr "配置模拟上下文"

#: ../../source/tutorials/00_sim/create_empty.rst:70
msgid ""
"When launching the simulator from a standalone script, the user has "
"complete control over playing, pausing and stepping the simulator. All "
"these operations are handled through the **simulation context**. It takes"
" care of various timeline events and also configures the `physics scene`_"
" for simulation."
msgstr ""
"当从独立脚本启动模拟器时，用户可以完全控制播放、暂停和步进模拟器。所有这些操作都通过 **模拟上下文** "
"处理。它负责各种时间轴事件，并为模拟器配置 `物理场景`_ 。"

#: ../../source/tutorials/00_sim/create_empty.rst:75
msgid ""
"In Isaac Lab, the :class:`sim.SimulationContext` class inherits from "
"Isaac Sim's "
":class:`isaacsim.core.api.simulation_context.SimulationContext` to allow "
"configuring the simulation through Python's ``dataclass`` object and "
"handle certain intricacies of the simulation stepping."
msgstr ""
"在 Isaac Lab 中 , :class:`sim.SimulationContext` 类继承了 Isaac Sim 的 "
":class:`isaacsim.core.api.simulation_context.SimulationContext` ，以允许通过 "
"Python 的 ``dataclass`` 对象配置模拟器，并处理模拟步进的某些复杂性。"

#: ../../source/tutorials/00_sim/create_empty.rst:79
msgid ""
"For this tutorial, we set the physics and rendering time step to 0.01 "
"seconds. This is done by passing these quantities to the "
":class:`sim.SimulationCfg`, which is then used to create an instance of "
"the simulation context."
msgstr ""
"对于本教程，我们将将物理和渲染时间步长设置为0.01秒。通过将这些数量传递给 :class:`sim.SimulationCfg` "
"，然后用它创建模拟上下文的实例。"

#: ../../source/tutorials/00_sim/create_empty.rst:89
msgid ""
"Following the creation of the simulation context, we have only configured"
" the physics acting on the simulated scene. This includes the device to "
"use for simulation, the gravity vector, and other advanced solver "
"parameters. There are now two main steps remaining to run the simulation:"
msgstr "创建模拟上下文后，我们只配置了作用于模拟场景的物理。这包括用于模拟的设备、重力矢量和其他高级求解器参数。现在还有两个主要步骤剩下来运行模拟: "

#: ../../source/tutorials/00_sim/create_empty.rst:93
msgid ""
"Designing the simulation scene: Adding sensors, robots and other "
"simulated objects"
msgstr "设计模拟场景: 添加传感器、机器人和其他模拟对象"

#: ../../source/tutorials/00_sim/create_empty.rst:94
msgid ""
"Running the simulation loop: Stepping the simulator, and setting and "
"getting data from the simulator"
msgstr "运行模拟循环: 使模拟器进行步进，并从模拟器中设置和获取数据"

#: ../../source/tutorials/00_sim/create_empty.rst:96
msgid ""
"In this tutorial, we look at Step 2 first for an empty scene to focus on "
"the simulation control first. In the following tutorials, we will look "
"into Step 1 and working with simulation handles for interacting with the "
"simulator."
msgstr "在本教程中，我们首先看Step 2的空场景，以便首先关注模拟控制。在以下教程中，我们将深入研究Step 1和使用模拟处理程序与模拟器进行交互。"

#: ../../source/tutorials/00_sim/create_empty.rst:101
msgid "Running the simulation"
msgstr "运行模拟"

#: ../../source/tutorials/00_sim/create_empty.rst:103
msgid ""
"The first thing, after setting up the simulation scene, is to call the "
":meth:`sim.SimulationContext.reset` method. This method plays the "
"timeline and initializes the physics handles in the simulator. It must "
"always be called the first time before stepping the simulator. Otherwise,"
" the simulation handles are not initialized properly."
msgstr ""
"在设置模拟场景之后，第一件事是调用 :meth:`sim.SimulationContext.reset` "
"方法。此方法播放时间轴并初始化模拟器中的物理处理。在第一次步进模拟器之前必须始终调用此方法，否则模拟处理不会正确初始化。"

#: ../../source/tutorials/00_sim/create_empty.rst:110
msgid ""
":meth:`sim.SimulationContext.reset` is different from "
":meth:`sim.SimulationContext.play` method as the latter only plays the "
"timeline and does not initializes the physics handles."
msgstr ""
":meth:`sim.SimulationContext.reset` 不同于 "
":meth:`sim.SimulationContext.play` 方法，因为后者只播放时间轴而不初始化物理处理。"

#: ../../source/tutorials/00_sim/create_empty.rst:113
msgid ""
"After playing the simulation timeline, we set up a simple simulation loop"
" where the simulator is stepped repeatedly while the simulation app is "
"running. The method :meth:`sim.SimulationContext.step` takes in as "
"argument :attr:`render`, which dictates whether the step includes "
"updating the rendering-related events or not. By default, this flag is "
"set to True."
msgstr ""
"播放模拟时间轴后，我们设置了一个简单的模拟循环，其中模拟器在模拟应用程序运行时重复进行步进。 "
":meth:`sim.SimulationContext.step` 方法带有 :attr:`render` "
"作为参数，决定步进是否包括更新与渲染相关的事件。默认情况下，此标志设置为True。"

#: ../../source/tutorials/00_sim/create_empty.rst:124
msgid "Exiting the simulation"
msgstr "退出模拟"

msgid ""
"Lastly, the simulation application is stopped and its window is closed by"
" calling :meth:`isaacsim.SimulationApp.close` method."
msgstr "最后，通过调用 :meth:`isaacsim.SimulationApp.close` 方法停止模拟应用程序并关闭其窗口。"

#: ../../source/tutorials/00_sim/create_empty.rst:136
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/00_sim/create_empty.rst:138
msgid ""
"Now that we have gone through the code, let's run the script and see the "
"result:"
msgstr "现在我们已经浏览了代码，让我们运行脚本并查看结果: "

#: ../../source/tutorials/00_sim/create_empty.rst:145
msgid ""
"The simulation should be playing, and the stage should be rendering. To "
"stop the simulation, you can either close the window, or press ``Ctrl+C``"
" in the terminal."
msgstr "模拟应该正在进行，并且场景应该正在渲染。要停止模拟，可以关闭窗口或在终端中按下 ``Ctrl+C`` 。"

#: ../../source/tutorials/00_sim/create_empty.rst:-1
msgid "result of create_empty.py"
msgstr "create_empty.py的结果"

#: ../../source/tutorials/00_sim/create_empty.rst:153
msgid ""
"Passing ``--help`` to the above script will show the different command-"
"line arguments added earlier by the :class:`app.AppLauncher` class. To "
"run the script headless, you can execute the following:"
msgstr ""
"将 ``--help`` 传递给上述脚本将显示先前由 :class:`app.AppLauncher` "
"类添加的不同命令行参数。要以无头模式运行脚本，可以执行以下操作: "

#: ../../source/tutorials/00_sim/create_empty.rst:162
msgid ""
"Now that we have a basic understanding of how to run a simulation, let's "
"move on to the following tutorial where we will learn how to add assets "
"to the stage."
msgstr "现在我们对如何运行模拟有了基本的了解，让我们转到下一个教程，在那里我们将学习如何将资产添加到场景。"
