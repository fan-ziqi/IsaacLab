# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 20:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/how-to/wrap_rl_env.rst:5
msgid "Wrapping environments"
msgstr "包装环境"

#: ../../source/how-to/wrap_rl_env.rst:9
msgid ""
"Environment wrappers are a way to modify the behavior of an environment "
"without modifying the environment itself. This can be used to apply "
"functions to modify observations or rewards, record videos, enforce time "
"limits, etc. A detailed description of the API is available in the "
":class:`gymnasium.Wrapper` class."
msgstr ""
"环境包装器是一种修改环境行为而不修改环境本身的方法。这可以用来应用函数来修改观察或奖励，记录视频，强制时间限制等。API的详细说明在 "
":class:`gymnasium.Wrapper` 类中可用。"

#: ../../source/how-to/wrap_rl_env.rst:13
msgid ""
"At present, all RL environments inheriting from the "
":class:`~envs.ManagerBasedRLEnv` or :class:`~envs.DirectRLEnv` classes are "
"compatible with :class:`gymnasium.Wrapper`, since the base class implements "
"the :class:`gymnasium.Env` interface. In order to wrap an environment, you "
"need to first initialize the base environment. After that, you can wrap it "
"with as many wrappers as you want by calling ``env = wrapper(env, *args, "
"**kwargs)`` repeatedly."
msgstr ""
"目前，所有继承自 :class:`~envs.ManagerBasedRLEnv` 类或 :class:`~envs.DirectRLEnv` "
"类的RL环境都与 :class:`gymnasium.Wrapper` 兼容，因为基类实现了 :class:`gymnasium.Env` "
"接口。要包装一个环境，您需要先初始化基础环境。然后，您可以通过多次调用 ``env = wrapper(env, *args, **kwargs)`` "
"来包装它，以便包装尽可能多的包装器。"

#: ../../source/how-to/wrap_rl_env.rst:18
msgid ""
"For example, here is how you would wrap an environment to enforce that reset"
" is called before step or render:"
msgstr "例如，这是如何将一个环境包装起来强制在step或render之前调用reset的方式 :"

#: ../../source/how-to/wrap_rl_env.rst:46
msgid "Wrapper for recording videos"
msgstr "用于记录视频的包装器"

#: ../../source/how-to/wrap_rl_env.rst:48
msgid ""
"The :class:`gymnasium.wrappers.RecordVideo` wrapper can be used to record "
"videos of the environment. The wrapper takes a ``video_dir`` argument, which"
" specifies where to save the videos. The videos are saved in `mp4 "
"<https://en.wikipedia.org/wiki/MP4_file_format>`__ format at specified "
"intervals for specified number of environment steps or episodes."
msgstr ""
":class:`gymnasium.wrappers.RecordVideo` 包装器可用于记录环境的视频。该包装器接受一个 ``video_dir``"
" 参数，指定要保存视频的位置。根据指定的步数或情节，以指定的间隔将视频以 `mp4 "
"<https://en.wikipedia.org/wiki/MP4_file_format>`__ 格式保存。"

#: ../../source/how-to/wrap_rl_env.rst:53
msgid ""
"To use the wrapper, you need to first install ``ffmpeg``. On Ubuntu, you can"
" install it by running:"
msgstr "要使用该包装器，您需要首先安装 ``ffmpeg`` 。在Ubuntu上，可以通过运行以下命令进行安装 :"

#: ../../source/how-to/wrap_rl_env.rst:61
msgid ""
"By default, when running an environment in headless mode, the Omniverse "
"viewport is disabled. This is done to improve performance by avoiding "
"unnecessary rendering."
msgstr "默认情况下，在无头模式运行环境时，Omniverse视口会被禁用。这样做是为了通过避免不必要的渲染来提高性能。"

#: ../../source/how-to/wrap_rl_env.rst:64
msgid ""
"We notice the following performance in different rendering modes with the  "
"``Isaac-Reach-Franka-v0`` environment using an RTX 3090 GPU:"
msgstr "我们注意到在使用RTX 3090 GPU 的 ``Isaac-Reach-Franka-v0`` 环境中采用不同的渲染模式时的性能 :"

#: ../../source/how-to/wrap_rl_env.rst:67
msgid "No GUI execution without off-screen rendering enabled: ~65,000 FPS"
msgstr "没有开启离屏渲染的无 GUI 执行 : ~65,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:68
msgid "No GUI execution with off-screen enabled: ~57,000 FPS"
msgstr "开启了离屏渲染的无 GUI 执行 : ~57,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:69
msgid "GUI execution with full rendering: ~13,000 FPS"
msgstr "全渲染的 GUI 执行 : ~13,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:72
msgid ""
"The viewport camera used for rendering is the default camera in the scene "
"called ``\"/OmniverseKit_Persp\"``. The camera's pose and image resolution "
"can be configured through the :class:`~envs.ViewerCfg` class."
msgstr ""
"用于渲染的视口摄像头是场景中称为 ``\"/OmniverseKit_Persp\"`` 的默认摄像头。摄像头的姿势和图像分辨率可以通过 "
":class:`~envs.ViewerCfg` 类进行配置。"

#: ../../source/how-to/wrap_rl_env.rst
msgid "Default parameters of the ViewerCfg class:"
msgstr "ViewerCfg类的默认参数 :"

#: ../../source/how-to/wrap_rl_env.rst:85
msgid ""
"After adjusting the parameters, you can record videos by wrapping the "
"environment with the :class:`gymnasium.wrappers.RecordVideo` wrapper and "
"enabling the off-screen rendering flag. Additionally, you need to specify "
"the render mode of the environment as ``\"rgb_array\"``."
msgstr ""
"调整参数后，您可以通过将环境包装在 :class:`gymnasium.wrappers.RecordVideo` "
"包装器并启用离屏渲染标志来记录视频。此外，您需要指定环境的渲染模式为 ``\"rgb_array\"`` 。"

#: ../../source/how-to/wrap_rl_env.rst:89
msgid ""
"As an example, the following code records a video of the ``Isaac-Reach-"
"Franka-v0`` environment for 200 steps, and saves it in the ``videos`` folder"
" at a step interval of 1500 steps."
msgstr ""
"例如，以下代码将记录 ``Isaac-Reach-Franka-v0`` 环境的视频，持续200步，并将其保存在 ``videos`` "
"文件夹中，步长为1500步。"

#: ../../source/how-to/wrap_rl_env.rst:124
msgid "Wrapper for learning frameworks"
msgstr "学习框架的包装器"

#: ../../source/how-to/wrap_rl_env.rst:126
msgid ""
"Every learning framework has its own API for interacting with environments. "
"For example, the `Stable-Baselines3`_ library uses the `gym.Env "
"<https://gymnasium.farama.org/api/env/>`_ interface to interact with "
"environments. However, libraries like `RL-Games`_, `RSL-RL`_ or `SKRL`_ use "
"their own API for interfacing with a learning environments. Since there is "
"no one-size-fits-all solution, we do not base the "
":class:`~envs.ManagerBasedRLEnv` and :class:`~envs.DirectRLEnv` classes on "
"any particular learning framework's environment definition. Instead, we "
"implement wrappers to make it compatible with the learning framework's "
"environment definition."
msgstr ""
"每个学习框架都有自己的API与环境交互。例如， `Stable-Baselines3`_ 库使用 `gym.Env "
"<https://gymnasium.farama.org/api/env/>`_ 接口与环境进行交互。然而，像 `RL-Games`_ ， `RSL-"
"RL`_ 或 `SKRL`_ 这样的库使用自己的API来与学习环境进行交互。由于并非所有情况均适用，我们不会将 "
":class:`~envs.ManagerBasedRLEnv` 和 :class:`~envs.DirectRLEnv` "
"类建立在任何特定学习框架的环境定义基础上。相反，我们实现包装器来使其与学习框架的环境定义兼容。"

#: ../../source/how-to/wrap_rl_env.rst:134
msgid ""
"As an example of how to use the RL task environment with Stable-Baselines3:"
msgstr "使用Stable-Baselines3与RL任务环境的示例 :"

#: ../../source/how-to/wrap_rl_env.rst:148
msgid ""
"Wrapping the environment with the respective learning framework's wrapper "
"should happen in the end, i.e. after all other wrappers have been applied. "
"This is because the learning framework's wrapper modifies the interpretation"
" of environment's APIs which may no longer be compatible with "
":class:`gymnasium.Env`."
msgstr ""
"在应用所有其他包装器后，应在最后使用相应学习框架的包装器包装环境。这是因为学习框架的包装器会修改环境API的解释，这可能不再与 "
":class:`gymnasium.Env` 兼容。"

#: ../../source/how-to/wrap_rl_env.rst:154
msgid "Adding new wrappers"
msgstr "添加新的包装器"

#: ../../source/how-to/wrap_rl_env.rst:156
msgid ""
"All new wrappers should be added to the "
":mod:`omni.isaac.lab_tasks.utils.wrappers` module. They should check that "
"the underlying environment is an instance of "
":class:`omni.isaac.lab.envs.ManagerBasedRLEnv` or :class:`~envs.DirectRLEnv`"
" before applying the wrapper. This can be done by using the "
":func:`unwrapped` property."
msgstr ""
"所有新的包装器都应添加到 :mod:`omni.isaac.lab_tasks.utils.wrappers` 模块。它们应该检查底层环境是否是 "
":class:`omni.isaac.lab.envs.ManagerBasedRLEnv` 或 :class:`~envs.DirectRLEnv` "
"类的实例，然后再应用该包装器。这可以通过使用 :func:`unwrapped` 属性来完成。"

#: ../../source/how-to/wrap_rl_env.rst:161
msgid ""
"We include a set of wrappers in this module that can be used as a reference "
"to implement your own wrappers. If you implement a new wrapper, please "
"consider contributing it to the framework by opening a pull request."
msgstr "我们在这个模块中包括了一组包装器，供您作为实现自己包装器的参考。如果您实现了一个新的包装器，请考虑通过开放一个拉取请求将其贡献给框架。"
