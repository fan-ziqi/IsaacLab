# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-15 11:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/how-to/multi_asset_spawning.rst:2
msgid "Spawning Multiple Assets"
msgstr "生成多个资产"

#: ../../source/how-to/multi_asset_spawning.rst:6
msgid ""
"Typical, spawning configurations (introduced in the :ref:`tutorial-spawn-"
"prims` tutorial) copy the same asset (or USD primitive) across the different"
" resolved prim paths from the expressions. For instance, if the user "
"specifies to spawn the asset at \"/World/Table\\_.*/Object\", the same asset"
" is created at the paths \"/World/Table_0/Object\", "
"\"/World/Table_1/Object\" and so on."
msgstr ""
"典型的生成配置（在 :ref:`tutorial-spawn-prims` 教程中介绍）复制相同的资产（或 USD "
"基元）到不同的已解析的基元路径表达式中。例如，如果用户指定要在 \"/World/Table\\_.*/Object\" 生成资产，则相同的资产将在路径"
" \"/World/Table_0/Object\" 、 \"/World/Table_1/Object\" 等处创建。"

#: ../../source/how-to/multi_asset_spawning.rst:11
msgid ""
"However, at times, it might be desirable to spawn different assets under the"
" prim paths to ensure a diversity in the simulation. This guide describes "
"how to create different assets under each prim path using the spawning "
"functionality."
msgstr "但有时，可能希望在基元路径下生成不同的资产，以确保模拟的多样性。本指南介绍了如何使用生成功能在每个基元路径下创建不同的资产。"

#: ../../source/how-to/multi_asset_spawning.rst:15
msgid ""
"The sample script ``multi_asset.py`` is used as a reference, located in the "
"``IsaacLab/source/standalone/demos`` directory."
msgstr ""
"示例脚本 ``multi_asset.py`` 用作参考，位于 ``IsaacLab/source/standalone/demos`` 目录中。"

#: ../../source/how-to/multi_asset_spawning.rst
msgid "Code for multi_asset.py"
msgstr "multi_asset.py 的代码"

#: ../../source/how-to/multi_asset_spawning.rst:26
msgid ""
"This script creates multiple environments, where each environment has a "
"rigid object that is either a cone, a cube, or a sphere, and an articulation"
" that is either the ANYmal-C or ANYmal-D robot."
msgstr ""
"此脚本创建多个环境，每个环境都有一个刚性对象，可以是圆锥、立方体或球体，以及一个分别是 ANYmal-C 或 ANYmal-D 机器人的关节。"

#: ../../source/how-to/multi_asset_spawning.rst:-1
msgid "result of multi_asset.py"
msgstr "multi_asset.py 的结果"

#: ../../source/how-to/multi_asset_spawning.rst:34
msgid "Using Multi-Asset Spawning Functions"
msgstr "使用多资产生成功能"

#: ../../source/how-to/multi_asset_spawning.rst:36
msgid ""
"It is possible to spawn different assets and USDs in each environment using "
"the spawners :class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` and "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg`:"
msgstr ""
"可以使用生成器 :class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` 和 "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg` 在每个环境中生成不同的资产和 USDs："

#: ../../source/how-to/multi_asset_spawning.rst:39
msgid ""
"We set the spawn configuration in :class:`~assets.RigidObjectCfg` to be "
":class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg`:"
msgstr ""
"我们将 :class:`~assets.RigidObjectCfg` 中的生成配置设置为 "
":class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` ："

#: ../../source/how-to/multi_asset_spawning.rst:47
msgid ""
"This function allows you to define a list of different assets that can be "
"spawned as rigid objects. When "
":attr:`~sim.spawners.wrappers.MultiAssetSpawnerCfg.random_choice` is set to "
"True, one asset from the list is randomly selected and spawned at the "
"specified prim path."
msgstr ""
"此函数允许您定义可以作为刚性对象生成的不同资产的列表。当 "
":attr:`~sim.spawners.wrappers.MultiAssetSpawnerCfg.random_choice` 设置为 True "
"时，将从列表中随机选择一个资产，并在指定的基元路径上生成它。"

#: ../../source/how-to/multi_asset_spawning.rst:51
msgid ""
"Similarly, we set the spawn configuration in "
":class:`~assets.ArticulationCfg` to be "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg`:"
msgstr ""
"类似地，我们将 :class:`~assets.ArticulationCfg` 中的生成配置设置为 "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg` ："

#: ../../source/how-to/multi_asset_spawning.rst:59
msgid ""
"Similar to before, this configuration allows the selection of different USD "
"files representing articulated assets."
msgstr "与之前类似，此配置允许选择代表关节资产的不同 USD 文件。"

#: ../../source/how-to/multi_asset_spawning.rst:63
msgid "Things to Note"
msgstr "需要注意的事项"

#: ../../source/how-to/multi_asset_spawning.rst:66
msgid "Similar asset structuring"
msgstr "相似的资产结构"

#: ../../source/how-to/multi_asset_spawning.rst:68
msgid ""
"While spawning and handling multiple assets using the same physics interface"
" (the rigid object or articulation classes), it is essential to have the "
"assets at all the prim locations follow a similar structure. In case of an "
"articulation, this means that they all must have the same number of links "
"and joints, the same number of collision bodies and the same names for them."
" If that is not the case, the physics parsing of the prims can get affected "
"and fail."
msgstr ""
"在使用相同的物理接口（刚性对象或关节类）生成和处理多个资产时，必须确保所有基元路径上的资产遵循相似的结构。对于关节来说，这意味着它们都必须具有相同数量的链接和关节、相同数量的碰撞体，以及相同的名称。如果不是这种情况，基元的物理解析可能会受到影响并且失败。"

#: ../../source/how-to/multi_asset_spawning.rst:73
msgid ""
"The main purpose of this functionality is to enable the user to create "
"randomized versions of the same asset, for example robots with different "
"link lengths, or rigid objects with different collider shapes."
msgstr "此功能的主要目的是使用户能够创建相同资产的随机版本，例如具有不同链接长度的机器人，或具有不同碰撞器形状的刚性对象。"

#: ../../source/how-to/multi_asset_spawning.rst:77
msgid "Disabling physics replication in interactive scene"
msgstr "在交互式场景中禁用物理复制"

#: ../../source/how-to/multi_asset_spawning.rst:79
msgid ""
"By default, the flag :attr:`scene.InteractiveScene.replicate_physics` is set"
" to True. This flag informs the physics engine that the simulation "
"environments are copies of one another so it just needs to parse the first "
"environment to understand the entire simulation scene. This helps speed up "
"the simulation scene parsing."
msgstr ""
"默认情况下，标志 :attr:`scene.InteractiveScene.replicate_physics` 被设置为 "
"True。此标志告知物理引擎模拟环境是彼此的副本，因此只需解析第一个环境即可了解整个模拟场景。这有助于加快模拟场景的解析速度。"

#: ../../source/how-to/multi_asset_spawning.rst:83
msgid ""
"However, in the case of spawning different assets in different environments,"
" this assumption does not hold anymore. Hence the flag "
":attr:`scene.InteractiveScene.replicate_physics` must be disabled."
msgstr ""
"但是，在不同环境中生成不同的资产的情况下，这一假设不再成立。因此，必须禁用标志 "
":attr:`scene.InteractiveScene.replicate_physics` 。"

#: ../../source/how-to/multi_asset_spawning.rst:92
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/how-to/multi_asset_spawning.rst:94
msgid ""
"To execute the script with multiple environments and randomized assets, use "
"the following command:"
msgstr "要执行带有多个环境和随机资产的脚本，请使用以下命令："

#: ../../source/how-to/multi_asset_spawning.rst:100
msgid ""
"This command runs the simulation with 2048 environments, each with randomly "
"selected assets. To stop the simulation, you can close the window, or press "
"``Ctrl+C`` in the terminal."
msgstr "此命令运行具有 2048 个环境的模拟场景，每个环境都具有随机选择的资产。要停止模拟，可以关闭窗口或在终端中按下 ``Ctrl+C`` 。"
