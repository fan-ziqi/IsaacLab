# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/how-to/multi_asset_spawning.rst:3
msgid "Spawning Multiple Assets"
msgstr "生成多个资产"

#: ../../source/how-to/multi_asset_spawning.rst:7
msgid ""
"Typical spawning configurations (introduced in the :ref:`tutorial-spawn-"
"prims` tutorial) copy the same asset (or USD primitive) across the different"
" resolved prim paths from the expressions. For instance, if the user "
"specifies to spawn the asset at \"/World/Table\\_.*/Object\", the same asset"
" is created at the paths \"/World/Table_0/Object\", "
"\"/World/Table_1/Object\" and so on."
msgstr ""
"典型的生成配置（在 :ref:`tutorial-spawn-prims` 教程中介绍）复制相同的资产（或 USD "
"基本体）到不同的已解析的基本体路径表达式中。例如，如果用户指定要在 \"/World/Table\\_.*/Object\" 生成资产，则相同的资产将在路径"
" \"/World/Table_0/Object\" 、 \"/World/Table_1/Object\" 等处创建。"

#: ../../source/how-to/multi_asset_spawning.rst:12
msgid "However, we also support multi-asset spawning with two mechanisms:"
msgstr "然而，我们还支持使用两种机制进行多资产生成:"

#: ../../source/how-to/multi_asset_spawning.rst:14
msgid ""
"Rigid object collections. This allows the user to spawn multiple rigid "
"objects in each environment and access/modify them with a unified API, "
"improving performance."
msgstr "刚性物体集合。这允许用户在每个环境中生成多个刚性物体，并使用统一的API访问/修改它们，从而提高性能。"

#: ../../source/how-to/multi_asset_spawning.rst:17
msgid ""
"Spawning different assets under the same prim path. This allows the user to "
"create diverse simulations, where each environment has a different asset."
msgstr "在同一 prim 路径下生成不同的资产。这允许用户创建各种不同的模拟，其中每个环境都有不同的资产。"

#: ../../source/how-to/multi_asset_spawning.rst:20
msgid "This guide describes how to use these two mechanisms."
msgstr "本指南描述了如何使用这两种机制。"

#: ../../source/how-to/multi_asset_spawning.rst:22
msgid ""
"The sample script ``multi_asset.py`` is used as a reference, located in the "
"``IsaacLab/scripts/demos`` directory."
msgstr "示例脚本 ``multi_asset.py`` 用作参考，位于 ``IsaacLab/scripts/demos`` 目录中。"

#: ../../source/how-to/multi_asset_spawning.rst
msgid "Code for multi_asset.py"
msgstr "multi_asset.py 的代码"

#: ../../source/how-to/multi_asset_spawning.rst:33
msgid "This script creates multiple environments, where each environment has:"
msgstr "此脚本创建了多个环境，每个环境都包括:"

#: ../../source/how-to/multi_asset_spawning.rst:35
msgid "a rigid object collection containing a cone, a cube, and a sphere"
msgstr "一个包含圆锥体、立方体和球体的刚性物体集合"

#: ../../source/how-to/multi_asset_spawning.rst:36
msgid ""
"a rigid object that is either a cone, a cube, or a sphere, chosen at random"
msgstr "一个随机选择为圆锥体、立方体或球体的刚性物体"

#: ../../source/how-to/multi_asset_spawning.rst:37
msgid ""
"an articulation that is either the ANYmal-C or ANYmal-D robot, chosen at "
"random"
msgstr "一个随机选择为 ANYmal-C 或 ANYmal-D 机器人的关节"

#: ../../source/how-to/multi_asset_spawning.rst:-1
msgid "result of multi_asset.py"
msgstr "multi_asset.py 的结果"

#: ../../source/how-to/multi_asset_spawning.rst:45
msgid "Rigid Object Collections"
msgstr "刚性物体集合"

#: ../../source/how-to/multi_asset_spawning.rst:47
msgid ""
"Multiple rigid objects can be spawned in each environment and "
"accessed/modified with a unified ``(env_ids, obj_ids)`` API. While the user "
"could also create multiple rigid objects by spawning them individually, the "
"API is more user-friendly and more efficient since it uses a single physics "
"view under the hood to handle all the objects."
msgstr ""
"可以在每个环境中生成多个刚性物体，并使用统一的 ``(env_ids, obj_ids)`` API "
"进行访问/修改。虽然用户也可以通过分别生成它们来创建多个刚性物体，但该API更加用户友好且高效，因为它在底层使用单个物理视图来处理所有物体。"

#: ../../source/how-to/multi_asset_spawning.rst:56
msgid ""
"The configuration :class:`~assets.RigidObjectCollectionCfg` is used to "
"create the collection. It's attribute "
":attr:`~assets.RigidObjectCollectionCfg.rigid_objects` is a dictionary "
"containing :class:`~assets.RigidObjectCfg` objects. The keys serve as unique"
" identifiers for each rigid object in the collection."
msgstr ""
"配置 :class:`~assets.RigidObjectCollectionCfg` 用于创建集合。它的属性 "
":attr:`~assets.RigidObjectCollectionCfg.rigid_objects` 是包含 "
":class:`~assets.RigidObjectCfg` 对象的字典。键作为集合中每个刚性物体的唯一标识符。"

#: ../../source/how-to/multi_asset_spawning.rst:62
msgid "Spawning different assets under the same prim path"
msgstr "在同一 prim 路径下生成不同的资产"

#: ../../source/how-to/multi_asset_spawning.rst:64
msgid ""
"It is possible to spawn different assets and USDs under the same prim path "
"in each environment using the spawners "
":class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` and "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg`:"
msgstr ""
"在每个环境中，可以使用生成器 :class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` 和 "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg` 在相同的prim路径下生成不同的资产和USD:"

#: ../../source/how-to/multi_asset_spawning.rst:67
msgid ""
"We set the spawn configuration in :class:`~assets.RigidObjectCfg` to be "
":class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg`:"
msgstr ""
"我们将 :class:`~assets.RigidObjectCfg` 中的生成配置设置为 "
":class:`~sim.spawners.wrappers.MultiAssetSpawnerCfg` :"

#: ../../source/how-to/multi_asset_spawning.rst:75
msgid ""
"This function allows you to define a list of different assets that can be "
"spawned as rigid objects. When "
":attr:`~sim.spawners.wrappers.MultiAssetSpawnerCfg.random_choice` is set to "
"True, one asset from the list is randomly selected and spawned at the "
"specified prim path."
msgstr ""
"此函数允许您定义可以作为刚性对象生成的不同资产的列表。当 "
":attr:`~sim.spawners.wrappers.MultiAssetSpawnerCfg.random_choice` 设置为 True "
"时，将从列表中随机选择一个资产，并在指定的基本体路径上生成它。"

#: ../../source/how-to/multi_asset_spawning.rst:79
msgid ""
"Similarly, we set the spawn configuration in "
":class:`~assets.ArticulationCfg` to be "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg`:"
msgstr ""
"类似地，我们将 :class:`~assets.ArticulationCfg` 中的生成配置设置为 "
":class:`~sim.spawners.wrappers.MultiUsdFileCfg` :"

#: ../../source/how-to/multi_asset_spawning.rst:87
msgid ""
"Similar to before, this configuration allows the selection of different USD "
"files representing articulated assets."
msgstr "与之前类似，此配置允许选择代表关节资产的不同 USD 文件。"

#: ../../source/how-to/multi_asset_spawning.rst:91
msgid "Things to Note"
msgstr "需要注意的事项"

#: ../../source/how-to/multi_asset_spawning.rst:94
msgid "Similar asset structuring"
msgstr "相似的资产结构"

#: ../../source/how-to/multi_asset_spawning.rst:96
msgid ""
"While spawning and handling multiple assets using the same physics interface"
" (the rigid object or articulation classes), it is essential to have the "
"assets at all the prim locations follow a similar structure. In case of an "
"articulation, this means that they all must have the same number of links "
"and joints, the same number of collision bodies and the same names for them."
" If that is not the case, the physics parsing of the prims can get affected "
"and fail."
msgstr ""
"在使用相同的物理接口（刚性对象或关节类）生成和处理多个资产时，必须确保所有基本体路径上的资产遵循相似的结构。对于关节来说，这意味着它们都必须具有相同数量的链接和关节、相同数量的碰撞体，以及相同的名称。如果不是这种情况，基本体的物理解析可能会受到影响并且失败。"

#: ../../source/how-to/multi_asset_spawning.rst:101
msgid ""
"The main purpose of this functionality is to enable the user to create "
"randomized versions of the same asset, for example robots with different "
"link lengths, or rigid objects with different collider shapes."
msgstr "此功能的主要目的是使用户能够创建相同资产的随机版本，例如具有不同链接长度的机器人，或具有不同碰撞器形状的刚性对象。"

#: ../../source/how-to/multi_asset_spawning.rst:105
msgid "Disabling physics replication in interactive scene"
msgstr "在交互式场景中禁用物理复制"

#: ../../source/how-to/multi_asset_spawning.rst:107
msgid ""
"By default, the flag :attr:`scene.InteractiveScene.replicate_physics` is set"
" to True. This flag informs the physics engine that the simulation "
"environments are copies of one another so it just needs to parse the first "
"environment to understand the entire simulation scene. This helps speed up "
"the simulation scene parsing."
msgstr ""
"默认情况下，标志 :attr:`scene.InteractiveScene.replicate_physics` 被设置为 "
"True。此标志告知物理引擎模拟环境是彼此的副本，因此只需解析第一个环境即可了解整个模拟场景。这有助于加快模拟场景的解析速度。"

#: ../../source/how-to/multi_asset_spawning.rst:111
msgid ""
"However, in the case of spawning different assets in different environments,"
" this assumption does not hold anymore. Hence the flag "
":attr:`scene.InteractiveScene.replicate_physics` must be disabled."
msgstr ""
"但是，在不同环境中生成不同的资产的情况下，这一假设不再成立。因此，必须禁用标志 "
":attr:`scene.InteractiveScene.replicate_physics` 。"

#: ../../source/how-to/multi_asset_spawning.rst:120
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/how-to/multi_asset_spawning.rst:122
msgid ""
"To execute the script with multiple environments and randomized assets, use "
"the following command:"
msgstr "要执行带有多个环境和随机资产的脚本，请使用以下命令:"

#: ../../source/how-to/multi_asset_spawning.rst:128
msgid ""
"This command runs the simulation with 2048 environments, each with randomly "
"selected assets. To stop the simulation, you can close the window, or press "
"``Ctrl+C`` in the terminal."
msgstr "此命令运行具有 2048 个环境的模拟场景，每个环境都具有随机选择的资产。要停止模拟，可以关闭窗口或在终端中按下 ``Ctrl+C`` 。"
