# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-31 19:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/refs/troubleshooting.rst:2
msgid "Tricks and Troubleshooting"
msgstr "技巧和故障排除"

#: ../../source/refs/troubleshooting.rst:6
msgid ""
"The following lists some of the common tricks and troubleshooting methods "
"that we use in our common workflows. Please also check the `troubleshooting "
"page on Omniverse <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/linux_troubleshooting.html>`__ for more assistance."
msgstr ""
"以下列出了我们在日常工作流程中使用的一些常见技巧和故障排除方法。请同时查看 `Omniverse 上的故障排除页面 "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/linux_troubleshooting.html>`__ 以获取更多帮助。"

#: ../../source/refs/troubleshooting.rst:13
msgid "Debugging physics simulation stability issues"
msgstr "调试物理仿真稳定性问题"

#: ../../source/refs/troubleshooting.rst:15
msgid ""
"When importing new robots into Isaac Lab or setting up a new environment, "
"simulation instability can often appear if the assets have not been tuned "
"with reasonable simulation parameters. In reinforcement learning scenarios, "
"this will often result in NaNs propagating into the learning pipeline due to"
" invalid states in the simulation."
msgstr ""
"当将新机器人导入到 Isaac Lab "
"或设置新环境时，如果资产没有通过合理的仿真参数进行调优，仿真不稳定性往往会出现。在强化学习场景中，这通常会导致由于仿真中的无效状态，NaN "
"在学习流程中传播。"

#: ../../source/refs/troubleshooting.rst:20
msgid ""
"If this happens, we recommend consulting the `Articulation and Robot "
"Simulation Stability Guide "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/dev_guide/guides/articulation_stability_guide.html>`_"
" which recommends various simulation parameters and best practices to "
"achieve better stability in robot simulations."
msgstr ""
"如果发生这种情况，我们建议参考 `关节和机器人仿真稳定性指南 "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/dev_guide/guides/articulation_stability_guide.html>`_"
" ，该指南推荐了各种仿真参数和最佳实践，以实现机器人仿真中的更好稳定性。"

#: ../../source/refs/troubleshooting.rst:24
msgid ""
"Additionally, `Omniverse PhysX Visual Debugger "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/extensions/ux/source/omni.physx.pvd/docs/dev_guide/physx_visual_debugger.html>`_"
" allows for recording of data of PhysX simulations, which can often help "
"simulation issues and aid the debugging process."
msgstr ""
"此外， `Omniverse PhysX 可视化调试器 "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/extensions/ux/source/omni.physx.pvd/docs/dev_guide/physx_visual_debugger.html>`_"
" 允许记录 PhysX 仿真数据，这通常有助于解决仿真问题并辅助调试过程。"

#: ../../source/refs/troubleshooting.rst:27
msgid ""
"To enable OmniPVD capture in Isaac Lab, add the relevant kit arguments to "
"the command line prompt when launching an Isaac Lab process"
msgstr "要在 Isaac Lab 中启用 OmniPVD 捕获，在启动 Isaac Lab 进程时，将相关的 kit 参数添加到命令行提示符中。"

#: ../../source/refs/troubleshooting.rst:35
msgid "Checking the internal logs from the simulator"
msgstr "从模拟器的内部日志中检查"

#: ../../source/refs/troubleshooting.rst:37
msgid ""
"When running the simulator from a standalone script, it logs warnings and "
"errors to the terminal. At the same time, it also logs internal messages to "
"a file. These are useful for debugging and understanding the internal state "
"of the simulator. Depending on your system, the log file can be found in the"
" locations listed `here "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_faq.html#common-"
"path-locations>`_."
msgstr ""
"在从独立脚本运行模拟器时，它会将警告和错误记录到终端。同时，它还会将内部消息记录到文件中。这些对于调试和了解模拟器的内部状态很有帮助。根据您的系统，日志文件可以在列出的位置找到"
" `这里 "
"<https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_faq.html#common-"
"path-locations>`_ 。"

#: ../../source/refs/troubleshooting.rst:42
msgid ""
"To obtain the exact location of the log file, you need to check the first "
"few lines of the terminal output when you run the standalone script. The log"
" file location is printed at the start of the terminal output. For example:"
msgstr "要获取日志文件的确切位置，您需要检查运行独立脚本时终端输出的前几行。日志文件位置会在终端输出开始时打印出来。例如: "

#: ../../source/refs/troubleshooting.rst:54
msgid ""
"In the above example, the log file is located at ``.../logs/Kit/Isaac-"
"Sim/2023.1/kit_20240328_183346.log``, ``...`` is the path to the user's log "
"directory. The log file is named ``kit_20240328_183346.log``"
msgstr ""
"在上面的示例中，日志文件位于 ``.../logs/Kit/Isaac-Sim/2023.1/kit_20240328_183346.log`` ， "
"``...`` 是用户日志目录的路径。日志文件名为 ``kit_20240328_183346.log``"

#: ../../source/refs/troubleshooting.rst:57
msgid ""
"You can open this file to check the internal logs from the simulator. Also "
"when reporting issues, please include this log file to help us debug the "
"issue."
msgstr "您可以打开此文件以查看模拟器的内部日志。此外，在报告问题时，请包括此日志文件以帮助我们调试问题。"

#: ../../source/refs/troubleshooting.rst:61
msgid "Changing logging channel levels for the simulator"
msgstr "更改模拟器的日志记录通道级别"

#: ../../source/refs/troubleshooting.rst:63
msgid ""
"By default, the simulator logs messages at the ``WARN`` level and above on "
"the terminal. You can change the logging channel levels to get more detailed"
" logs. The logging channel levels can be set through Omniverse's logging "
"system."
msgstr ""
"默认情况下，模拟器在终端上记录 ``WARN`` 级别及以上的消息。您可以更改日志通道级别以获得更详细的日志。日志通道级别可以通过 Omniverse "
"的日志系统进行设置。"

#: ../../source/refs/troubleshooting.rst:66
msgid ""
"To obtain more detailed logs, you can run your application with the "
"following flags:"
msgstr "要获取更详细的日志，您可以使用以下标志运行应用程序:"

#: ../../source/refs/troubleshooting.rst:68
msgid "``--info``: This flag logs messages at the ``INFO`` level and above."
msgstr "``--info``: 此标志记录 ``INFO`` 级别及以上的消息。"

#: ../../source/refs/troubleshooting.rst:69
msgid ""
"``--verbose``: This flag logs messages at the ``VERBOSE`` level and above."
msgstr "``--verbose``: 此标志记录 ``VERBOSE`` 级别及以上的消息。"

#: ../../source/refs/troubleshooting.rst:71
msgid ""
"For instance, to run a standalone script with verbose logging, you can use "
"the following command:"
msgstr "例如，要以详细记录方式运行独立脚本，可以使用以下命令:"

#: ../../source/refs/troubleshooting.rst:78
msgid ""
"For more fine-grained control, you can modify the logging channels through "
"the ``omni.log`` module. For more information, please refer to its "
"`documentation "
"<https://docs.omniverse.nvidia.com/kit/docs/carbonite/latest/docs/omni.log/Logging.html>`__."
msgstr ""
"要进行更精细的控制，您可以通过 ``omni.log`` 模块修改日志通道。有关更多信息，请参阅其 `文档 "
"<https://docs.omniverse.nvidia.com/kit/docs/carbonite/latest/docs/omni.log/Logging.html>`__"
" 。"

#: ../../source/refs/troubleshooting.rst:82
msgid "Using CPU Scaling Governor for performance"
msgstr "使用 CPU 缩放调度程序以获取性能"

#: ../../source/refs/troubleshooting.rst:84
msgid ""
"By default on many systems, the CPU frequency governor is set to “powersave”"
" mode, which sets the CPU to lowest static frequency. To increase the "
"maximum performance, we recommend setting the CPU frequency governor to "
"“performance” mode. For more details, please check the the link `here "
"<https://access.redhat.com/documentation/en-"
"us/red_hat_enterprise_linux/7/html/power_management_guide/cpufreq_governors>`__."
msgstr ""
"默认情况下，在许多系统上，CPU 频率调度程序设置为“省电”模式，它将 CPU 设置为最低静态频率。为了提高最大性能，我们建议将 CPU "
"频率调度程序设置为“性能”模式。有关更多详细信息，请查看这个链接 `这里 "
"<https://access.redhat.com/documentation/en-"
"us/red_hat_enterprise_linux/7/html/power_management_guide/cpufreq_governors>`__"
" 。"

#: ../../source/refs/troubleshooting.rst:92
msgid ""
"We advice not to set the governor to “performance” mode on a system with "
"poor cooling (such as laptops), since it may cause the system to overheat."
msgstr "我们建议不要在散热不佳的系统上（如笔记本电脑）将调度程序设置为“性能”模式，因为这可能会导致系统过热。"

#: ../../source/refs/troubleshooting.rst:95
msgid "To view existing ``scaling_governor`` value per CPU:"
msgstr "查看每个 CPU 的现有 ``scaling_governor`` 值: "

#: ../../source/refs/troubleshooting.rst:101
msgid "To change the governor to “performance” mode for each CPU:"
msgstr "将每个 CPU 的调度程序更改为“性能”模式: "

#: ../../source/refs/troubleshooting.rst:109
msgid "Observing long load times at the start of the simulation"
msgstr "观察模拟开始时的长加载时间"

#: ../../source/refs/troubleshooting.rst:111
msgid ""
"The first time you run the simulator, it will take a long time to load up. "
"This is because the simulator is compiling shaders and loading assets. "
"Subsequent runs should be faster to start up, but may still take some time."
msgstr "第一次运行模拟器时，启动需要很长时间。这是因为模拟器正在编译着色器和加载资源。后续运行应该会更快启动，但可能仍需要一些时间。"

#: ../../source/refs/troubleshooting.rst:115
msgid ""
"Please note that once the Isaac Sim app loads, the environment creation time"
" may scale linearly with the number of environments. Please expect a longer "
"load time if running with thousands of environments or if each environment "
"contains a larger number of assets. We are continually working on improving "
"the time needed for this."
msgstr ""
"请注意，一旦 Isaac Sim "
"应用加载，环境创建时间可能会随着环境数量线性增加。如果运行数千个环境或每个环境包含较多资产，则请期待更长的加载时间。我们一直在努力改进所需的时间。"

#: ../../source/refs/troubleshooting.rst:120
msgid ""
"When an instance of Isaac Sim is already running, launching another Isaac "
"Sim instance in a different process may appear to hang at startup for the "
"first time. Please be patient and give it some time as the second process "
"will take longer to start up due to slower shader compilation."
msgstr ""
"当一个 Isaac Sim 实例已经在运行时，在不同进程中启动另一个 Isaac Sim "
"实例可能会在首次启动时出现挂起的情况。请耐心等待一段时间，因为第二个进程启动时间会较长，由于着色器编译较慢。"

#: ../../source/refs/troubleshooting.rst:126
msgid "Receiving a “PhysX error” when running simulation on GPU"
msgstr "在 GPU 上运行模拟时收到 “PhysX error”"

#: ../../source/refs/troubleshooting.rst:128
msgid ""
"When using the GPU pipeline, the buffers used for the physics simulation are"
" allocated on the GPU only once at the start of the simulation. This means "
"that they do not grow dynamically as the number of collisions or objects in "
"the scene changes. If the number of collisions or objects in the scene "
"exceeds the size of the buffers, the simulation will fail with an error such"
" as the following:"
msgstr ""
"使用 GPU pipeline 时，用于物理模拟的缓冲区仅在模拟开始时在 GPU "
"上分配一次。这意味着它们在场景中的碰撞或对象数量发生变化时不会动态增长。如果场景中的碰撞或对象数量超过缓冲区的大小，模拟将失败，并显示如下错误: "

#: ../../source/refs/troubleshooting.rst:138
msgid ""
"In this case, you need to increase the size of the buffers passed to the "
":class:`~isaaclab.sim.SimulationContext` class. The size of the buffers can "
"be increased by setting the "
":attr:`~isaaclab.sim.PhysxCfg.gpu_found_lost_pairs_capacity` parameter in "
"the :class:`~isaaclab.sim.PhysxCfg` class. For example, to increase the size"
" of the buffers to 4096, you can use the following code:"
msgstr ""
"在这种情况下，您需要增加传递给 :class:`~isaaclab.sim.SimulationContext` 类的缓冲区大小。可以通过设置 "
":class:`~isaaclab.sim.PhysxCfg` 类中的 "
":attr:`~isaaclab.sim.PhysxCfg.gpu_found_lost_pairs_capacity` "
"参数来增加缓冲区的大小。例如，为了将缓冲区的大小增加到 4096，您可以使用以下代码: "

#: ../../source/refs/troubleshooting.rst:152
msgid ""
"Please see the documentation for :class:`~isaaclab.sim.SimulationCfg` for "
"more details on the parameters that can be used to configure the simulation."
msgstr "请查看 :class:`~isaaclab.sim.SimulationCfg` 的文档，了解可用于配置模拟的参数的更多详细信息。"

#: ../../source/refs/troubleshooting.rst:157
msgid "Preventing memory leaks in the simulator"
msgstr "预防模拟器中的内存泄漏"

#: ../../source/refs/troubleshooting.rst:159
msgid ""
"Memory leaks in the Isaac Sim simulator can occur when C++ callbacks are "
"registered with Python objects. This happens when callback functions within "
"classes maintain references to the Python objects they are associated with. "
"As a result, Python's garbage collection is unable to reclaim memory "
"associated with these objects, preventing the corresponding C++ objects from"
" being destroyed. Over time, this can lead to memory leaks and increased "
"resource usage."
msgstr ""
"当在 Python 对象中注册 C++ 回调时，Isaac Sim 模拟器中可能会发生内存泄漏。当类中的回调函数与其关联的 Python "
"对象保持引用时会发生这种情况。结果是，Python 的垃圾回收无法回收与这些对象相关联的内存，从而阻止了相应的 C++ "
"对象被销毁。随着时间的推移，这可能导致内存泄漏和资源使用量增加。"

#: ../../source/refs/troubleshooting.rst:165
msgid ""
"To prevent memory leaks in the Isaac Sim simulator, it is essential to use "
"weak references when registering callbacks with the simulator. This ensures "
"that Python objects can be garbage collected when they are no longer needed,"
" thereby avoiding memory leaks. The `weakref "
"<https://docs.python.org/3/library/weakref.html>`_ module from the Python "
"standard library can be employed for this purpose."
msgstr ""
"为了防止 Isaac Sim 模拟器中的内存泄漏，务必在向模拟器注册回调时使用弱引用。这可以确保在不再需要时可以对 Python "
"对象进行垃圾回收，从而避免内存泄漏。Python 标准库中的 `weakref "
"<https://docs.python.org/3/library/weakref.html>`_ 模块可用于此目的。"

#: ../../source/refs/troubleshooting.rst:171
msgid ""
"For example, consider a class with a callback function ``on_event_callback``"
" that needs to be registered with the simulator. If you use a strong "
"reference to the ``MyClass`` object when passing the callback, the reference"
" count of the ``MyClass`` object will be incremented. This prevents the "
"``MyClass`` object from being garbage collected when it is no longer needed,"
" i.e., the ``__del__`` destructor will not be called."
msgstr ""
"例如，考虑一个具有需要向模拟器注册的回调函数 ``on_event_callback`` 的类。如果在传递回调时对 ``MyClass`` "
"对象使用强引用，则会增加 ``MyClass`` 对象的引用计数。这会防止在不再需要时对 ``MyClass`` 对象进行垃圾回收，即不会调用 "
"``__del__`` 析构函数。"

#: ../../source/refs/troubleshooting.rst:196
msgid ""
"To fix this issue, it's crucial to employ weak references when registering "
"the callback. While this approach adds some verbosity to the code, it "
"ensures that the ``MyClass`` object can be garbage collected when no longer "
"in use. Here's the modified code:"
msgstr ""
"要解决此问题，关键是在注册回调时使用弱引用。虽然这种方法会使代码变得冗长，但它确保在不再使用时可以对 ``MyClass`` "
"对象进行垃圾回收。以下是修改后的代码: "

#: ../../source/refs/troubleshooting.rst:220
msgid ""
"In this revised code, the weak reference ``weakref.proxy(self)`` is used "
"when registering the callback, allowing the ``MyClass`` object to be "
"properly garbage collected."
msgstr ""
"在这个修改后的代码中，当注册回调时使用弱引用 ``weakref.proxy(self)`` ，使得 ``MyClass`` 对象可以被正确地垃圾回收。"

#: ../../source/refs/troubleshooting.rst:223
msgid ""
"By following this pattern, you can prevent memory leaks and maintain a more "
"efficient and stable simulation."
msgstr "通过遵循这种模式，您可以防止内存泄漏，并保持更高效和稳定的模拟。"

#: ../../source/refs/troubleshooting.rst:227
msgid "Understanding the error logs from crashes"
msgstr "理解崩溃产生的错误日志"

#: ../../source/refs/troubleshooting.rst:229
msgid ""
"Many times the simulator crashes due to a bug in the implementation. This "
"swamps the terminal with exceptions, some of which are coming from the "
"python interpreter calling ``__del__()`` destructor of the simulation "
"application. These typically look like the following:"
msgstr ""
"许多情况下，模拟器由于实现中的错误而崩溃。这会导致终端输出异常，其中一些异常来自 Python 解释器调用 ``__del__()`` "
"析构函数模拟应用程序。通常看起来如下: "

#: ../../source/refs/troubleshooting.rst:271
msgid ""
"This is a known error with running standalone scripts with the Isaac Sim "
"simulator. Please scroll above the exceptions thrown with ``registry`` to "
"see the actual error log."
msgstr "这是使用 Isaac Sim 模拟器运行独立脚本时出现的已知错误。请向上滚动异常抛出的 ``registry`` 以查看实际错误日志。"

#: ../../source/refs/troubleshooting.rst:275
msgid "In the above case, the actual error is:"
msgstr "在上述情况中，实际错误是: "
