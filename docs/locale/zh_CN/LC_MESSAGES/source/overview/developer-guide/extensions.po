# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-21 01:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/overview/developer-guide/extensions.rst:2
msgid "Extensions"
msgstr "扩展 `Extensions`"

#: ../../source/overview/developer-guide/extensions.rst:4
msgid ""
"Extensions are the recommended way to develop applications in Isaac Sim. "
"They are modularized packages that formulate the Omniverse ecosystem. Each "
"extension provides a set of functionalities that can be used by other "
"extensions or standalone applications. A folder is recognized as an "
"extension if it contains an ``extension.toml`` file in the ``config`` "
"directory. More information on extensions can be found in the `Omniverse "
"documentation <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
"扩展是开发应用程序在 Isaac Sim 中的推荐方式。它们是模块化的包，形成了 Omniverse "
"生态系统。每个扩展提供了一组功能，可供其他扩展或独立应用程序使用。如果一个文件夹包含 ``extension.toml`` 文件在 ``config``"
" 目录中，则该文件夹被识别为扩展。有关扩展的更多信息，请参阅 `Omniverse documentation "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__。"

#: ../../source/overview/developer-guide/extensions.rst:11
msgid ""
"Isaac Lab in itself provides extensions for robot learning. These are "
"written into the ``source/extensions`` directory. Each extension is written "
"as a python package and follows the following structure:"
msgstr ""
"Isaac Lab 本身提供了用于机器人学习的扩展。 这些扩展写入 ``source/extensions`` 目录。 每个扩展都编写为一个 "
"Python 包，并遵循以下结构："

#: ../../source/overview/developer-guide/extensions.rst:30
msgid ""
"The ``config/extension.toml`` file contains the metadata of the extension. "
"This includes the name, version, description, dependencies, etc. This "
"information is used by Omniverse to load the extension. The ``docs`` "
"directory contains the documentation for the extension with more detailed "
"information about the extension and a CHANGELOG file that contains the "
"changes made to the extension in each version."
msgstr ""
"``config/extension.toml`` 文件包含扩展的元数据。包括名称、版本、描述、依赖关系等。Omniverse 使用这些信息来加载扩展。"
" ``docs`` 目录包含有关扩展的文档，其中包括有关扩展的更详细信息以及包含每个版本中对扩展进行的更改的 CHANGELOG 文件。"

#: ../../source/overview/developer-guide/extensions.rst:36
msgid ""
"The ``<extension-name>`` directory contains the main python package for the "
"extension. It may also contains the ``scripts`` directory for keeping "
"python-based applications that are loaded into Omniverse when then extension"
" is enabled using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
"``<extension-name>`` 目录包含扩展的主要 python 包。它还可能包含 ``scripts`` 目录，用于存放在扩展通过 "
"`Extension Manager <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__ 启用时加载到 Omniverse 的基于 python "
"的应用程序。"

#: ../../source/overview/developer-guide/extensions.rst:41
msgid ""
"More specifically, when an extension is enabled, the python module specified"
" in the ``config/extension.toml`` file is loaded and scripts that contains "
"children of the :class:`omni.ext.IExt` class are executed."
msgstr ""
"更具体地说，当扩展被启用时，加载``config/extension.toml``文件中指定的Python模块，并执行包含:class:`omni.ext.IExt`类子类的脚本。"

#: ../../source/overview/developer-guide/extensions.rst:63
msgid ""
"While loading extensions into Omniverse happens automatically, using the "
"python package in standalone applications requires additional steps. To "
"simplify the build process and avoiding the need to understand the `premake "
"<https://premake.github.io/>`__ build system used by Omniverse, we directly "
"use the `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ python"
" package to build the python module provided by the extensions. This is done"
" by the ``setup.py`` file in the extension directory."
msgstr ""
"在Omniverse中自动加载扩展，但在独立应用程序中使用python软件包需要额外的步骤。为了简化构建过程并避免理解Omniverse使用的`premake"
" <https://premake.github.io/>`__构建系统的需求，我们直接使用`setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ "
"python软件包来构建扩展提供的python模块。这是通过扩展目录中的``setup.py``文件来完成的。"

#: ../../source/overview/developer-guide/extensions.rst:72
msgid ""
"The ``setup.py`` file is not required for extensions that are only loaded "
"into Omniverse using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__."
msgstr ""
"``setup.py`` 文件对于仅通过 `Extension Manager "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__ 加载到 Omniverse 的扩展不是必需的。"

#: ../../source/overview/developer-guide/extensions.rst:75
msgid ""
"Lastly, the ``tests`` directory contains the unit tests for the extension. "
"These are written using the `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ framework. It is "
"important to note that Omniverse also provides a similar `testing framework "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__. However, it requires going "
"through the build process and does not support testing of the python module "
"in standalone applications."
msgstr ""
"最后，``tests`` 目录包含扩展的单元测试。这些测试是使用 `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ 框架编写的。值得注意的是，Omniverse "
"还提供了类似的 `testing framework <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__。然而，它需要经过构建过程，并且不支持在独立应用程序中测试"
" Python 模块。"

#: ../../source/overview/developer-guide/extensions.rst:83
msgid "Extension Dependency Management"
msgstr "扩展依赖管理"

#: ../../source/overview/developer-guide/extensions.rst:85
msgid ""
"Certain extensions may have dependencies which require installation of "
"additional packages before the extension can be used. While Python "
"dependencies are handled by the `setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ package and specified in "
"the ``setup.py`` file, non-Python dependencies such as `ROS "
"<https://www.ros.org/>`__ packages or `apt "
"<https://en.wikipedia.org/wiki/APT_(software)>`__ packages are not handled "
"by setuptools. To handle these dependencies, we have created an additional "
"setup procedure described in the next section."
msgstr ""
"某些扩展可能有依赖项，这些依赖项需要在扩展可用之前安装额外的包。虽然 Python 依赖项由 ``setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ 包处理，并在 ``setup.py`` "
"文件中指定，但非 Python 依赖项，例如 `ROS <https://www.ros.org/>`__ 包或 `apt "
"<https://en.wikipedia.org/wiki/APT_(software)>`__ 包并不由 setuptools "
"处理。为了处理这些依赖项，我们创建了一个额外的安装程序，详细描述见下一部分。"

#: ../../source/overview/developer-guide/extensions.rst:91
msgid ""
"There are two types of dependencies that can be specified in the "
"``extension.toml`` file under the ``isaac_lab_settings`` section:"
msgstr "在 ``isaac_lab_settings`` 部分的 ``extension.toml`` 文件中，可以指定两种类型的依赖项："

#: ../../source/overview/developer-guide/extensions.rst:94
msgid ""
"**apt_deps**: A list of apt packages that need to be installed. These are "
"installed using the `apt <https://ubuntu.com/server/docs/package-"
"management>`__ package manager."
msgstr ""
"**apt_deps**: 需要安装的apt软件包列表。这些软件包使用`apt "
"<https://ubuntu.com/server/docs/package-management>`__软件包管理器安装。"

#: ../../source/overview/developer-guide/extensions.rst:96
msgid ""
"**ros_ws**: The path to the ROS workspace that contains the ROS packages. "
"These are installed using the `rosdep "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ "
"dependency manager."
msgstr ""
"**ros_ws**: 包含 ROS 包的 ROS 工作空间的路径。这些包是使用 `rosdep "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ "
"依赖管理器安装的。"

#: ../../source/overview/developer-guide/extensions.rst:99
msgid ""
"As an example, the following ``extension.toml`` file specifies the "
"dependencies for the extension:"
msgstr "作为一个例子，以下的``extension.toml``文件指定了扩展的依赖关系："

#: ../../source/overview/developer-guide/extensions.rst:111
msgid ""
"These dependencies are installed using the ``install_deps.py`` script "
"provided in the ``tools`` directory. To install all dependencies for all "
"extensions, run the following command:"
msgstr ""
"这些依赖项是使用``tools``目录中提供的``install_deps.py``脚本安装的。要为所有扩展安装所有依赖项，请运行以下命令："

#: ../../source/overview/developer-guide/extensions.rst:122
msgid ""
"Currently, this script is automatically executed during the build process of"
" the ``Dockerfile.base`` and ``Dockerfile.ros2``. This ensures that all the "
"'apt' and 'rosdep' dependencies are installed before building the extensions"
" respectively."
msgstr ""
"目前，此脚本在 ``Dockerfile.base`` 和 ``Dockerfile.ros2`` "
"的构建过程中自动执行。这确保在分别构建扩展之前，所有的 'apt' 和 'rosdep' 依赖项都已安装。"

#: ../../source/overview/developer-guide/extensions.rst:128
msgid "Standalone applications"
msgstr "独立应用`Standalone applications`"

#: ../../source/overview/developer-guide/extensions.rst:130
msgid ""
"In a typical Omniverse workflow, the simulator is launched first, after "
"which the extensions are enabled that load the python module and run the "
"python application. While this is a recommended workflow, it is not always "
"possible to use this workflow. For example, for robot learning, it is "
"essential to have complete control over simulation stepping and all the "
"other functionalities instead of asynchronously waiting for the simulator to"
" step. In such cases, it is necessary to write a standalone application that"
" launches the simulator using :class:`~omni.isaac.lab.app.AppLauncher` and "
"allows complete control over the simulation through the "
":class:`~omni.isaac.lab.sim.SimulationContext` class."
msgstr ""
"在典型的Omniverse工作流程中，模拟器首先启动，然后启用扩展，加载Python模块并运行Python应用程序。虽然这是推荐的工作流程，但并非总是可能使用这种工作流程。例如，对于机器人学习，必须完全控制模拟步进和所有其他功能，而不是异步等待模拟器进行步进。在这种情况下，需要编写一个独立的应用程序，使用:class:`~omni.isaac.lab.app.AppLauncher`启动模拟器，并通过:class:`~omni.isaac.lab.sim.SimulationContext`类完全控制模拟。"

#: ../../source/overview/developer-guide/extensions.rst:168
msgid ""
"The ``source/standalone`` directory contains various standalone applications"
" designed using the extensions provided by ``Isaac Lab``. These applications"
" are written in python and are structured as follows:"
msgstr ""
"``source/standalone`` 目录包含各种使用 ``Isaac Lab`` 提供的扩展设计的独立应用程序。这些应用程序是用 python "
"编写的，其结构如下："

#: ../../source/overview/developer-guide/extensions.rst:171
msgid ""
"**demos**: Contains various demo applications that showcase the core "
"framework ``omni.isaac.lab``."
msgstr "**演示**: 包含展示核心框架 ``omni.isaac.lab`` 的各种演示应用程序。"

#: ../../source/overview/developer-guide/extensions.rst:172
msgid ""
"**environments**: Contains applications for running environments defined in "
"``omni.isaac.lab_tasks`` with different agents. These include a random "
"policy, zero-action policy, teleoperation or scripted state machines."
msgstr ""
"**environments**：包含在``omni.isaac.lab_tasks``中定义的环境运行应用程序，其中包括随机策略，零动作策略，远程操作或脚本状态机。"

#: ../../source/overview/developer-guide/extensions.rst:174
msgid ""
"**tools**: Contains applications for using the tools provided by the "
"framework. These include converting assets, generating datasets, etc."
msgstr "**工具**：包含使用框架提供的工具的应用程序。这些包括转换资产，生成数据集等。"

#: ../../source/overview/developer-guide/extensions.rst:176
msgid ""
"**tutorials**: Contains step-by-step tutorials for using the APIs provided "
"by the framework."
msgstr "**教程**: 包含框架提供的 API 的逐步教程。"

#: ../../source/overview/developer-guide/extensions.rst:177
msgid ""
"**workflows**: Contains applications for using environments with various "
"learning-based frameworks. These include different reinforcement learning or"
" imitation learning libraries."
msgstr "**工作流**: 包含用于使用各种基于学习的框架的环境的应用程序。这些包括不同的强化学习或模仿学习库。"
