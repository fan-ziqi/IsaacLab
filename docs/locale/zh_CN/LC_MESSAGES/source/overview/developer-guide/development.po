# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-03 13:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/overview/developer-guide/development.rst:2
msgid "Extension Development"
msgstr "扩展开发"

#: ../../source/overview/developer-guide/development.rst:4
msgid ""
"Everything in Omniverse is either an extension or a collection of extensions"
" (an application). They are modularized packages that form the atoms of the "
"Omniverse ecosystem. Each extension provides a set of functionalities that "
"can be used by other extensions or standalone applications. A folder is "
"recognized as an extension if it contains an ``extension.toml`` file in the "
"``config`` directory. More information on extensions can be found in the "
"`Omniverse documentation <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
"在 Omniverse 中，一切都是扩展，或扩展的集合（即应用程序）。它们是模块化的包，构成了 Omniverse "
"生态系统的原子。每个扩展提供一组功能，其他扩展或独立应用程序可以使用这些功能。如果一个文件夹在 ``config`` 目录中包含 "
"``extension.toml`` 文件，则该文件夹被识别为扩展。有关扩展的更多信息，请参阅 `Omniverse文档 "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__ 。"

#: ../../source/overview/developer-guide/development.rst:11
msgid ""
"Each extension in Isaac Lab is written as a python package and follows the "
"following structure:"
msgstr "每个Isaac Lab中的扩展都被编写为一个python包，并且遵循以下结构: "

#: ../../source/overview/developer-guide/development.rst:28
msgid ""
"The ``config/extension.toml`` file contains the metadata of the extension. "
"This includes the name, version, description, dependencies, etc. This "
"information is used by the Omniverse API to load the extension. The ``docs``"
" directory contains the documentation for the extension with more detailed "
"information about the extension and a CHANGELOG file that contains the "
"changes made to the extension in each version."
msgstr ""
"``config/extension.toml`` 文件包含扩展的元数据。这包括名称、版本、描述、依赖关系等。Omniverse API "
"使用此信息来加载扩展。 ``docs`` 目录包含有关扩展的文档，其中包括有关扩展的更详细信息以及一个包含扩展在每个版本中所做更改的 CHANGELOG"
" 文件。"

#: ../../source/overview/developer-guide/development.rst:34
msgid ""
"The ``<extension-name>`` directory contains the main python package for the "
"extension. It may also contain the ``scripts`` directory for keeping python-"
"based applications that are loaded into Omniverse when the extension is "
"enabled using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__."
msgstr ""
"``<extension-name>`` 目录包含扩展的主要 Python 包。它也可能包含 ``scripts`` 目录，用于存放在启用扩展时加载到 "
"Omniverse 中的基于 Python 的应用程序，使用 `Extension Manager "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/extensions_basic.html>`__ 。"

#: ../../source/overview/developer-guide/development.rst:39
msgid ""
"More specifically, when an extension is enabled, the python module specified"
" in the ``config/extension.toml`` file is loaded and scripts that contain "
"children of the :class:`omni.ext.IExt` class are executed."
msgstr ""
"更具体地说，当启用扩展时，将加载 ``config/extension.toml`` 文件中指定的python模块，并执行包含 "
":class:`omni.ext.IExt` 类子类的脚本。"

#: ../../source/overview/developer-guide/development.rst:61
msgid ""
"While loading extensions into Omniverse happens automatically, using the "
"python package in standalone applications requires additional steps. To "
"simplify the build process and avoid the need to understand the `premake "
"<https://premake.github.io/>`__ build system used by Omniverse, we directly "
"use the `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ python"
" package to build the python module provided by the extensions. This is done"
" by the ``setup.py`` file in the extension directory."
msgstr ""
"在 Omniverse 中，加载扩展是自动完成的，但在独立应用程序中使用 Python 包需要额外的步骤。为了简化构建过程并避免需要理解 "
"Omniverse 使用的 `premake <https://premake.github.io/>`__ 构建系统，我们直接使用 "
"`setuptools <https://setuptools.readthedocs.io/en/latest/>`__ Python "
"包来构建扩展提供的 Python 模块。这是通过扩展目录中的 ``setup.py`` 文件完成的。"

#: ../../source/overview/developer-guide/development.rst:70
msgid ""
"The ``setup.py`` file is not required for extensions that are only loaded "
"into Omniverse using the `Extension Manager "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__."
msgstr ""
"``setup.py`` 文件不是必需的，只有在使用 `Extension Manager "
"<https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-"
"manager.html>`__ 将扩展加载到 Omniverse 中时才需要。"

#: ../../source/overview/developer-guide/development.rst:73
msgid ""
"Lastly, the ``tests`` directory contains the unit tests for the extension. "
"These are written using the `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ framework. It is "
"important to note that Omniverse also provides a similar `testing framework "
"<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__. However, it requires going "
"through the build process and does not support testing of the python module "
"in standalone applications."
msgstr ""
"最后， ``tests`` 目录包含了该扩展的单元测试。这些测试是使用 `unittest "
"<https://docs.python.org/3/library/unittest.html>`__ 框架编写的。需要注意的是，Omniverse "
"也提供了类似的 `测试框架 <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/104.0/guide/testing_exts_python.html>`__ "
"。然而，它需要经过构建过程，并且不支持在独立应用程序中对python模块进行测试。"

#: ../../source/overview/developer-guide/development.rst:81
msgid "Custom Extension Dependency Management"
msgstr "自定义扩展依赖管理"

#: ../../source/overview/developer-guide/development.rst:83
msgid ""
"Certain extensions may have dependencies which require the installation of "
"additional packages before the extension can be used. While Python "
"dependencies are handled by the `setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ package and specified in "
"the ``setup.py`` file, non-Python dependencies such as `ROS "
"<https://www.ros.org/>`__ packages or `apt "
"<https://en.wikipedia.org/wiki/APT_(software)>`__ packages are not handled "
"by setuptools. Handling these kinds of dependencies requires an additional "
"procedure."
msgstr ""
"某些扩展可能具有依赖项，需要在扩展可以使用之前安装额外的软件包。虽然 Python 依赖项由 `setuptools "
"<https://setuptools.readthedocs.io/en/latest/>`__ 软件包处理并在 ``setup.py`` "
"文件中指定，但是像 `ROS <https://www.ros.org/>`__ 软件包或 `apt "
"<https://en.wikipedia.org/wiki/APT_(software)>`__ 软件包之类的非 Python 依赖项并不由 "
"setuptools 处理。处理这些类型的依赖关系需要额外的过程。"

#: ../../source/overview/developer-guide/development.rst:89
msgid ""
"There are two types of dependencies that can be specified in the "
"``extension.toml`` file under the ``isaac_lab_settings`` section:"
msgstr "有两种类型的依赖关系可以在 ``extension.toml`` 文件的 ``isaac_lab_settings`` 部分中指定: "

#: ../../source/overview/developer-guide/development.rst:92
msgid ""
"**apt_deps**: A list of apt packages that need to be installed. These are "
"installed using the `apt <https://ubuntu.com/server/docs/package-"
"management>`__ package manager."
msgstr ""
"**apt_deps**: 需要安装的apt软件包列表。这些使用 `apt "
"<https://ubuntu.com/server/docs/package-management>`__ 软件包管理器安装。"

#: ../../source/overview/developer-guide/development.rst:94
msgid ""
"**ros_ws**: The path to the ROS workspace that contains the ROS packages. "
"These are installed using the `rosdep "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ "
"dependency manager."
msgstr ""
"**ros_ws**: 包含 ROS 软件包的 ROS 工作空间路径。这些软件包是使用 `rosdep "
"<https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ "
"依赖管理器安装的。"

#: ../../source/overview/developer-guide/development.rst:97
msgid ""
"As an example, the following ``extension.toml`` file specifies the "
"dependencies for the extension:"
msgstr "作为示例，以下的 ``extension.toml`` 文件指定了扩展的依赖关系: "

#: ../../source/overview/developer-guide/development.rst:109
msgid ""
"These dependencies are installed using the ``install_deps.py`` script "
"provided in the ``tools`` directory. To install all dependencies for all "
"extensions, run the following command:"
msgstr ""
"这些依赖项是使用 ``tools`` 目录中提供的 ``install_deps.py`` 脚本安装的。要为所有扩展安装所有依赖项，请运行以下命令: "

#: ../../source/overview/developer-guide/development.rst:120
msgid ""
"Currently, this script is automatically executed during the build process of"
" the ``Dockerfile.base`` and ``Dockerfile.ros2``. This ensures that all the "
"'apt' and 'rosdep' dependencies are installed before building the extensions"
" respectively."
msgstr ""
"当前，此脚本在构建 ``Dockerfile.base`` 和 ``Dockerfile.ros2`` "
"的过程中自动执行。这确保在构建扩展之前分别安装所有 'apt' 和 'rosdep' 依赖项。"

#: ../../source/overview/developer-guide/development.rst:126
msgid "Standalone applications"
msgstr "独立应用程序"

#: ../../source/overview/developer-guide/development.rst:128
msgid ""
"In a typical Omniverse workflow, the simulator is launched first and then "
"the extensions are enabled. The loading of python modules and other python "
"applications happens automagically, under the hood, and while this is the "
"recommended workflow, it is not always possible."
msgstr ""
"在典型的 Omniverse 工作流程中，首先启动仿真器，然后启用扩展。Python 模块和其他 Python "
"应用的加载会自动发生，在后台完成，虽然这是推荐的工作流程，但并非总是可行的。"

#: ../../source/overview/developer-guide/development.rst:132
msgid ""
"For example, consider robot reinforcement learning. It is essential to have "
"complete control over the simulation step and when things update instead of "
"asynchronously waiting for the result. In such cases, we require direct "
"control of the simulation, and so it is necessary to write a standalone "
"application. These applications are functionally similar in that they launch"
" the simulator using the :class:`~isaaclab.app.AppLauncher` and then control"
" the simulation directly through the "
":class:`~isaaclab.sim.SimulationContext`. In these cases, python modules "
"from extensions **must** be imported after the app is launched.  Doing so "
"before the app is launched will cause missing module errors."
msgstr ""
"例如，考虑机器人强化学习。在这种情况下，必须完全控制仿真步骤和更新时机，而不是异步等待结果。在这种情况下，我们需要直接控制仿真，因此有必要编写一个独立的应用程序。这些应用程序在功能上是相似的，它们通过"
" :class:`~isaaclab.app.AppLauncher` 启动仿真器，然后通过 "
":class:`~isaaclab.sim.SimulationContext` 直接控制仿真。在这些情况下，必须在应用程序启动后导入扩展的 "
"python 模块。 在应用程序启动之前这样做会导致缺少模块错误。"

#: ../../source/overview/developer-guide/development.rst:137
msgid "The following snippet shows how to write a standalone application:"
msgstr "以下代码片段显示了如何编写一个独立应用程序: "

#: ../../source/overview/developer-guide/development.rst:168
msgid ""
"It is necessary to launch the simulator before running any other code "
"because extensions are hot-loaded when the simulator starts. Many Omniverse "
"modules become available only after the simulator is launched. For further "
"details, we recommend exploring the Isaac Lab :ref:`tutorials`."
msgstr ""
"在运行任何其他代码之前，必须先启动仿真器，因为扩展在仿真器启动时会被热加载。许多 Omniverse "
"模块只有在启动仿真器后才会变得可用。有关更多详细信息，我们建议探索 Isaac Lab :ref:`tutorials` 。"
