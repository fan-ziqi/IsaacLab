# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-28 10:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/overview/sensors/frame_transformer.rst:4
msgid "Frame Transformer"
msgstr "坐标系转换器"

#: ../../source/overview/sensors/frame_transformer.rst:-1
msgid "A diagram outlining the basic geometry of frame transformations"
msgstr "概述坐标系变换基本几何形状的图表"

#: ../../source/overview/sensors/frame_transformer.rst:14
msgid ""
"One of the most common operations that needs to be performed within a "
"physics simulation is the frame transformation: rewriting a vector or "
"quaternion in the basis of an arbitrary euclidean coordinate system. There "
"are many ways to accomplish this within Isaac and USD, but these methods can"
" be cumbersome to implement within Isaac Lab's GPU based simulation and "
"cloned environments. To mitigate this problem, we have designed the Frame "
"Transformer Sensor, that tracks and calculate the relative frame "
"transformations for rigid bodies of interest to the scene."
msgstr ""
"在物理仿真中，最常见的操作之一是坐标系转换：在任意欧几里得坐标系的基底下重写向量或四元数。虽然在 Isaac 和 USD "
"中有多种方法可以实现这一操作，但在 Isaac Lab 的基于 GPU 的仿真和克隆环境中实现这些方法可能会显得繁琐。为了解决这个问题，我们设计了 "
"坐标系转换传感器，它能够跟踪并计算场景中感兴趣的刚体的相对坐标系转换。"

#: ../../source/overview/sensors/frame_transformer.rst:16
msgid ""
"The sensory is minimally defined by a source frame and a list of target "
"frames.  These definitions take the form of a prim path (for the source) and"
" list of regex capable prim paths the rigid bodies to be tracked (for the "
"targets)."
msgstr ""
"传感器的最小定义由一个源坐标系和一个目标坐标系列表组成。这些定义分别以基本路径（用于源）和支持正则表达式的基本路径列表（用于跟踪的刚体的目标）表示。"

#: ../../source/overview/sensors/frame_transformer.rst:75
msgid "We can now run the scene and query the sensor for data"
msgstr "我们现在可以运行场景并查询传感器以获取数据"

#: ../../source/overview/sensors/frame_transformer.rst:101
msgid ""
"Let's take a look at the result for tracking specific objects. First, we can"
" take a look at the data coming from the sensors on the feet"
msgstr "让我们来看看跟踪特定物体的结果。首先，我们可以查看来自脚部传感器的数据。"

#: ../../source/overview/sensors/frame_transformer.rst:-1
msgid "The frame transformer visualizer"
msgstr "坐标系转换器可视化工具"

#: ../../source/overview/sensors/frame_transformer.rst:122
msgid ""
"By activating the visualizer, we can see that the frames of the feet are "
"rotated \"upward\" slightly.  We can also see the explicit relative "
"positions and rotations by querying the sensor for data, which returns these"
" values as a list with the same order as the tracked frames.  This becomes "
"even more apparent if we examine the transforms specified by regex."
msgstr ""
"通过激活可视化工具，我们可以看到脚部的坐标系略微 \"向上\" "
"旋转。我们还可以通过查询传感器数据来查看明确的相对位置和旋转，这些数据以与跟踪坐标系相同顺序的列表形式返回。如果我们检查由正则表达式指定的变换，这一点变得更加明显。"

#: ../../source/overview/sensors/frame_transformer.rst:151
msgid ""
"Here, the sensor is tracking all rigid body children of ``Robot/base``, but "
"this expression is **inclusive**, meaning that the source body itself is "
"also a target. This can be seen both by examining the source and target "
"list, where ``base`` appears twice, and also in the returned data, where the"
" sensor returns the relative transform to itself, (0, 0, 0)."
msgstr ""
"在这里，传感器正在跟踪 ``Robot/base`` 的所有刚体子节点，但这个表达式是 **包含的** "
"，意味着源身体本身也是一个目标。这可以通过检查源和目标列表来看，``base`` 出现了两次，也可以通过返回的数据看出，传感器返回相对于自身的变换（0,"
" 0, 0）。"

#: ../../source/overview/sensors/frame_transformer.rst
msgid "Code for frame_transformer_sensor.py"
msgstr "frame_transformer_sensor.py 的代码"
