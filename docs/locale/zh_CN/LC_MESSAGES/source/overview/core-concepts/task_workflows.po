# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-21 01:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/overview/core-concepts/task_workflows.rst:5
msgid "Task Design Workflows"
msgstr "任务设计工作流程"

#: ../../source/overview/core-concepts/task_workflows.rst:9
msgid ""
"Environments define the interface between the agent and the simulation. In "
"the simplest case, the environment provides the agent with the current "
"observations and executes the actions provided by the agent. In a Markov "
"Decision Process (MDP) formulation, the environment can also provide "
"additional information such as the current reward, done flag, and "
"information about the current episode."
msgstr ""
"环境定义了智能体和仿真之间的接口。在最简单的情况下，环境为智能体提供当前观察，并执行智能体提供的动作。在马尔可夫决策过程（MDP）的制定中，环境还可以提供额外的信息，比如当前奖励、完成标志以及当前情节的信息。"

#: ../../source/overview/core-concepts/task_workflows.rst:14
msgid ""
"While the environment interface is simple to understand, its implementation "
"can vary significantly depending on the complexity of the task. In the "
"context of reinforcement learning (RL), the environment implementation can "
"be broken down into several components, such as the reward function, "
"observation function, termination function, and reset function. Each of "
"these components can be implemented in different ways depending on the "
"complexity of the task and the desired level of modularity."
msgstr ""
"虽然环境接口易于理解，但其实现可以根据任务的复杂程度而有显著差异。在强化学习（RL）的背景下，环境实现可以分解为几个组件，如奖励函数、观察函数、终止函数和重置函数。每个组件都可以根据任务的复杂程度和所期望的模块化级别以不同的方式实现。"

#: ../../source/overview/core-concepts/task_workflows.rst:20
msgid ""
"We provide two different workflows for designing environments with the "
"framework:"
msgstr "我们提供两种不同的工作流程用于使用该框架设计环境："

#: ../../source/overview/core-concepts/task_workflows.rst:22
msgid ""
"**Manager-based**: The environment is decomposed into individual components "
"(or managers) that handle different aspects of the environment (such as "
"computing observations, applying actions, and applying randomization). The "
"user defines configuration classes for each component and the environment is"
" responsible for coordinating the managers and calling their functions."
msgstr ""
"**基于管理者**: "
"环境被分解为单独的组件（或管理者），这些组件处理环境的不同方面（例如计算观察、应用动作和应用随机化）。用户为每个组件定义配置类，环境负责协调管理者并调用它们的函数。"

#: ../../source/overview/core-concepts/task_workflows.rst:26
msgid ""
"**Direct**: The user defines a single class that implements the entire "
"environment directly without the need for separate managers. This class is "
"responsible for computing observations, applying actions, and computing "
"rewards."
msgstr "**直接**: 用户定义一个单一类，该类直接实现整个环境，而无需单独的管理器。这个类负责计算观察、应用动作和计算奖励。"

#: ../../source/overview/core-concepts/task_workflows.rst:29
msgid ""
"Both workflows have their own advantages and disadvantages. The manager-"
"based workflow is more modular and allows different components of the "
"environment to be swapped out easily. This is useful when prototyping the "
"environment and experimenting with different configurations. On the other "
"hand, the direct workflow is more efficient and allows for more fine-grained"
" control over the environment logic. This is useful when optimizing the "
"environment for performance or when implementing complex logic that is "
"difficult to decompose into separate components."
msgstr ""
"两个工作流程各有优缺点。基于管理者的工作流程更具模块化，允许环境的不同组件轻松更换。这在原型环境和实验不同配置时非常有用。另一方面，直接工作流程更高效，允许对环境逻辑进行更细粒度的控制。这在优化环境性能或实现复杂逻辑时非常有用，而这些复杂逻辑难以拆分为独立组件。"

#: ../../source/overview/core-concepts/task_workflows.rst:37
msgid "Manager-Based Environments"
msgstr "基于管理者的环境"

#: ../../source/overview/core-concepts/task_workflows.rst:39
msgid ""
"A majority of environment implementations follow a similar structure. The "
"environment processes the input actions, steps through the simulation, "
"computes observations and reward signals, applies randomization, and resets "
"the terminated environments. Motivated by this, the environment can be "
"decomposed into individual components that handle each of these tasks. For "
"example, the observation manager is responsible for computing the "
"observations, the reward manager is responsible for computing the rewards, "
"and the termination manager is responsible for computing the termination "
"signal. This approach is known as the manager-based environment design in "
"the framework."
msgstr ""
"大多数环境实现遵循类似的结构。环境处理输入动作，经过仿真步骤，计算观察值和奖励信号，应用随机化，并重置终止的环境。基于此，环境可以被分解为处理每个任务的单独组件。例如，观察管理器负责计算观察值，奖励管理器负责计算奖励，终止管理器负责计算终止信号。这种方法在框架中被称为基于管理器的环境设计。"

#: ../../source/overview/core-concepts/task_workflows.rst:46
msgid ""
"Manager-based environments promote modular implementations of tasks by "
"decomposing the task into individual components that are managed by separate"
" classes. Each component of the task, such as rewards, observations, "
"termination can all be specified as individual configuration classes that "
"are then passed to the corresponding manager classes. The manager is then "
"responsible for parsing the configurations and processing the contents "
"specified in its configuration."
msgstr ""
"基于管理者的环境通过将任务分解为由独立类管理的各个组件，促进任务的模块化实现。任务的每个组件，例如奖励、观察、终止，都可以指定为独立的配置类，然后传递给相应的管理者类。管理者负责解析配置并处理其配置中指定的内容。"

#: ../../source/overview/core-concepts/task_workflows.rst:52
msgid ""
"The coordination between the different managers is orchestrated by the class"
" :class:`envs.ManagerBasedRLEnv`. It takes in a task configuration class "
"instance (:class:`envs.ManagerBasedRLEnvCfg`) that contains the "
"configurations for each of the components of the task. Based on the "
"configurations, the scene is set up and the task is initialized. Afterwards,"
" while stepping through the environment, all the managers are called "
"sequentially to perform the necessary operations."
msgstr ""
"不同管理者之间的协调由类 :class:`envs.ManagerBasedRLEnv` 协调。 它接收一个任务配置类实例 ( "
":class:`envs.ManagerBasedRLEnvCfg` )，其中包含任务各个组件的配置。 根据配置，设置场景并初始化任务。 "
"然后，通过环境进行步进时，依次调用所有管理者执行必要的操作。"

#: ../../source/overview/core-concepts/task_workflows.rst:58
msgid ""
"For their own tasks, we expect the user to mainly define the task "
"configuration class and use the existing :class:`envs.ManagerBasedRLEnv` "
"class for the task implementation. The task configuration class should "
"inherit from the base class :class:`envs.ManagerBasedRLEnvCfg` and contain "
"variables assigned to various configuration classes for each component (such"
" as the ``ObservationCfg`` and ``RewardCfg``)."
msgstr ""
"为了他们自己的任务，我们期望用户主要定义任务配置类，并使用现有的 :class:`envs.ManagerBasedRLEnv` "
"类进行任务实现。任务配置类应继承自基类 "
":class:`envs.ManagerBasedRLEnvCfg`，并包含分配给每个组件的各种配置类的变量（例如 ``ObservationCfg``"
" 和 ``RewardCfg``）。"

#: ../../source/overview/core-concepts/task_workflows.rst
msgid ""
"Example for defining the reward function for the Cartpole task using the "
"manager-style"
msgstr "用于使用管理器样式定义Cartpole任务的奖励函数的示例"

#: ../../source/overview/core-concepts/task_workflows.rst:66
msgid ""
"The following class is a part of the Cartpole environment configuration "
"class. The :class:`RewardsCfg` class defines individual terms that compose "
"the reward function. Each reward term is defined by its function "
"implementation, weight and additional parameters to be passed to the "
"function. Users can define multiple reward terms and their weights to be "
"used in the reward function."
msgstr ""
"以下类是 Cartpole 环境配置类的一部分。:class:`RewardsCfg` "
"类定义了构成奖励函数的各个项。每个奖励项由其函数实现、权重和要传递给函数的附加参数定义。用户可以定义多个奖励项及其权重，以用于奖励函数。"

#: ../../source/overview/core-concepts/task_workflows.rst:76
msgid ""
"Through this approach, it is possible to easily vary the implementations of "
"the task by switching some components while leaving the remaining of the "
"code intact. This flexibility is desirable when prototyping the environment "
"and experimenting with different configurations. It also allows for easy "
"collaborating with others on implementing an environment, since contributors"
" may choose to use different combinations of configurations for their own "
"task specifications."
msgstr ""
"通过这种方法，可以轻松地通过切换某些组件而保持其余代码不变来改变任务的实现。这种灵活性在原型设计环境和尝试不同配置时是非常可取的。它还允许与他人轻松合作实现一个环境，因为贡献者可以选择为他们自己的任务规范使用不同组合的配置。"

#: ../../source/overview/core-concepts/task_workflows.rst:84
msgid ""
"We provide a more detailed tutorial for setting up an environment using the "
"manager-based workflow at :ref:`tutorial-create-manager-rl-env`."
msgstr ""
"我们为使用基于管理器的工作流设置环境提供了更详细的教程，位于 :ref:`tutorial-create-manager-rl-env` 。"

#: ../../source/overview/core-concepts/task_workflows.rst:89
msgid "Direct Environments"
msgstr "直接的环境"

#: ../../source/overview/core-concepts/task_workflows.rst:91
msgid ""
"The direct-style environment aligns more closely with traditional "
"implementations of environments, where a single script directly implements "
"the reward function, observation function, resets, and all the other "
"components of the environment. This approach does not require the manager "
"classes. Instead, users are provided the complete freedom to implement their"
" task through the APIs from the base classes :class:`envs.DirectRLEnv` or "
":class:`envs.DirectMARLEnv`. For users migrating from the `IsaacGymEnvs`_ "
"and `OmniIsaacGymEnvs`_ framework, this workflow may be more familiar."
msgstr ""
"直接样式环境更符合传统环境实现，其中单个脚本直接实现奖励函数、观测函数、重置和环境的所有其他组件。这种方法不需要管理类。相反，用户可以通过基类 "
":class: `envs.DirectRLEnv` 或 :class: `envs.DirectMARLEnv` 的API自由实现他们的任务。对于从 "
"`IsaacGymEnvs`_ 和 `OmniIsaacGymEnvs`_ 框架迁移的用户，这种工作流程可能更为熟悉。"

#: ../../source/overview/core-concepts/task_workflows.rst:97
msgid ""
"When defining an environment with the direct-style implementation, we expect"
" the user define a single class that implements the entire environment. The "
"task class should inherit from the base classes :class:`envs.DirectRLEnv` or"
" :class:`envs.DirectMARLEnv` and should have its corresponding configuration"
" class that inherits from :class:`envs.DirectRLEnvCfg` or "
":class:`envs.DirectMARLEnvCfg` respectively. The task class is responsible "
"for setting up the scene, processing the actions, computing the rewards, "
"observations, resets, and termination signals."
msgstr ""
"在使用直接样式实现定义环境时，我们期望用户定义一个实现整个环境的单个类。任务类应该继承自基类 :class:`envs.DirectRLEnv` 或 "
":class:`envs.DirectMARLEnv`，并且应该有其相应的配置类，该配置类分别继承自 "
":class:`envs.DirectRLEnvCfg` 或 "
":class:`envs.DirectMARLEnvCfg`。任务类负责设置场景、处理动作、计算奖励、观测、重置和终止信号。"

#: ../../source/overview/core-concepts/task_workflows.rst
msgid ""
"Example for defining the reward function for the Cartpole task using the "
"direct-style"
msgstr "为 Cartpole 任务定义奖励函数的示例，使用直接风格"

#: ../../source/overview/core-concepts/task_workflows.rst:106
msgid ""
"The following function is a part of the Cartpole environment class and is "
"responsible for computing the rewards."
msgstr "以下函数是Cartpole环境类的一部分，负责计算奖励。"

#: ../../source/overview/core-concepts/task_workflows.rst:113
msgid ""
"It calls the :meth:`compute_rewards` function which is Torch JIT compiled "
"for performance benefits."
msgstr "它调用了 `compute_rewards`_ 函数，该函数经过Torch JIT编译以获得性能优势。"

#: ../../source/overview/core-concepts/task_workflows.rst:119
msgid ""
"This approach provides more transparency in the implementations of the "
"environments, as logic is defined within the task class instead of "
"abstracted with the use of managers. This may be beneficial when "
"implementing complex logic that is difficult to decompose into separate "
"components. Additionally, the direct-style implementation may bring more "
"performance benefits for the environment, as it allows implementing large "
"chunks of logic with optimized frameworks such as `PyTorch JIT`_ or `Warp`_."
" This may be valuable when scaling up training tremendously which requires "
"optimizing individual operations in the environment."
msgstr ""
"这种方法提供了更高的透明度，因为逻辑在任务类中定义，而不是通过管理器进行抽象。当实现复杂的逻辑时，这可能是有益的，因为这些逻辑难以分解成独立的组件。此外，直接风格的实现可能会为环境带来更多的性能收益，因为它允许使用优化框架，如"
" `PyTorch JIT`_ 或 `Warp`_ 来实现大量逻辑。当需要大规模训练并优化环境中的单个操作时，这可能是有价值的。"

#: ../../source/overview/core-concepts/task_workflows.rst:128
msgid ""
"We provide a more detailed tutorial for setting up a RL environment using "
"the direct workflow at :ref:`tutorial-create-direct-rl-env`."
msgstr ""
"我们为使用直接工作流程设置强化学习环境提供了更详细的教程，可参考 :ref:`tutorial-create-direct-rl-env`。"
