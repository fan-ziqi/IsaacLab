# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-23 23:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/overview/core-concepts/actuators.rst:5
msgid "Actuators"
msgstr "执行器"

#: ../../source/overview/core-concepts/actuators.rst:7
msgid ""
"An articulated system comprises of actuated joints, also called the degrees "
"of freedom (DOF). In a physical system, the actuation typically happens "
"either through active components, such as electric or hydraulic motors, or "
"passive components, such as springs. These components can introduce certain "
"non-linear characteristics which includes delays or maximum producible "
"velocity or torque."
msgstr ""
"一个关节系统由驱动关节组成，也称为自由度（DOF）。在物理系统中，驱动通常通过主动组件进行，例如电动或液压马达，或通过被动组件，例如弹簧。这些组件可能会引入某些非线性特性，包括延迟或最大可产生的速度或扭矩。"

#: ../../source/overview/core-concepts/actuators.rst:12
msgid ""
"In simulation, the joints are either position, velocity, or torque-"
"controlled. For position and velocity control, the physics engine internally"
" implements a spring-damp (PD) controller which computes the torques applied"
" on the actuated joints. In torque-control, the commands are set directly as"
" the joint efforts. While this mimics an ideal behavior of the joint "
"mechanism, it does not truly model how the drives work in the physical "
"world. Thus, we provide a mechanism to inject external models to compute the"
" joint commands that would represent the physical robot's behavior."
msgstr ""
"在仿真中，关节可以是位置控制、速度控制或扭矩控制。对于位置和速度控制，物理引擎内部实现了一个弹簧-"
"阻尼（PD）控制器，用于计算作用在执行关节上的扭矩。在扭矩控制中，命令直接设置为关节力。虽然这模拟了关节机制的理想行为，但并不能真实地模拟驱动器在现实世界中的工作方式。因此，我们提供了一个机制来注入外部模型，以计算关节命令，以代表物理机器人的行为。"

#: ../../source/overview/core-concepts/actuators.rst:20
msgid "Actuator models"
msgstr "执行器模型"

#: ../../source/overview/core-concepts/actuators.rst:22
msgid "We name two different types of actuator models:"
msgstr "我们命名两种不同类型的执行器模型: "

#: ../../source/overview/core-concepts/actuators.rst:24
msgid ""
"**implicit**: corresponds to the ideal simulation mechanism (provided by "
"physics engine)."
msgstr "**隐式**: 对应于理想的仿真机制（由物理引擎提供）。"

#: ../../source/overview/core-concepts/actuators.rst:25
msgid ""
"**explicit**: corresponds to external drive models (implemented by user)."
msgstr "**显式**: 对应于外部驱动器模型（由用户实现）。"

#: ../../source/overview/core-concepts/actuators.rst:27
msgid ""
"The explicit actuator model performs two steps: 1) it computes the desired "
"joint torques for tracking the input commands, and 2) it clips the desired "
"torques based on the motor capabilities. The clipped torques are the desired"
" actuation efforts that are set into the simulation."
msgstr ""
"显式执行器模型执行两个步骤: 1）计算用于跟踪输入命令的期望关节力矩，2）根据电机能力对期望力矩进行裁减。裁减后的力矩是设置到模拟中的期望执行力。"

#: ../../source/overview/core-concepts/actuators.rst:31
msgid ""
"As an example of an ideal explicit actuator model, we provide the "
":class:`isaaclab.actuators.IdealPDActuator` class, which implements a PD "
"controller with feed-forward effort, and simple clipping based on the "
"configured maximum effort:"
msgstr ""
"作为理想显式执行器模型的示例，我们提供 :class:`isaaclab.actuators.IdealPDActuator` 类，它实现了具有前馈力的"
" PD 控制器，并根据配置的最大力进行简单剪裁。"

#: ../../source/overview/core-concepts/actuators.rst:35
#, python-brace-format
msgid ""
"\\tau_{j, computed} & = k_p * (q_{des} - q) + k_d * (\\dot{q}_{des} - \\dot{q}) + \\tau_{ff} \\\\\n"
"\\tau_{j, max} & = \\gamma \\times \\tau_{motor, max} \\\\\n"
"\\tau_{j, applied} & = clip(\\tau_{computed}, -\\tau_{j, max}, \\tau_{j, max})"
msgstr ""
"\\tau_{j, computed} & = k_p * (q_{des} - q) + k_d * (\\dot{q}_{des} - \\dot{q}) + \\tau_{ff} \\\\\n"
"\\tau_{j, max} & = \\gamma \\times \\tau_{motor, max} \\\\\n"
"\\tau_{j, applied} & = clip(\\tau_{computed}, -\\tau_{j, max}, \\tau_{j, max})"

#: ../../source/overview/core-concepts/actuators.rst:42
#, python-brace-format
msgid ""
"where, :math:`k_p` and :math:`k_d` are joint stiffness and damping gains, "
":math:`q` and :math:`\\dot{q}` are the current joint positions and "
"velocities, :math:`q_{des}`, :math:`\\dot{q}_{des}` and :math:`\\tau_{ff}` "
"are the desired joint positions, velocities and torques commands. The "
"parameters :math:`\\gamma` and :math:`\\tau_{motor, max}`  are the gear box "
"ratio and the maximum motor effort possible."
msgstr ""
"其中， :math:`k_p` 和 :math:`k_d` 是关节刚度和阻尼增益， :math:`q` 和 :math:`\\dot{q}` "
"是当前关节位置和速度， :math:`q_{des}` , :math:`\\dot{q}_{des}` 和 :math:`\\tau_{ff}` "
"是期望的关节位置、速度和力矩指令。参数 :math:`\\gamma` 和 :math:`\\tau_{motor, max}` "
"是齿轮箱传动比和最大电机力矩。"

#: ../../source/overview/core-concepts/actuators.rst:48
msgid "Actuator groups"
msgstr "执行器组"

#: ../../source/overview/core-concepts/actuators.rst:50
msgid ""
"The actuator models by themselves are computational blocks that take as "
"inputs the desired joint commands and output the joint commands to apply "
"into the simulator. They do not contain any knowledge about the joints they "
"are acting on themselves. These are handled by the "
":class:`isaaclab.assets.Articulation` class, which wraps around the physics "
"engine's articulation class."
msgstr ""
"执行器模型本身是计算块，其输入为期望的关节命令，并输出应用于模拟器的关节命令。它们不包含任何关于它们自身作用的关节的知识。这些由 "
":class:`isaaclab.assets.Articulation` 类处理，该类包装了物理引擎的关节类。"

#: ../../source/overview/core-concepts/actuators.rst:55
msgid ""
"Actuator are collected as a set of actuated joints on an articulation that "
"are using the same actuator model. For instance, the quadruped, ANYmal-C, "
"uses series elastic actuator, ANYdrive 3.0, for all its joints. This "
"grouping configures the actuator model for those joints, translates the "
"input commands to the joint level commands, and returns the articulation "
"action to set into the simulator. Having an arm with a different actuator "
"model, such as a DC motor, would require configuring a different actuator "
"group."
msgstr ""
"执行器被聚合为一组在关节上被激活的执行器，这些关节使用相同的执行器模型。例如，四足动物机器人ANYmal-C使用串联弹性执行器ANYdrive "
"3.0作为所有关节的执行器。此分组配置了这些关节的执行器模型，将输入命令转换为关节级别的命令，并将关节动作返回到模拟器中。如果有一只手臂使用不同的执行器模型，比如直流电机，就需要配置不同的执行器组。"

#: ../../source/overview/core-concepts/actuators.rst:61
msgid ""
"The following figure shows the actuator groups for a legged mobile "
"manipulator:"
msgstr "以下图显示了一个腿式移动机械臂的执行器组。"

#: ../../source/overview/core-concepts/actuators.rst:-1
msgid "Actuator models for a legged mobile manipulator"
msgstr "腿足移动操控器的驱动器模型"

#: ../../source/overview/core-concepts/actuators.rst:77
msgid ""
"We provide implementations for various explicit actuator models. These are "
"detailed in `isaaclab.actuators <../../api/lab/isaaclab.actuators.html>`_ "
"sub-package."
msgstr ""
"我们为各种显式执行器模型提供实现。这些详细信息可在 `isaaclab.actuators "
"<../../api/lab/isaaclab.actuators.html>`_ 子包中找到。"

#: ../../source/overview/core-concepts/actuators.rst:81
msgid "Considerations when using actuators"
msgstr "在使用执行器时的考虑"

#: ../../source/overview/core-concepts/actuators.rst:83
msgid ""
"As explained in the previous sections, there are two main types of actuator "
"models: implicit and explicit. The implicit actuator model is provided by "
"the physics engine. This means that when the user sets either a desired "
"position or velocity, the physics engine will internally compute the efforts"
" that need to be applied to the joints to achieve the desired behavior. In "
"PhysX, the PD controller adds numerical damping to the desired effort, which"
" results in more stable behavior."
msgstr ""
"如前面所述，有两种主要类型的执行器模型：隐式和显式。隐式执行器模型由物理引擎提供。这意味着当用户设置所需的位置或速度时，物理引擎将在内部计算需要应用到关节的力矩，以实现所需的行为。在PhysX中，PD控制器向所需的力矩添加数值阻尼，从而产生更稳定的行为。"

#: ../../source/overview/core-concepts/actuators.rst:89
msgid ""
"The explicit actuator model is provided by the user. This means that when "
"the user sets either a desired position or velocity, the user's model will "
"compute the efforts that need to be applied to the joints to achieve the "
"desired behavior. While this provides more flexibility, it can also lead to "
"some numerical instabilities. One way to mitigate this is to use the "
"``armature`` parameter of the actuator model, either in the USD file or in "
"the articulation config. This parameter is used to dampen the joint response"
" and helps improve the numerical stability of the simulation. More details "
"on how to improve articulation stability can be found in the `OmniPhysics "
"documentation "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/dev_guide/guides/articulation_stability_guide.html>`_."
msgstr ""
"显式执行器模型由用户提供。这意味着当用户设置所需位置或速度时，用户的模型将计算需要施加到关节上的力矩以实现所需行为。虽然这提供了更多灵活性，但也可能导致一些数值不稳定性。减轻这种情况的一种方法是使用执行器模型的 ``armature`` 参数，无论是在USD文件中还是在关节配置中。该参数用于阻尼关节响应，并有助于提高模拟的数值稳定性。有关如何提高关节稳定性的更多详细信息可以在 `OmniPhysics"
" 文档 "
"<https://docs.omniverse.nvidia.com/kit/docs/omni_physics/latest/dev_guide/guides/articulation_stability_guide.html>`_ 中找到。"

#: ../../source/overview/core-concepts/actuators.rst:97
msgid ""
"What does this mean for the user? It means that policies trained with "
"implicit actuators may not transfer to the exact same robot model when using"
" explicit actuators. If you are running into issues like this, or in cases "
"where policies do not converge on explicit actuators while they do on "
"implicit ones, increasing or setting the ``armature`` parameter to a higher "
"value may help."
msgstr ""
"这对用户意味着什么？这意味着使用隐式执行器训练的策略在使用显式执行器时可能无法转移到完全相同的机器人模型。 "
"如果您遇到这样的问题，或者在策略在隐式执行器上不收敛而在显式执行器上却收敛时，增加或设置 ``armature`` 参数为更高的值可能会有所帮助。"
