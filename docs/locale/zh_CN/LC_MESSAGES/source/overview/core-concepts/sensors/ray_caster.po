# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 11:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:6
msgid "Ray Caster"
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:-1
msgid "A diagram outlining the basic geometry of frame transformations"
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:13
msgid ""
"The Ray Caster sensor (and the ray caster camera) are similar to RTX "
"based rendering in that they both involve casting rays.  The difference "
"here is that the rays cast by the Ray Caster sensor return strictly "
"collision information along the cast, and the direction of each "
"individual ray can be specified.  They do not bounce, nor are they "
"affected by things like materials or opacity. For each ray specified by "
"the sensor, a line is traced along the path of the ray and the location "
"of first collision with the specified mesh is returned. This is the "
"method used by some of our quadruped examples to measure the local height"
" field."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:15
msgid ""
"To keep the sensor performant when there are many cloned environments, "
"the line tracing is done directly in `Warp "
"<https://nvidia.github.io/warp/>`_. This is the reason why specific "
"meshes need to be identified to cast against: that mesh data is loaded "
"onto the device by warp when the sensor is initialized. As a consequence,"
" the current iteration of this sensor only works for literally static "
"meshes (meshes that *are not changed from the defaults specified in their"
" USD file*).  This constraint will be removed in future releases."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:17
msgid ""
"Using a ray caster sensor requires a **pattern** and a parent xform to be"
" attached to.  The pattern defines how the rays are cast, while the prim "
"properties defines the orientation and position of the sensor (additional"
" offsets can be specified for more exact placement).  Isaac Lab supports "
"a number of ray casting pattern configurations, including a generic LIDAR"
" and grid pattern."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:23
msgid ""
"Notice that the units on the pattern config is in degrees! Also, we "
"enable visualization here to explicitly show the pattern in the "
"rendering, but this is not required and should be disabled for "
"performance tuning."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:-1
msgid "Lidar Pattern visualized"
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:30
msgid ""
"Querying the sensor for data can be done at simulation run time like any "
"other sensor."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:68
msgid ""
"Here we can see the data returned by the sensor itself.  Notice first "
"that there are 3 closed brackets at the beginning and the end: this is "
"because the data returned is batched by the number of sensors. The ray "
"cast pattern itself has also been flattened, and so the dimensions of the"
" array are ``[N, B, 3]`` where ``N`` is the number of sensors, ``B`` is "
"the number of cast rays in the pattern, and 3 is the dimension of the "
"casting space. Finally, notice that the first several values in this "
"casting pattern are the same: this is because the lidar pattern is "
"spherical and we have specified our FOV  to be hemispherical, which "
"includes the poles. In this configuration, the \"flattening pattern\" "
"becomes apparent: the first 180 entries will be the same because it's the"
" bottom pole of this hemisphere, and there will be 180 of them because "
"our horizontal FOV is 180 degrees with a resolution of 1 degree."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst:70
msgid ""
"You can use this script to experiment with pattern configurations and "
"build an intuition about how the data is stored by altering the "
"``triggered`` variable on line 81."
msgstr ""

#: ../../source/overview/core-concepts/sensors/ray_caster.rst
msgid "Code for raycaster_sensor.py"
msgstr ""

