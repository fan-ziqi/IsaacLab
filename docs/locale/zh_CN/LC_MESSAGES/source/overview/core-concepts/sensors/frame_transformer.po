# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 2.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-04 11:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:6
msgid "Frame Transformer"
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:-1
msgid "A diagram outlining the basic geometry of frame transformations"
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:16
msgid ""
"One of the most common operations that needs to be performed within a "
"physics simulation is the frame transformation: rewriting a vector or "
"quaternion in the basis of an arbitrary euclidean coordinate system. "
"There are many ways to accomplish this within Isaac and USD, but these "
"methods can be cumbersome to implement within Isaac Lab's GPU based "
"simulation and cloned environments. To mitigate this problem, we have "
"designed the Frame Transformer Sensor, that tracks and calculate the "
"relative frame transformations for rigid bodies of interest to the scene."
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:18
msgid ""
"The sensory is minimally defined by a source frame and a list of target "
"frames.  These definitions take the form of a prim path (for the source) "
"and list of regex capable prim paths the rigid bodies to be tracked (for "
"the targets)."
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:24
msgid "We can now run the scene and query the sensor for data"
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:50
msgid ""
"Let's take a look at the result for tracking specific objects. First, we "
"can take a look at the data coming from the sensors on the feet"
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:-1
msgid "The frame transformer visualizer"
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:72
msgid ""
"By activating the visualizer, we can see that the frames of the feet are "
"rotated \"upward\" slightly. We can also see the explicit relative "
"positions and rotations by querying the sensor for data, which returns "
"these values as a list with the same order as the tracked frames.  This "
"becomes even more apparent if we examine the transforms specified by "
"regex."
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst:104
msgid ""
"Here, the sensor is tracking all rigid body children of ``Robot/base``, "
"but this expression is **inclusive**, meaning that the source body itself"
" is also a target. This can be seen both by examining the source and "
"target list, where ``base`` appears twice, and also in the returned data,"
" where the sensor returns the relative transform to itself, (0, 0, 0)."
msgstr ""

#: ../../source/overview/core-concepts/sensors/frame_transformer.rst
msgid "Code for frame_transformer_sensor.py"
msgstr ""

